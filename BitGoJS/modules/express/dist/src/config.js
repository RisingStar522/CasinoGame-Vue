"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = require("lodash");
var args_1 = require("./args");
function readEnvVar(name) {
    var deprecatedAliases = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        deprecatedAliases[_i - 1] = arguments[_i];
    }
    if (process.env[name] !== undefined) {
        return process.env[name];
    }
    for (var _a = 0, deprecatedAliases_1 = deprecatedAliases; _a < deprecatedAliases_1.length; _a++) {
        var deprecatedAlias = deprecatedAliases_1[_a];
        if (process.env[deprecatedAlias] !== undefined) {
            console.warn("warning: using deprecated environment variable '" + deprecatedAlias + "'. Please use the '" + name + "' environment variable instead.");
            return process.env[deprecatedAlias];
        }
    }
}
exports.ArgConfig = function (args) { return ({
    port: args.port,
    bind: args.bind,
    env: args.env,
    debugNamespace: args.debugnamespace,
    keyPath: args.keypath,
    crtPath: args.crtpath,
    logFile: args.logfile,
    disableSSL: args.disablessl,
    disableProxy: args.disableproxy,
    disableEnvCheck: args.disableenvcheck,
    timeout: args.timeout,
    customRootUri: args.customrooturi,
    customBitcoinNetwork: args.custombitcoinnetwork,
}); };
exports.EnvConfig = function () { return ({
    port: Number(readEnvVar('BITGO_PORT')),
    bind: readEnvVar('BITGO_BIND') || exports.DefaultConfig.bind,
    env: readEnvVar('BITGO_ENV') || exports.DefaultConfig.env,
    debugNamespace: (readEnvVar('BITGO_DEBUG_NAMESPACE') || '').split(','),
    keyPath: readEnvVar('BITGO_KEYPATH'),
    crtPath: readEnvVar('BITGO_CRTPATH'),
    logFile: readEnvVar('BITGO_LOGFILE'),
    disableSSL: readEnvVar('BITGO_DISABLE_SSL', 'BITGO_DISABLESSL', 'DISABLESSL', 'DISABLE_SSL') ?
        true : undefined,
    disableProxy: readEnvVar('BITGO_DISABLE_PROXY', 'DISABLE_PROXY') ? true : undefined,
    disableEnvCheck: readEnvVar('BITGO_DISABLE_ENV_CHECK', 'DISABLE_ENV_CHECK') ? true : undefined,
    timeout: Number(readEnvVar('BITGO_TIMEOUT')),
    customRootUri: readEnvVar('BITGO_CUSTOM_ROOT_URI'),
    customBitcoinNetwork: readEnvVar('BITGO_CUSTOM_BITCOIN_NETWORK'),
}); };
exports.DefaultConfig = {
    port: 3080,
    bind: 'localhost',
    env: 'test',
    debugNamespace: [],
    logFile: '',
    disableSSL: false,
    disableProxy: false,
    disableEnvCheck: false,
    timeout: 305 * 1000,
};
/**
 * Helper function to merge config sources into a single config object.
 *
 * Earlier configs have higher precedence over subsequent configs.
 */
function mergeConfigs() {
    var configs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        configs[_i] = arguments[_i];
    }
    function isNilOrNaN(val) {
        return lodash_1.isNil(val) || (lodash_1.isNumber(val) && isNaN(val));
    }
    // helper to get the first defined value for a given config key
    // from the config sources in a type safe manner
    function get(k) {
        return configs
            .reverse()
            .reduce(function (entry, config) { return !isNilOrNaN(config[k]) ? config[k] : entry; }, exports.DefaultConfig[k]);
    }
    return {
        port: get('port'),
        bind: get('bind'),
        env: get('env'),
        debugNamespace: get('debugNamespace'),
        keyPath: get('keyPath'),
        crtPath: get('crtPath'),
        logFile: get('logFile'),
        disableSSL: get('disableSSL'),
        disableProxy: get('disableProxy'),
        disableEnvCheck: get('disableEnvCheck'),
        timeout: get('timeout'),
        customRootUri: get('customRootUri'),
        customBitcoinNetwork: get('customBitcoinNetwork'),
    };
}
exports.config = function () {
    var arg = exports.ArgConfig(args_1.args());
    var env = exports.EnvConfig();
    return mergeConfigs(arg, env);
};
//# sourceMappingURL=data:application/json;base64,