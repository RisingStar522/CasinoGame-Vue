"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RpcSigner = void 0;
var address_1 = require("@celo/utils/src/address");
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var signing_utils_1 = require("../../utils/signing-utils");
var INCORRECT_PASSWORD_ERROR = 'could not decrypt key with given password';
var currentTimeInSeconds = function () { return Math.round(Date.now() / 1000); };
var toRpcHex = function (val) {
    if (typeof val === 'number' || val instanceof bignumber_js_1.default) {
        return address_1.ensureLeading0x(val.toString(16));
    }
    else if (typeof val === 'string') {
        return address_1.ensureLeading0x(val);
    }
    else {
        return '0x0';
    }
};
// TODO(yorke): move this into rpc-caller and generate typings from RPC spec
var RpcSignerEndpoint;
(function (RpcSignerEndpoint) {
    RpcSignerEndpoint["ImportAccount"] = "personal_importRawKey";
    RpcSignerEndpoint["UnlockAccount"] = "personal_unlockAccount";
    RpcSignerEndpoint["SignTransaction"] = "eth_signTransaction";
    RpcSignerEndpoint["SignBytes"] = "eth_sign";
})(RpcSignerEndpoint || (RpcSignerEndpoint = {}));
/**
 * Implements the signer interface on top of the JSON-RPC interface.
 */
var RpcSigner = /** @class */ (function () {
    /**
     * Construct a new instance of the RPC signer
     *
     * @param rpc RPC caller instance
     * @param account Account address derived from the private key to be called in init
     * @param unlockBufferSeconds Number of seconds to shrink the unlocked duration by to account for
     * latency and timing inconsistencies on the node
     * @param unlockTime Timestamp in seconds when the signer was last unlocked
     * @param unlockDuration Number of seconds that the signer was last unlocked for
     *
     */
    function RpcSigner(rpc, account, unlockBufferSeconds, unlockTime, unlockDuration) {
        var _this = this;
        if (unlockBufferSeconds === void 0) { unlockBufferSeconds = 5; }
        if (unlockTime === void 0) { unlockTime = -1; }
        if (unlockDuration === void 0) { unlockDuration = -1; }
        this.rpc = rpc;
        this.account = account;
        this.unlockBufferSeconds = unlockBufferSeconds;
        this.unlockTime = unlockTime;
        this.unlockDuration = unlockDuration;
        this.init = function (privateKey, passphrase) {
            return _this.callAndCheckResponse(RpcSignerEndpoint.ImportAccount, [
                address_1.trimLeading0x(privateKey),
                passphrase,
            ]);
        };
        this.getNativeKey = function () { return _this.account; };
    }
    RpcSigner.prototype.signRawTransaction = function (tx) {
        return __awaiter(this, void 0, void 0, function () {
            var rpcTx;
            return __generator(this, function (_a) {
                if (address_1.normalizeAddressWith0x(tx.from) !== this.account) {
                    throw new Error("RpcSigner cannot sign tx with 'from' " + tx.from);
                }
                rpcTx = __assign(__assign({}, tx), { nonce: toRpcHex(tx.nonce), value: toRpcHex(tx.value), gas: toRpcHex(tx.gas), gasPrice: toRpcHex(tx.gasPrice), gatewayFee: toRpcHex(tx.gatewayFee) });
                return [2 /*return*/, this.callAndCheckResponse(RpcSignerEndpoint.SignTransaction, [rpcTx])];
            });
        });
    };
    RpcSigner.prototype.signTransaction = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new Error('signTransaction unimplemented; use signRawTransaction');
            });
        });
    };
    RpcSigner.prototype.signPersonalMessage = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.callAndCheckResponse(RpcSignerEndpoint.SignBytes, [
                            this.account,
                            data,
                        ])];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, signing_utils_1.decodeSig(result)];
                }
            });
        });
    };
    RpcSigner.prototype.unlock = function (passphrase, duration) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var error_1;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _c.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.callAndCheckResponse(RpcSignerEndpoint.UnlockAccount, [
                                this.account,
                                passphrase,
                                duration,
                            ])];
                    case 1:
                        _c.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        error_1 = _c.sent();
                        // The callAndCheckResponse will throw an error if the passphrase is incorrect
                        if ((_b = (_a = error_1 === null || error_1 === void 0 ? void 0 : error_1.message) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.includes(INCORRECT_PASSWORD_ERROR)) {
                            return [2 /*return*/, false];
                        }
                        // Re-throw otherwise
                        throw error_1;
                    case 3:
                        this.unlockTime = currentTimeInSeconds();
                        this.unlockDuration = duration;
                        return [2 /*return*/, true];
                }
            });
        });
    };
    RpcSigner.prototype.isUnlocked = function () {
        return this.unlockTime + this.unlockDuration - this.unlockBufferSeconds > currentTimeInSeconds();
    };
    RpcSigner.prototype.callAndCheckResponse = function (endpoint, params) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.rpc.call(endpoint, params)];
                    case 1:
                        response = _a.sent();
                        if (response.error) {
                            throw new Error("RpcSigner@" + endpoint + " failed with \n'" + response.error.message + "'");
                        }
                        return [2 /*return*/, response.result];
                }
            });
        });
    };
    return RpcSigner;
}());
exports.RpcSigner = RpcSigner;
//# sourceMappingURL=rpc-signer.js.map