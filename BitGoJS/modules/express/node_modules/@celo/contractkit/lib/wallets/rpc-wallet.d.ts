import { provider, Tx } from 'web3-core';
import { RpcCaller } from '../utils/rpc-caller';
import { RemoteWallet } from './remote-wallet';
import { Signer } from './signers/signer';
export declare enum RpcWalletErrors {
    FetchAccounts = "RpcWallet: failed to fetch accounts from server",
    AccountAlreadyExists = "RpcWallet: account already exists"
}
export declare class RpcWallet extends RemoteWallet {
    protected _provider: provider;
    protected readonly rpc: RpcCaller;
    constructor(_provider: provider);
    loadAccountSigners(): Promise<Map<string, Signer>>;
    addAccount(privateKey: string, passphrase: string): Promise<string>;
    unlockAccount(address: string, passphrase: string, duration: number): Promise<boolean>;
    isAccountUnlocked(address: string): boolean;
    /**
     * Gets the signer based on the 'from' field in the tx body
     * @param txParams Transaction to sign
     * @dev overrides WalletBase.signTransaction
     */
    signTransaction(txParams: Tx): Promise<import("web3-core").EncodedTransaction>;
}
