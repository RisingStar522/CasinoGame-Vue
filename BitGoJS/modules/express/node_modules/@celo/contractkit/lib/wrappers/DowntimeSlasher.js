"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DowntimeSlasherWrapper = void 0;
var address_1 = require("@celo/utils/lib/address");
var BaseWrapper_1 = require("./BaseWrapper");
/**
 * Contract handling slashing for Validator downtime using intervals.
 */
var DowntimeSlasherWrapper = /** @class */ (function (_super) {
    __extends(DowntimeSlasherWrapper, _super);
    function DowntimeSlasherWrapper() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Returns slashing incentives.
         * @return Rewards and penalties for slashing.
         */
        _this.slashingIncentives = BaseWrapper_1.proxyCall(_this.contract.methods.slashingIncentives, undefined, function (res) { return ({
            reward: BaseWrapper_1.valueToBigNumber(res.reward),
            penalty: BaseWrapper_1.valueToBigNumber(res.penalty),
        }); });
        /**
         * Returns slashable downtime in blocks.
         * @return The number of consecutive blocks before a Validator missing from IBFT consensus
         * can be slashed.
         */
        _this.slashableDowntime = BaseWrapper_1.proxyCall(_this.contract.methods.slashableDowntime, undefined, BaseWrapper_1.valueToInt);
        /**
         * Check if a validator appears down in the bitmap for the interval of blocks.
         * Both startBlock and endBlock should be part of the same epoch.
         * @param startBlock First block of the interval.
         * @param endBlock Last block of the interval.
         * @param signerIndex Index of the signer within the validator set.
         * @return True if the validator does not appear in the bitmap of the interval.
         */
        _this.wasDownForInterval = BaseWrapper_1.proxyCall(_this.contract.methods.wasDownForInterval);
        /**
         * Calculates and returns the signature bitmap for the specified interval.
         * Similar to the parentSealBitmap of every block (where you have which validators were
         * able to sign the previous block), this bitmap shows for that specific interval which
         * validators signed at least one block
         * @param startBlock First block of the interval.
         * @param endBlock Last block of the interval.
         * @return (string) The signature uptime bitmap for the specified interval.
         * @dev startBlock and endBlock must be in the same epoch.
         * @dev The getParentSealBitmap precompile requires that startBlock must be within 4 epochs of
         * the current block.
         */
        _this.getBitmapForInterval = BaseWrapper_1.proxyCall(_this.contract.methods.getBitmapForInterval, undefined, BaseWrapper_1.solidityBytesToString);
        /**
         * Calculates and sets the signature bitmap for the specified interval.
         * @param startBlock First block of the interval.
         * @param endBlock Last block of the interval.
         * @return The signature bitmap for the specified interval.
         * @dev startBlock and endBlock must be in the same epoch.
         */
        _this.setBitmapForInterval = BaseWrapper_1.proxySend(_this.kit, _this.contract.methods.setBitmapForInterval);
        /**
         * Shows if the user already called the `setBitmapForInterval` for
         * the specific interval.
         * @param startBlock First block of a calculated downtime interval.
         * @param endBlock Last block of the calculated downtime interval.
         * @return True if the user already called the `setBitmapForInterval` for
         * the specific interval.
         */
        _this.isBitmapSetForInterval = BaseWrapper_1.proxyCall(_this.contract.methods.isBitmapSetForInterval);
        /**
         * Returns true if the validator did not sign any blocks for the specified overlapping or adjacent
         * intervals.
         * @param startBlocks A list of interval start blocks for which signature bitmaps have already
         * been set.
         * @param endBlocks A list of interval end blocks for which signature bitmaps have already
         * been set.
         * @param signerIndices Indices of the signer within the validator set for every epoch change.
         * @return True if the validator signature does not appear in any block within the window.
         */
        _this.wasDownForIntervals = BaseWrapper_1.proxyCall(_this.contract.methods.wasDownForIntervals);
        return _this;
    }
    /**
     * Returns current configuration parameters.
     */
    DowntimeSlasherWrapper.prototype.getConfig = function () {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all([this.slashableDowntime(), this.slashingIncentives()])];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, {
                                slashableDowntime: res[0],
                                slashingIncentives: res[1],
                            }];
                }
            });
        });
    };
    /**
     * Tests if the given validator or signer did not sign any blocks in the interval.
     * @param validatorOrSignerAddress Address of the validator account or signer.
     * @param startBlock First block of the interval.
     * @param endBlock Last block of the interval.
     */
    DowntimeSlasherWrapper.prototype.wasValidatorDownForInterval = function (validatorOrSignerAddress, startBlock, endBlock) {
        return __awaiter(this, void 0, void 0, function () {
            var startSignerIndex;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getValidatorSignerIndex(validatorOrSignerAddress, startBlock)];
                    case 1:
                        startSignerIndex = _a.sent();
                        return [2 /*return*/, this.wasDownForInterval(startBlock, endBlock, startSignerIndex)];
                }
            });
        });
    };
    /**
     * Returns true if the validator did not sign any blocks for the specified overlapping or adjacent
     * intervals.
     * @param validatorOrSignerAddress Address of the validator account or signer.
     * @param startBlocks A list of interval start blocks for which signature bitmaps have already
     * been set.
     * @param endBlocks A list of interval end blocks for which signature bitmaps have already
     * been set.
     * @return True if the validator signature does not appear in any block within the window.
     */
    DowntimeSlasherWrapper.prototype.wasValidatorDown = function (validatorOrSignerAddress, startBlocks, endBlocks) {
        return __awaiter(this, void 0, void 0, function () {
            var window, signerIndices, _a, _b, startEpoch, endEpoch, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        if (startBlocks.length === 0 || startBlocks.length !== endBlocks.length) {
                            throw new Error('StartBlocks and endBlocks arrays should have at least one element and have the same length');
                        }
                        return [4 /*yield*/, this.getSlashableDowntimeWindow(startBlocks[0], undefined)];
                    case 1:
                        window = _e.sent();
                        signerIndices = [];
                        _b = (_a = signerIndices).push;
                        return [4 /*yield*/, this.getValidatorSignerIndex(validatorOrSignerAddress, window.start)];
                    case 2:
                        _b.apply(_a, [_e.sent()]);
                        return [4 /*yield*/, this.kit.getEpochNumberOfBlock(window.start)];
                    case 3:
                        startEpoch = _e.sent();
                        return [4 /*yield*/, this.kit.getEpochNumberOfBlock(window.end)];
                    case 4:
                        endEpoch = _e.sent();
                        if (!(startEpoch < endEpoch)) return [3 /*break*/, 6];
                        _d = (_c = signerIndices).push;
                        return [4 /*yield*/, this.getValidatorSignerIndex(validatorOrSignerAddress, window.end)];
                    case 5:
                        _d.apply(_c, [_e.sent()]);
                        _e.label = 6;
                    case 6: return [2 /*return*/, this.wasDownForIntervals(startBlocks, endBlocks, signerIndices)];
                }
            });
        });
    };
    /**
     * Determines the validator signer given an account or signer address and block number.
     * @param validatorOrSignerAddress Address of the validator account or signer.
     * @param blockNumber Block at which to determine the signer index.
     */
    DowntimeSlasherWrapper.prototype.getValidatorSignerIndex = function (validatorOrSignerAddress, blockNumber) {
        return __awaiter(this, void 0, void 0, function () {
            var accounts, validators, isAccount, signer, _a, election, index, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0: return [4 /*yield*/, this.kit.contracts.getAccounts()];
                    case 1:
                        accounts = _d.sent();
                        return [4 /*yield*/, this.kit.contracts.getValidators()];
                    case 2:
                        validators = _d.sent();
                        return [4 /*yield*/, accounts.isAccount(validatorOrSignerAddress)];
                    case 3:
                        isAccount = _d.sent();
                        if (!isAccount) return [3 /*break*/, 5];
                        return [4 /*yield*/, validators.getValidator(validatorOrSignerAddress, blockNumber)];
                    case 4:
                        _a = (_d.sent()).signer;
                        return [3 /*break*/, 6];
                    case 5:
                        _a = validatorOrSignerAddress;
                        _d.label = 6;
                    case 6:
                        signer = _a;
                        return [4 /*yield*/, this.kit.contracts.getElection()];
                    case 7:
                        election = _d.sent();
                        _b = address_1.findAddressIndex;
                        _c = [signer];
                        return [4 /*yield*/, election.getValidatorSigners(blockNumber)];
                    case 8:
                        index = _b.apply(void 0, _c.concat([_d.sent()]));
                        if (index < 0) {
                            throw new Error("Validator signer " + signer + " was not elected at block " + blockNumber);
                        }
                        return [2 /*return*/, index];
                }
            });
        });
    };
    /**
     * Returns true if the validator did not sign any blocks for the specified overlapping or adjacent
     * intervals.
     * @param validatorOrSignerAddress Address of the validator account or signer.
     * @param startBlocks A list of interval start blocks for which signature bitmaps have already
     * been set.
     * @param endBlocks A list of interval end blocks for which signature bitmaps have already
     * been set.
     */
    DowntimeSlasherWrapper.prototype.slashValidator = function (validatorOrSignerAddress, startBlocks, endBlocks) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (startBlocks.length === 0 || startBlocks.length !== endBlocks.length) {
                            throw new Error('StartBlocks and endBlocks arrays should have at least one element and have the same length');
                        }
                        _a = this.slashStartSignerIndex;
                        return [4 /*yield*/, this.getValidatorSignerIndex(validatorOrSignerAddress, startBlocks[0])];
                    case 1: return [2 /*return*/, _a.apply(this, [_b.sent(), startBlocks,
                            endBlocks])];
                }
            });
        });
    };
    /**
     * Returns true if the validator did not sign any blocks for the specified overlapping or adjacent
     * intervals.
     * @param startSignerIndex Validator index at the first block.
     * @param startBlocks A list of interval start blocks for which signature bitmaps have already
     * been set.
     * @param endBlocks A list of interval end blocks for which signature bitmaps have already
     * been set.
     */
    DowntimeSlasherWrapper.prototype.slashStartSignerIndex = function (startSignerIndex, startBlocks, endBlocks) {
        return __awaiter(this, void 0, void 0, function () {
            var election, validators, signer, window, startEpoch, endEpoch, signerIndices, _a, _b, _c, _d, validator;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        if (startBlocks.length === 0 || startBlocks.length !== endBlocks.length) {
                            throw new Error('StartBlocks and endBlocks arrays should have at least one element and have the same length');
                        }
                        return [4 /*yield*/, this.kit.contracts.getElection()];
                    case 1:
                        election = _e.sent();
                        return [4 /*yield*/, this.kit.contracts.getValidators()];
                    case 2:
                        validators = _e.sent();
                        return [4 /*yield*/, election.validatorSignerAddressFromSet(startSignerIndex, startBlocks[0])];
                    case 3:
                        signer = _e.sent();
                        return [4 /*yield*/, this.getSlashableDowntimeWindow(startBlocks[0])];
                    case 4:
                        window = _e.sent();
                        return [4 /*yield*/, this.kit.getEpochNumberOfBlock(window.start)];
                    case 5:
                        startEpoch = _e.sent();
                        return [4 /*yield*/, this.kit.getEpochNumberOfBlock(window.end)];
                    case 6:
                        endEpoch = _e.sent();
                        signerIndices = [startSignerIndex];
                        if (!(startEpoch < endEpoch)) return [3 /*break*/, 8];
                        _b = (_a = signerIndices).push;
                        _c = address_1.findAddressIndex;
                        _d = [signer];
                        return [4 /*yield*/, election.getValidatorSigners(window.end)];
                    case 7:
                        _b.apply(_a, [_c.apply(void 0, _d.concat([_e.sent()]))]);
                        _e.label = 8;
                    case 8: return [4 /*yield*/, validators.getValidatorFromSigner(signer)];
                    case 9:
                        validator = _e.sent();
                        return [2 /*return*/, this.slash(validator, window, startBlocks, endBlocks, signerIndices)];
                }
            });
        });
    };
    /**
     * Slash a Validator for downtime.
     * @param validator Validator to slash for downtime.
     * @param slashableWindow Window of the blocks to slash.
     * @param startBlocks A list of interval start blocks for which signature bitmaps have already
     * been set.
     * @param endBlocks A list of interval end blocks for which signature bitmaps have already
     * been set.
     * @param startSignerIndex Validator index at the first block.
     * @param endSignerIndex Validator index at the last block.
     */
    DowntimeSlasherWrapper.prototype.slash = function (validator, slashableWindow, startBlocks, endBlocks, signerIndices) {
        return __awaiter(this, void 0, void 0, function () {
            var incentives, validators, membership, lockedGold, slashValidator, slashGroup;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.slashingIncentives()];
                    case 1:
                        incentives = _a.sent();
                        return [4 /*yield*/, this.kit.contracts.getValidators()];
                    case 2:
                        validators = _a.sent();
                        return [4 /*yield*/, validators.getValidatorMembershipHistoryIndex(validator, slashableWindow.start)];
                    case 3:
                        membership = _a.sent();
                        return [4 /*yield*/, this.kit.contracts.getLockedGold()];
                    case 4:
                        lockedGold = _a.sent();
                        return [4 /*yield*/, lockedGold.computeInitialParametersForSlashing(validator.address, incentives.penalty)];
                    case 5:
                        slashValidator = _a.sent();
                        return [4 /*yield*/, lockedGold.computeParametersForSlashing(membership.group, incentives.penalty, slashValidator.list)];
                    case 6:
                        slashGroup = _a.sent();
                        return [2 /*return*/, BaseWrapper_1.toTransactionObject(this.kit, this.contract.methods.slash(startBlocks, endBlocks, signerIndices, membership.historyIndex, slashValidator.lessers, slashValidator.greaters, slashValidator.indices, slashGroup.lessers, slashGroup.greaters, slashGroup.indices))];
                }
            });
        });
    };
    /**
     * Calculate the slashable window with respect to a provided start or end block number.
     * @param startBlock First block of the downtime. Determined from endBlock if not provided.
     * @param endBlock Last block of the downtime. Determined from startBlock or grandparent of latest block if not provided.
     */
    DowntimeSlasherWrapper.prototype.getSlashableDowntimeWindow = function (startBlock, endBlock) {
        return __awaiter(this, void 0, void 0, function () {
            var length;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.slashableDowntime()];
                    case 1:
                        length = _a.sent();
                        return [2 /*return*/, this.getDowntimeWindow(length, startBlock, endBlock)];
                }
            });
        });
    };
    /**
     * Calculate the downtime window with respect to a length and a provided start or end block number.
     * @param length Window length.
     * @param startBlock First block of the Downtime window. Determined from endBlock if not provided.
     * @param endBlock Last block of the Downtime window. Determined from startBlock or grandparent of latest block if not provided.
     */
    DowntimeSlasherWrapper.prototype.getDowntimeWindow = function (length, startBlock, endBlock) {
        return __awaiter(this, void 0, void 0, function () {
            var latest;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (startBlock !== undefined && endBlock !== undefined) {
                            if (endBlock - startBlock + 1 !== length) {
                                throw new Error("Start and end block must define a window of " + length + " blocks");
                            }
                            return [2 /*return*/, {
                                    start: startBlock,
                                    end: endBlock,
                                    length: length,
                                }];
                        }
                        if (endBlock !== undefined) {
                            return [2 /*return*/, {
                                    start: endBlock - length + 1,
                                    end: endBlock,
                                    length: length,
                                }];
                        }
                        if (startBlock !== undefined) {
                            return [2 /*return*/, {
                                    start: startBlock,
                                    end: startBlock + length - 1,
                                    length: length,
                                }];
                        }
                        return [4 /*yield*/, this.kit.web3.eth.getBlockNumber()];
                    case 1:
                        latest = (_a.sent()) - 2;
                        return [2 /*return*/, {
                                start: latest - length + 1,
                                end: latest,
                                length: length,
                            }];
                }
            });
        });
    };
    return DowntimeSlasherWrapper;
}(BaseWrapper_1.BaseWrapper));
exports.DowntimeSlasherWrapper = DowntimeSlasherWrapper;
//# sourceMappingURL=DowntimeSlasher.js.map