import BigNumber from 'bignumber.js';
import { Address } from '../base';
import { DowntimeSlasher } from '../generated/DowntimeSlasher';
import { BaseWrapper, CeloTransactionObject } from './BaseWrapper';
export interface DowntimeSlasherConfig {
    slashableDowntime: number;
    slashingIncentives: {
        reward: BigNumber;
        penalty: BigNumber;
    };
}
export interface DowntimeWindow {
    start: number;
    end: number;
    length: number;
}
/**
 * Contract handling slashing for Validator downtime using intervals.
 */
export declare class DowntimeSlasherWrapper extends BaseWrapper<DowntimeSlasher> {
    /**
     * Returns slashing incentives.
     * @return Rewards and penalties for slashing.
     */
    slashingIncentives: () => Promise<{
        reward: BigNumber;
        penalty: BigNumber;
    }>;
    /**
     * Returns slashable downtime in blocks.
     * @return The number of consecutive blocks before a Validator missing from IBFT consensus
     * can be slashed.
     */
    slashableDowntime: () => Promise<number>;
    /**
     * Returns current configuration parameters.
     */
    getConfig(): Promise<DowntimeSlasherConfig>;
    /**
     * Check if a validator appears down in the bitmap for the interval of blocks.
     * Both startBlock and endBlock should be part of the same epoch.
     * @param startBlock First block of the interval.
     * @param endBlock Last block of the interval.
     * @param signerIndex Index of the signer within the validator set.
     * @return True if the validator does not appear in the bitmap of the interval.
     */
    wasDownForInterval: (startBlock: string | number, endBlock: string | number, signerIndex: string | number) => Promise<boolean>;
    /**
     * Calculates and returns the signature bitmap for the specified interval.
     * Similar to the parentSealBitmap of every block (where you have which validators were
     * able to sign the previous block), this bitmap shows for that specific interval which
     * validators signed at least one block
     * @param startBlock First block of the interval.
     * @param endBlock Last block of the interval.
     * @return (string) The signature uptime bitmap for the specified interval.
     * @dev startBlock and endBlock must be in the same epoch.
     * @dev The getParentSealBitmap precompile requires that startBlock must be within 4 epochs of
     * the current block.
     */
    getBitmapForInterval: (startBlock: string | number, endBlock: string | number) => Promise<string>;
    /**
     * Calculates and sets the signature bitmap for the specified interval.
     * @param startBlock First block of the interval.
     * @param endBlock Last block of the interval.
     * @return The signature bitmap for the specified interval.
     * @dev startBlock and endBlock must be in the same epoch.
     */
    setBitmapForInterval: (startBlock: string | number, endBlock: string | number) => CeloTransactionObject<string>;
    /**
     * Shows if the user already called the `setBitmapForInterval` for
     * the specific interval.
     * @param startBlock First block of a calculated downtime interval.
     * @param endBlock Last block of the calculated downtime interval.
     * @return True if the user already called the `setBitmapForInterval` for
     * the specific interval.
     */
    isBitmapSetForInterval: (startBlock: string | number, endBlock: string | number) => Promise<boolean>;
    /**
     * Tests if the given validator or signer did not sign any blocks in the interval.
     * @param validatorOrSignerAddress Address of the validator account or signer.
     * @param startBlock First block of the interval.
     * @param endBlock Last block of the interval.
     */
    wasValidatorDownForInterval(validatorOrSignerAddress: Address, startBlock: number, endBlock: number): Promise<boolean>;
    /**
     * Returns true if the validator did not sign any blocks for the specified overlapping or adjacent
     * intervals.
     * @param startBlocks A list of interval start blocks for which signature bitmaps have already
     * been set.
     * @param endBlocks A list of interval end blocks for which signature bitmaps have already
     * been set.
     * @param signerIndices Indices of the signer within the validator set for every epoch change.
     * @return True if the validator signature does not appear in any block within the window.
     */
    wasDownForIntervals: (startBlocks: (string | number)[], endBlocks: (string | number)[], signerIndices: (string | number)[]) => Promise<boolean>;
    /**
     * Returns true if the validator did not sign any blocks for the specified overlapping or adjacent
     * intervals.
     * @param validatorOrSignerAddress Address of the validator account or signer.
     * @param startBlocks A list of interval start blocks for which signature bitmaps have already
     * been set.
     * @param endBlocks A list of interval end blocks for which signature bitmaps have already
     * been set.
     * @return True if the validator signature does not appear in any block within the window.
     */
    wasValidatorDown(validatorOrSignerAddress: Address, startBlocks: number[], endBlocks: number[]): Promise<boolean>;
    /**
     * Determines the validator signer given an account or signer address and block number.
     * @param validatorOrSignerAddress Address of the validator account or signer.
     * @param blockNumber Block at which to determine the signer index.
     */
    getValidatorSignerIndex(validatorOrSignerAddress: Address, blockNumber: number): Promise<number>;
    /**
     * Returns true if the validator did not sign any blocks for the specified overlapping or adjacent
     * intervals.
     * @param validatorOrSignerAddress Address of the validator account or signer.
     * @param startBlocks A list of interval start blocks for which signature bitmaps have already
     * been set.
     * @param endBlocks A list of interval end blocks for which signature bitmaps have already
     * been set.
     */
    slashValidator(validatorOrSignerAddress: Address, startBlocks: number[], endBlocks: number[]): Promise<CeloTransactionObject<void>>;
    /**
     * Returns true if the validator did not sign any blocks for the specified overlapping or adjacent
     * intervals.
     * @param startSignerIndex Validator index at the first block.
     * @param startBlocks A list of interval start blocks for which signature bitmaps have already
     * been set.
     * @param endBlocks A list of interval end blocks for which signature bitmaps have already
     * been set.
     */
    slashStartSignerIndex(startSignerIndex: number, startBlocks: number[], endBlocks: number[]): Promise<CeloTransactionObject<void>>;
    /**
     * Slash a Validator for downtime.
     * @param validator Validator to slash for downtime.
     * @param slashableWindow Window of the blocks to slash.
     * @param startBlocks A list of interval start blocks for which signature bitmaps have already
     * been set.
     * @param endBlocks A list of interval end blocks for which signature bitmaps have already
     * been set.
     * @param startSignerIndex Validator index at the first block.
     * @param endSignerIndex Validator index at the last block.
     */
    private slash;
    /**
     * Calculate the slashable window with respect to a provided start or end block number.
     * @param startBlock First block of the downtime. Determined from endBlock if not provided.
     * @param endBlock Last block of the downtime. Determined from startBlock or grandparent of latest block if not provided.
     */
    private getSlashableDowntimeWindow;
    /**
     * Calculate the downtime window with respect to a length and a provided start or end block number.
     * @param length Window length.
     * @param startBlock First block of the Downtime window. Determined from endBlock if not provided.
     * @param endBlock Last block of the Downtime window. Determined from startBlock or grandparent of latest block if not provided.
     */
    private getDowntimeWindow;
}
