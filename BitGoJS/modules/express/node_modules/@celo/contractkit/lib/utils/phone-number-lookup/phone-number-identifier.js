"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSaltFromThresholdSignature = exports.getPhoneNumberIdentifier = void 0;
var phoneNumbers_1 = require("@celo/utils/lib/phoneNumbers");
var crypto_1 = require("crypto");
var debug_1 = __importDefault(require("debug"));
var bls_blinding_client_1 = require("./bls-blinding-client");
var phone_number_lookup_1 = require("./phone-number-lookup");
var debug = debug_1.default('kit:phone-number-lookup:phone-number-identifier');
var SALT_CHAR_LENGTH = 13;
var SIGN_MESSAGE_ENDPOINT = '/getDistributedBlindedSalt';
/**
 * Retrieve the on-chain identifier for the provided phone number
 */
function getPhoneNumberIdentifier(e164Number, account, signer, context, selfPhoneHash, clientVersion, blsBlindingClient) {
    return __awaiter(this, void 0, void 0, function () {
        var base64PhoneNumber, base64BlindedMessage, body, response, base64BlindSig, base64UnblindedSig, sigBuf, salt, phoneHash;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    debug('Getting phone number salt');
                    if (!phoneNumbers_1.isE164Number(e164Number)) {
                        throw new Error("Invalid phone number: " + e164Number);
                    }
                    // Fallback to using Wasm version if not specified
                    if (!blsBlindingClient) {
                        debug('No BLSBlindingClient found, using WasmBlsBlindingClient');
                        blsBlindingClient = new bls_blinding_client_1.WasmBlsBlindingClient(context.pgpnpPubKey);
                    }
                    debug('Retrieving blinded message');
                    base64PhoneNumber = Buffer.from(e164Number).toString('base64');
                    return [4 /*yield*/, blsBlindingClient.blindMessage(base64PhoneNumber)];
                case 1:
                    base64BlindedMessage = _a.sent();
                    body = {
                        account: account,
                        blindedQueryPhoneNumber: base64BlindedMessage,
                        hashedPhoneNumber: selfPhoneHash,
                        version: clientVersion ? clientVersion : 'unknown',
                        authenticationMethod: signer.authenticationMethod,
                    };
                    return [4 /*yield*/, phone_number_lookup_1.postToPhoneNumPrivacyService(signer, body, context, SIGN_MESSAGE_ENDPOINT)];
                case 2:
                    response = _a.sent();
                    base64BlindSig = response.combinedSignature;
                    debug('Retrieving unblinded signature');
                    return [4 /*yield*/, blsBlindingClient.unblindAndVerifyMessage(base64BlindSig)];
                case 3:
                    base64UnblindedSig = _a.sent();
                    sigBuf = Buffer.from(base64UnblindedSig, 'base64');
                    debug('Converting sig to salt');
                    salt = getSaltFromThresholdSignature(sigBuf);
                    phoneHash = phoneNumbers_1.getPhoneHash(e164Number, salt);
                    return [2 /*return*/, { e164Number: e164Number, phoneHash: phoneHash, salt: salt }];
            }
        });
    });
}
exports.getPhoneNumberIdentifier = getPhoneNumberIdentifier;
// This is the algorithm that creates a salt from the unblinded message signatures
// It simply hashes it with sha256 and encodes it to hex
// If we ever need to compute salts anywhere other than here then we should move this to the utils package
function getSaltFromThresholdSignature(sigBuf) {
    // Currently uses 13 chars for a 78 bit salt
    return crypto_1.createHash('sha256')
        .update(sigBuf)
        .digest('base64')
        .slice(0, SALT_CHAR_LENGTH);
}
exports.getSaltFromThresholdSignature = getSaltFromThresholdSignature;
//# sourceMappingURL=phone-number-identifier.js.map