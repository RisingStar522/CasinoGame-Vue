import { ContractKit } from '../../kit';
export interface WalletKeySigner {
    authenticationMethod: AuthenticationMethod.WALLETKEY;
    contractKit: ContractKit;
}
export interface EncryptionKeySigner {
    authenticationMethod: AuthenticationMethod.ENCRYPTIONKEY;
    rawKey: string;
}
export declare type AuthSigner = WalletKeySigner | EncryptionKeySigner;
export declare enum AuthenticationMethod {
    WALLETKEY = "wallet_key",
    ENCRYPTIONKEY = "encryption_key"
}
export interface PhoneNumberPrivacyRequest {
    account: string;
    version: string;
    authenticationMethod: AuthenticationMethod;
}
export interface SignMessageRequest extends PhoneNumberPrivacyRequest {
    blindedQueryPhoneNumber: string;
    hashedPhoneNumber?: string;
}
export interface MatchmakingRequest extends PhoneNumberPrivacyRequest {
    userPhoneNumber: string;
    contactPhoneNumbers: string[];
    hashedPhoneNumber: string;
}
export interface SignMessageResponse {
    success: boolean;
    combinedSignature: string;
}
export interface MatchmakingResponse {
    success: boolean;
    matchedContacts: Array<{
        phoneNumber: string;
    }>;
}
export declare enum ErrorMessages {
    PGPNP_QUOTA_ERROR = "pgpnpQuotaError"
}
export interface ServiceContext {
    pgpnpUrl: string;
    pgpnpPubKey: string;
}
/**
 * Make a request to lookup the phone number identifier or perform matchmaking
 * @param signer type of key to sign with
 * @param body request body
 * @param context contains service URL
 * @param endpoint endpoint to hit
 */
export declare function postToPhoneNumPrivacyService<ResponseType>(signer: AuthSigner, body: PhoneNumberPrivacyRequest, context: ServiceContext, endpoint: string): Promise<ResponseType>;
