"use strict";
// Utilities for interacting with the Phone Number Privacy Service service (aka PGPNP)
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.postToPhoneNumPrivacyService = exports.ErrorMessages = exports.AuthenticationMethod = void 0;
var address_1 = require("@celo/utils/lib/address");
var debug_1 = __importDefault(require("debug"));
var elliptic_1 = require("elliptic");
var debug = debug_1.default('kit:phone-number-lookup:phone-number-lookup');
var ec = new elliptic_1.ec('secp256k1');
var AuthenticationMethod;
(function (AuthenticationMethod) {
    AuthenticationMethod["WALLETKEY"] = "wallet_key";
    AuthenticationMethod["ENCRYPTIONKEY"] = "encryption_key";
})(AuthenticationMethod = exports.AuthenticationMethod || (exports.AuthenticationMethod = {}));
var ErrorMessages;
(function (ErrorMessages) {
    ErrorMessages["PGPNP_QUOTA_ERROR"] = "pgpnpQuotaError";
})(ErrorMessages = exports.ErrorMessages || (exports.ErrorMessages = {}));
/**
 * Make a request to lookup the phone number identifier or perform matchmaking
 * @param signer type of key to sign with
 * @param body request body
 * @param context contains service URL
 * @param endpoint endpoint to hit
 */
function postToPhoneNumPrivacyService(signer, body, context, endpoint) {
    return __awaiter(this, void 0, void 0, function () {
        var bodyString, authHeader, key, dek, pubkey, validSignature, pgpnpUrl, res, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    debug("Posting to " + endpoint);
                    bodyString = JSON.stringify(body);
                    authHeader = '';
                    if (!(signer.authenticationMethod === AuthenticationMethod.ENCRYPTIONKEY)) return [3 /*break*/, 1];
                    key = ec.keyFromPrivate(address_1.hexToBuffer(signer.rawKey));
                    authHeader = JSON.stringify(key.sign(bodyString).toDER());
                    dek = key.getPublic(true, 'hex');
                    pubkey = ec.keyFromPublic(address_1.trimLeading0x(dek), 'hex');
                    validSignature = pubkey.verify(bodyString, JSON.parse(authHeader));
                    debug("Signature is valid: " + validSignature + " signed by " + dek);
                    return [3 /*break*/, 3];
                case 1: return [4 /*yield*/, signer.contractKit.web3.eth.sign(bodyString, body.account)];
                case 2:
                    authHeader = _a.sent();
                    _a.label = 3;
                case 3:
                    pgpnpUrl = context.pgpnpUrl;
                    return [4 /*yield*/, fetch(pgpnpUrl + endpoint, {
                            method: 'POST',
                            headers: {
                                Accept: 'application/json',
                                'Content-Type': 'application/json',
                                Authorization: authHeader,
                            },
                            body: bodyString,
                        })];
                case 4:
                    res = _a.sent();
                    if (!res.ok) {
                        debug("Response not okay. Status " + res.status);
                        switch (res.status) {
                            case 403:
                                throw new Error(ErrorMessages.PGPNP_QUOTA_ERROR);
                            default:
                                throw new Error("Unknown failure " + res.status);
                        }
                    }
                    debug('Response ok. Parsing.');
                    return [4 /*yield*/, res.json()];
                case 5:
                    response = _a.sent();
                    return [2 /*return*/, response];
            }
        });
    });
}
exports.postToPhoneNumPrivacyService = postToPhoneNumPrivacyService;
//# sourceMappingURL=phone-number-lookup.js.map