"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.obfuscateNumberForMatchmaking = exports.getContactMatches = void 0;
var crypto_1 = __importDefault(require("crypto"));
var debug_1 = __importDefault(require("debug"));
var phone_number_lookup_1 = require("./phone-number-lookup");
var debug = debug_1.default('kit:phone-number-lookup:matchmaking');
var MATCHMAKING_ENDPOINT = '/getContactMatches';
// Eventually, the matchmaking process will use blinded numbers same as salt lookups
// But for now numbers are simply hashed using this static salt
var SALT = '__celo__';
// Uses the phone number privacy service to find mutual matches between Celo users
function getContactMatches(e164NumberCaller, e164NumberContacts, account, signer, context, clientVersion) {
    return __awaiter(this, void 0, void 0, function () {
        var selfPhoneNumObfuscated, obfucsatedNumToE164Number, body, response, matchHashes;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    selfPhoneNumObfuscated = obfuscateNumberForMatchmaking(e164NumberCaller);
                    obfucsatedNumToE164Number = getContactNumsObfuscated(e164NumberContacts);
                    body = {
                        account: account,
                        userPhoneNumber: selfPhoneNumObfuscated,
                        contactPhoneNumbers: Object.keys(obfucsatedNumToE164Number),
                        hashedPhoneNumber: selfPhoneNumObfuscated,
                        version: clientVersion ? clientVersion : 'unknown',
                        authenticationMethod: signer.authenticationMethod,
                    };
                    return [4 /*yield*/, phone_number_lookup_1.postToPhoneNumPrivacyService(signer, body, context, MATCHMAKING_ENDPOINT)];
                case 1:
                    response = _a.sent();
                    matchHashes = response.matchedContacts.map(function (match) { return match.phoneNumber; });
                    if (!matchHashes || !matchHashes.length) {
                        debug('No matches found');
                        return [2 /*return*/, []];
                    }
                    return [2 /*return*/, getMatchedContacts(obfucsatedNumToE164Number, matchHashes)];
            }
        });
    });
}
exports.getContactMatches = getContactMatches;
function getContactNumsObfuscated(e164NumberMatches) {
    var hashes = {};
    for (var _i = 0, e164NumberMatches_1 = e164NumberMatches; _i < e164NumberMatches_1.length; _i++) {
        var e164Number = e164NumberMatches_1[_i];
        // TODO For large contact lists, would be faster to these hashes
        // in a native module.
        var hash = obfuscateNumberForMatchmaking(e164Number);
        hashes[hash] = e164Number;
    }
    return hashes;
}
// Hashes the phone number using a static salt
// This is different than the phone + unique salt hashing that
// we use for numbers getting verified and going on chain
// Matchmaking doesn't support per-number salts yet
function obfuscateNumberForMatchmaking(e164Number) {
    return crypto_1.default
        .createHash('sha256')
        .update(e164Number + SALT)
        .digest('base64');
}
exports.obfuscateNumberForMatchmaking = obfuscateNumberForMatchmaking;
/**
 * Constructs a mapping between contact's phone numbers and
 * their on-chain identifier
 * @param obfucsatedNumToE164Number map of obfuscated number to original number
 * @param matchHashes list of obfuscated numbers that are matched
 */
function getMatchedContacts(obfucsatedNumToE164Number, matchHashes) {
    var matches = [];
    for (var _i = 0, matchHashes_1 = matchHashes; _i < matchHashes_1.length; _i++) {
        var match = matchHashes_1[_i];
        var e164Number = obfucsatedNumToE164Number[match];
        if (!e164Number) {
            throw new Error('Number missing in hash map, should never happen');
        }
        matches.push(e164Number);
    }
    return matches;
}
//# sourceMappingURL=matchmaking.js.map