"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var account_lib_1 = require("@bitgo/account-lib");
var Bluebird = require("bluebird");
var bitcoinMessage = require("bitcoinjs-message");
var bitgoUtxoLib = require("@bitgo/utxo-lib");
var crypto_1 = require("crypto");
var baseCoin_1 = require("../baseCoin");
var errors_1 = require("../../errors");
var bignumber_js_1 = require("bignumber.js");
var AbstractEthLikeCoin = /** @class */ (function (_super) {
    __extends(AbstractEthLikeCoin, _super);
    function AbstractEthLikeCoin(bitgo, staticsCoin) {
        var _this = _super.call(this, bitgo) || this;
        if (!staticsCoin) {
            throw new Error('missing required constructor parameter staticsCoin');
        }
        _this._staticsCoin = staticsCoin;
        return _this;
    }
    AbstractEthLikeCoin.prototype.getChain = function () {
        return this._staticsCoin.name;
    };
    AbstractEthLikeCoin.prototype.getFamily = function () {
        return this._staticsCoin.family;
    };
    AbstractEthLikeCoin.prototype.getFullName = function () {
        return this._staticsCoin.fullName;
    };
    AbstractEthLikeCoin.prototype.getBaseFactor = function () {
        return Math.pow(10, this._staticsCoin.decimalPlaces);
    };
    AbstractEthLikeCoin.prototype.valuelessTransferAllowed = function () {
        return true;
    };
    AbstractEthLikeCoin.prototype.isValidAddress = function (address) {
        if (!address) {
            return false;
        }
        return account_lib_1.Eth.Utils.isValidEthAddress(address);
    };
    AbstractEthLikeCoin.prototype.generateKeyPair = function (seed) {
        if (!seed) {
            seed = crypto_1.randomBytes(512 / 8);
        }
        var extendedKey = bitgoUtxoLib.HDNode.fromSeedBuffer(seed);
        var xpub = extendedKey.neutered().toBase58();
        return {
            pub: xpub,
            prv: extendedKey.toBase58(),
        };
    };
    AbstractEthLikeCoin.prototype.parseTransaction = function (params, callback) {
        return Bluebird.resolve({}).asCallback(callback);
    };
    AbstractEthLikeCoin.prototype.verifyAddress = function (_a) {
        var address = _a.address;
        if (!this.isValidAddress(address)) {
            throw new errors_1.InvalidAddressError("invalid address: " + address);
        }
        return true;
    };
    AbstractEthLikeCoin.prototype.verifyTransaction = function (params, callback) {
        return Bluebird.resolve(true).asCallback(callback);
    };
    AbstractEthLikeCoin.prototype.signTransaction = function (params, callback) {
        return __awaiter(this, void 0, Bluebird, function () {
            var txBuilder, transaction, recipients;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        txBuilder = this.getTransactionBuilder();
                        txBuilder.from(params.txPrebuild.txHex);
                        txBuilder.transfer().key(new account_lib_1.Eth.KeyPair({ prv: params.prv }).getKeys().prv);
                        return [4 /*yield*/, txBuilder.build()];
                    case 1:
                        transaction = _a.sent();
                        recipients = transaction.outputs.map(function (output) { return ({ address: output.address, amount: output.value }); });
                        return [2 /*return*/, {
                                halfSigned: {
                                    txHex: transaction.toBroadcastFormat(),
                                    recipients: recipients,
                                    expiration: params.txPrebuild.expireTime,
                                },
                            }];
                }
            });
        });
    };
    AbstractEthLikeCoin.prototype.signMessage = function (key, message, callback) {
        return __awaiter(this, void 0, Bluebird, function () {
            var privateKey, privateKeyBuffer, isCompressed, prefix;
            return __generator(this, function (_a) {
                privateKey = bitgoUtxoLib.HDNode.fromBase58(key.prv).getKey();
                privateKeyBuffer = privateKey.d.toBuffer(32);
                isCompressed = privateKey.compressed;
                prefix = bitgoUtxoLib.networks.bitcoin.messagePrefix;
                return [2 /*return*/, bitcoinMessage.sign(message, privateKeyBuffer, isCompressed, prefix)];
            });
        });
    };
    AbstractEthLikeCoin.prototype.isValidPub = function (pub) {
        var valid = true;
        try {
            new account_lib_1.Eth.KeyPair({ pub: pub });
        }
        catch (e) {
            valid = false;
        }
        return valid;
    };
    /**
     * Builds a funds recovery transaction without BitGo.
     * We need to do three queries during this:
     * 1) Node query - how much money is in the account
     * 2) Build transaction - build our transaction for the amount
     * 3) Send signed build - send our signed build to a public node
     * @param params The options with which to recover
     * @param callback Callback for the result of this operation
     */
    AbstractEthLikeCoin.prototype.recover = function (params, callback) {
        throw new errors_1.MethodNotImplementedError();
    };
    /**
     * Explain a transaction from txHex
     * @param params The options with which to explain the transaction
     * @param callback Callback for the result of this operation
     */
    AbstractEthLikeCoin.prototype.explainTransaction = function (params, callback) {
        return __awaiter(this, void 0, Bluebird, function () {
            var txHex, txBuilder, tx, outputs, displayOrder;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        txHex = params.txHex || (params.halfSigned && params.halfSigned.txHex);
                        if (!txHex || !params.feeInfo) {
                            throw new Error('missing explain tx parameters');
                        }
                        txBuilder = this.getTransactionBuilder();
                        txBuilder.from(txHex);
                        return [4 /*yield*/, txBuilder.build()];
                    case 1:
                        tx = _a.sent();
                        outputs = tx.outputs.map(function (output) {
                            return {
                                address: output.address,
                                amount: output.value,
                            };
                        });
                        displayOrder = ['id', 'outputAmount', 'changeAmount', 'outputs', 'changeOutputs', 'fee'];
                        return [2 /*return*/, {
                                displayOrder: displayOrder,
                                id: tx.id,
                                outputs: outputs,
                                outputAmount: outputs
                                    .reduce(function (accumulator, output) { return accumulator.plus(output.amount); }, new bignumber_js_1.default('0'))
                                    .toFixed(0),
                                changeOutputs: [],
                                changeAmount: '0',
                                fee: params.feeInfo,
                            }];
                }
            });
        });
    };
    /**
     * Create a new transaction builder for the current chain
     * @return a new transaction builder
     */
    AbstractEthLikeCoin.prototype.getTransactionBuilder = function () {
        return account_lib_1.getBuilder(this.getChain());
    };
    return AbstractEthLikeCoin;
}(baseCoin_1.BaseCoin));
exports.AbstractEthLikeCoin = AbstractEthLikeCoin;
//# sourceMappingURL=data:application/json;base64,