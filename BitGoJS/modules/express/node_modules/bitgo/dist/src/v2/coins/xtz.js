"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @prettier
 */
var Bluebird = require("bluebird");
var co = Bluebird.coroutine;
var bitgoAccountLib = require("@bitgo/account-lib");
var baseCoin_1 = require("../baseCoin");
var bignumber_js_1 = require("bignumber.js");
var errors_1 = require("../../errors");
var Xtz = /** @class */ (function (_super) {
    __extends(Xtz, _super);
    function Xtz(bitgo, staticsCoin) {
        var _this = _super.call(this, bitgo) || this;
        if (!staticsCoin) {
            throw new Error('missing required constructor parameter staticsCoin');
        }
        _this._staticsCoin = staticsCoin;
        return _this;
    }
    Xtz.prototype.getChain = function () {
        return this._staticsCoin.name;
    };
    Xtz.prototype.getFamily = function () {
        return this._staticsCoin.family;
    };
    Xtz.prototype.getFullName = function () {
        return this._staticsCoin.fullName;
    };
    Xtz.prototype.getBaseFactor = function () {
        return Math.pow(10, this._staticsCoin.decimalPlaces);
    };
    Xtz.createInstance = function (bitgo, staticsCoin) {
        return new Xtz(bitgo, staticsCoin);
    };
    /**
     * Flag for sending value of 0
     * @returns {boolean} True if okay to send 0 value, false otherwise
     */
    Xtz.prototype.valuelessTransferAllowed = function () {
        return true;
    };
    /**
     * Checks if this is a valid base58 or hex address
     * @param address
     */
    Xtz.prototype.isValidAddress = function (address) {
        if (!address) {
            return false;
        }
        return bitgoAccountLib.Xtz.Utils.isValidAddress(address);
    };
    /**
     * Generate Tezos key pair - BitGo xpub format
     *
     * @param seed
     * @returns {Object} object with generated xpub, xprv
     */
    Xtz.prototype.generateKeyPair = function (seed) {
        var keyPair = seed ? new bitgoAccountLib.Xtz.KeyPair({ seed: seed }) : new bitgoAccountLib.Xtz.KeyPair();
        var keys = keyPair.getExtendedKeys();
        if (!keys.xprv) {
            throw new Error('Missing xprv in key generation.');
        }
        return {
            pub: keys.xpub,
            prv: keys.xprv,
        };
    };
    Xtz.prototype.parseTransaction = function (params, callback) {
        return Bluebird.resolve({}).asCallback(callback);
    };
    Xtz.prototype.verifyAddress = function (params) {
        return true;
    };
    Xtz.prototype.verifyTransaction = function (params, callback) {
        return Bluebird.resolve(true).asCallback(callback);
    };
    /**
     * Assemble keychain and half-sign prebuilt transaction
     *
     * @param params
     * @param params.txPrebuild {Object} prebuild object returned by platform
     * @param params.prv {String} user prv
     * @param params.wallet.addressVersion {String} this is the version of the Algorand multisig address generation format
     * @param callback
     * @returns Bluebird<SignedTransaction>
     */
    Xtz.prototype.signTransaction = function (params, callback) {
        var self = this;
        return co(function () {
            var txBuilder, transaction, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        txBuilder = bitgoAccountLib.getBuilder(self.getChain());
                        txBuilder.from(params.txPrebuild.txHex);
                        txBuilder.source(params.txPrebuild.source);
                        if (params.txPrebuild.dataToSign) {
                            txBuilder.overrideDataToSign({ dataToSign: params.txPrebuild.dataToSign });
                        }
                        txBuilder.sign({ key: params.prv });
                        return [4 /*yield*/, txBuilder.build()];
                    case 1:
                        transaction = _a.sent();
                        if (!transaction) {
                            throw new Error('Invalid messaged passed to signMessage');
                        }
                        response = {
                            txHex: transaction.toBroadcastFormat(),
                        };
                        return [2 /*return*/, transaction.signature.length >= 2 ? response : { halfSigned: response }];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Sign message with private key
     *
     * @param key
     * @param message
     */
    Xtz.prototype.signMessage = function (key, message, callback) {
        return co(function cosignMessage() {
            var keyPair, messageHex, signatureData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        keyPair = new bitgoAccountLib.Xtz.KeyPair({ prv: key.prv });
                        messageHex = message instanceof Buffer ? message.toString('hex') : Buffer.from(message).toString('hex');
                        return [4 /*yield*/, bitgoAccountLib.Xtz.Utils.sign(keyPair, messageHex)];
                    case 1:
                        signatureData = _a.sent();
                        return [2 /*return*/, Buffer.from(signatureData.sig).toString('hex')];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Builds a funds recovery transaction without BitGo.
     * We need to do three queries during this:
     * 1) Node query - how much money is in the account
     * 2) Build transaction - build our transaction for the amount
     * 3) Send signed build - send our signed build to a public node
     * @param params
     * @param callback
     */
    Xtz.prototype.recover = function (params, callback) {
        throw new errors_1.MethodNotImplementedError();
    };
    /**
     * Explain a Tezos transaction from txHex
     * @param params
     * @param callback
     */
    Xtz.prototype.explainTransaction = function (params, callback) {
        var self = this;
        return co(function () {
            var txHex, txBuilder, tx, displayOrder;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        txHex = params.txHex || (params.halfSigned && params.halfSigned.txHex);
                        if (!txHex || !params.feeInfo) {
                            throw new Error('missing explain tx parameters');
                        }
                        txBuilder = bitgoAccountLib.getBuilder(self.getChain());
                        // Newer coins can return BaseTransactionBuilderFactory instead of BaseTransactionBuilder
                        if (!(txBuilder instanceof bitgoAccountLib.BaseCoin.BaseTransactionBuilder)) {
                            throw new Error('getBuilder() did not return an BaseTransactionBuilder object. Has it been updated?');
                        }
                        txBuilder.from(txHex);
                        return [4 /*yield*/, txBuilder.build()];
                    case 1:
                        tx = _a.sent();
                        displayOrder = ['id', 'outputAmount', 'changeAmount', 'outputs', 'changeOutputs', 'fee'];
                        return [2 /*return*/, {
                                displayOrder: displayOrder,
                                id: tx.id,
                                outputs: tx.outputs,
                                outputAmount: tx.outputs
                                    .reduce(function (accumulator, output) { return accumulator.plus(output.value); }, new bignumber_js_1.default('0'))
                                    .toFixed(0),
                                changeOutputs: [],
                                changeAmount: '0',
                                fee: params.feeInfo,
                            }];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    Xtz.prototype.isValidPub = function (pub) {
        return bitgoAccountLib.Xtz.Utils.isValidPublicKey(pub);
    };
    return Xtz;
}(baseCoin_1.BaseCoin));
exports.Xtz = Xtz;
//# sourceMappingURL=data:application/json;base64,