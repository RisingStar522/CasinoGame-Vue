"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @prettier
 */
var Bluebird = require("bluebird");
var statics_1 = require("@bitgo/statics");
var co = Bluebird.coroutine;
var bitgoAccountLib = require("@bitgo/account-lib");
var baseCoin_1 = require("../baseCoin");
var errors_1 = require("../../errors");
var stellar = require("stellar-sdk");
var seedValidator_1 = require("../internal/seedValidator");
var Hbar = /** @class */ (function (_super) {
    __extends(Hbar, _super);
    function Hbar(bitgo, staticsCoin) {
        var _this = _super.call(this, bitgo) || this;
        if (!staticsCoin) {
            throw new Error('missing required constructor parameter staticsCoin');
        }
        _this._staticsCoin = staticsCoin;
        return _this;
    }
    Hbar.prototype.getChain = function () {
        return this._staticsCoin.name;
    };
    Hbar.prototype.getFamily = function () {
        return this._staticsCoin.family;
    };
    Hbar.prototype.getFullName = function () {
        return this._staticsCoin.fullName;
    };
    Hbar.prototype.getBaseFactor = function () {
        return Math.pow(10, this._staticsCoin.decimalPlaces);
    };
    Hbar.createInstance = function (bitgo, staticsCoin) {
        return new Hbar(bitgo, staticsCoin);
    };
    /**
     * Flag for sending value of 0
     * @returns {boolean} True if okay to send 0 value, false otherwise
     */
    Hbar.prototype.valuelessTransferAllowed = function () {
        return false;
    };
    /**
     * Checks if this is a valid base58 or hex address
     * @param address
     */
    Hbar.prototype.isValidAddress = function (address) {
        try {
            var addressDetails = this.getAddressDetails(address);
            if (typeof addressDetails.memoId === 'undefined' || addressDetails.memoId === '') {
                // we want addresses to normalize without a memoId
                address = address.replace('?memoId=', '');
            }
            return address === this.normalizeAddress(addressDetails);
        }
        catch (e) {
            return false;
        }
    };
    /**
     * Generate Hedera Hashgraph key pair
     *
     * @param seed
     * @returns {Object} object with generated pub, prv
     */
    Hbar.prototype.generateKeyPair = function (seed) {
        var keyPair = seed ? new bitgoAccountLib.Hbar.KeyPair({ seed: seed }) : new bitgoAccountLib.Hbar.KeyPair();
        var keys = keyPair.getKeys();
        if (!keys.prv) {
            throw new Error('Keypair generation failed to generate a prv');
        }
        return {
            pub: keys.pub,
            prv: keys.prv,
        };
    };
    Hbar.prototype.parseTransaction = function (params, callback) {
        return Bluebird.resolve({}).asCallback(callback);
    };
    Hbar.prototype.verifyAddress = function (params) {
        return true;
    };
    Hbar.prototype.verifyTransaction = function (params, callback) {
        return Bluebird.resolve(true).asCallback(callback);
    };
    /**
     * Assemble keychain and half-sign prebuilt transaction
     *
     * @param params
     * @param params.txPrebuild {Object} prebuild object returned by platform
     * @param params.prv {String} user prv
     * @param params.wallet.addressVersion {String} this is the version of the Algorand multisig address generation format
     * @param callback
     * @returns Bluebird<SignedTransaction>
     */
    Hbar.prototype.signTransaction = function (params, callback) {
        var self = this;
        return co(function () {
            var factory, txBuilder, transaction, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        factory = bitgoAccountLib.register(self.getChain(), bitgoAccountLib.Hbar.TransactionBuilderFactory);
                        txBuilder = factory.from(params.txPrebuild.txHex);
                        txBuilder.sign({ key: params.prv });
                        return [4 /*yield*/, txBuilder.build()];
                    case 1:
                        transaction = _a.sent();
                        if (!transaction) {
                            throw new Error('Invalid messaged passed to signMessage');
                        }
                        response = {
                            txHex: transaction.toBroadcastFormat(),
                        };
                        return [2 /*return*/, transaction.signature.length >= 2 ? response : { halfSigned: response }];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Sign message with private key
     *
     * @param key
     * @param message
     * @return {Buffer} A signature over the given message using the given key
     */
    Hbar.prototype.signMessage = function (key, message, callback) {
        return co(function cosignMessage() {
            var msg;
            return __generator(this, function (_a) {
                msg = Buffer.isBuffer(message) ? message.toString('utf8') : message;
                // reconstitute keys and sign
                return [2 /*return*/, new bitgoAccountLib.Hbar.KeyPair({ prv: key.prv }).signMessage(msg)];
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Builds a funds recovery transaction without BitGo.
     * We need to do three queries during this:
     * 1) Node query - how much money is in the account
     * 2) Build transaction - build our transaction for the amount
     * 3) Send signed build - send our signed build to a public node
     * @param params
     * @param callback
     */
    Hbar.prototype.recover = function (params, callback) {
        throw new errors_1.MethodNotImplementedError();
    };
    /**
     * Explain a Hedera transaction from txHex
     * @param params
     * @param callback
     */
    Hbar.prototype.explainTransaction = function (params, callback) {
        var self = this;
        return co(function () {
            var txHex, factory, txBuilder, tx, txJson, displayOrder, memo, outputs, explanationResult;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        txHex = params.txHex || (params.halfSigned && params.halfSigned.txHex);
                        if (!txHex) {
                            throw new Error('missing explain tx parameters');
                        }
                        if (!params.feeInfo) {
                            throw new Error('missing fee information');
                        }
                        factory = bitgoAccountLib.register(self.getChain(), bitgoAccountLib.Hbar.TransactionBuilderFactory);
                        txBuilder = factory.from(txHex);
                        return [4 /*yield*/, txBuilder.build()];
                    case 1:
                        tx = _a.sent();
                        txJson = tx.toJson();
                        if (tx._txBody.data !== 'cryptoTransfer') {
                            // don't explain this
                            throw new Error('Transaction format outside of cryptoTransfer not supported for explanation.');
                        }
                        displayOrder = [
                            'id',
                            'outputAmount',
                            'changeAmount',
                            'outputs',
                            'changeOutputs',
                            'fee',
                            'timestamp',
                            'expiration',
                            'memo',
                        ];
                        memo = '';
                        if (params.memo) {
                            memo = params.memo.value;
                        }
                        outputs = [
                            {
                                amount: txJson.amount.toString(),
                                address: txJson.to,
                                memo: memo,
                            },
                        ];
                        explanationResult = {
                            displayOrder: displayOrder,
                            id: txJson.id,
                            outputs: outputs,
                            outputAmount: outputs[0].amount,
                            changeOutputs: [],
                            changeAmount: '0',
                            fee: params.feeInfo,
                            timestamp: txJson.startTime,
                            expiration: txJson.validDuration,
                        };
                        return [2 /*return*/, explanationResult];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Process address into address and memo id
     *
     * @param address the address
     * @returns object containing address and memo id
     */
    Hbar.prototype.getAddressDetails = function (rawAddress) {
        var memoId = undefined;
        var address = rawAddress;
        if (rawAddress.includes('?memoId=')) {
            address = rawAddress.substr(0, rawAddress.indexOf('?'));
        }
        // failed to parse OR bad address
        if (!address || !bitgoAccountLib.Hbar.Utils.isValidAddress(address)) {
            throw new errors_1.InvalidAddressError("invalid address: " + rawAddress);
        }
        // address doesn't have a memo id - this is ok
        if (rawAddress === address) {
            return { address: address, memoId: memoId };
        }
        memoId = rawAddress.substr(rawAddress.indexOf('?memoId=') + 8);
        // undefined is valid as in has not been specified
        if (typeof memoId !== 'undefined' && !this.isValidMemoId(memoId)) {
            throw new errors_1.InvalidMemoIdError("invalid address: '" + address + "', memoId is not valid");
        }
        return { address: address, memoId: memoId };
    };
    /**
     * Validate and return address with appended memo id
     *
     * @param address
     * @param memoId
     */
    Hbar.prototype.normalizeAddress = function (_a) {
        var address = _a.address, memoId = _a.memoId;
        if (memoId && this.isValidMemoId(memoId)) {
            return address + "?memoId=" + memoId;
        }
        return address;
    };
    /**
     * Validates whether a memo is potentially correct in hedera.
     *
     * @param memoId
     */
    Hbar.prototype.isValidMemoId = function (memoId) {
        // TODO: change this to account-lib helper once its published
        if (typeof memoId !== 'undefined' && Buffer.from(memoId).length > 100) {
            return false;
        }
        return true;
    };
    Hbar.prototype.isStellarSeed = function (seed) {
        return seedValidator_1.SeedValidator.isValidEd25519SeedForCoin(seed, statics_1.CoinFamily.XLM);
    };
    Hbar.prototype.convertFromStellarSeed = function (seed) {
        // assume this is a trust custodial seed if its a valid ed25519 prv
        if (!this.isStellarSeed(seed) || seedValidator_1.SeedValidator.hasCompetingSeedFormats(seed)) {
            return null;
        }
        if (seedValidator_1.SeedValidator.isValidEd25519SeedForCoin(seed, statics_1.CoinFamily.XLM)) {
            var keyFromSeed = new bitgoAccountLib.Hbar.KeyPair({ seed: stellar.StrKey.decodeEd25519SecretSeed(seed) });
            var keys = keyFromSeed.getKeys();
            if (keys !== undefined && keys.prv) {
                return keys.prv;
            }
        }
        return null;
    };
    Hbar.prototype.isValidPub = function (pub) {
        return bitgoAccountLib.Hbar.Utils.isValidPublicKey(pub);
    };
    return Hbar;
}(baseCoin_1.BaseCoin));
exports.Hbar = Hbar;
//# sourceMappingURL=data:application/json;base64,