"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var bitcoin = require("@bitgo/utxo-lib");
var Bluebird = require("bluebird");
var cashaddress = require('cashaddress');
var _ = require("lodash");
var abstractUtxoCoin_1 = require("./abstractUtxoCoin");
var common = require("../../common");
var co = Bluebird.coroutine;
var blockchairApi_1 = require("../recovery/blockchairApi");
var VALID_ADDRESS_VERSIONS = {
    base58: 'base58',
    // TODO(BG-11325): remove bech32 in future major version release
    bech32: 'bech32',
    cashaddr: 'cashaddr',
};
var containsMixedCaseCharacters = function (str) {
    return str !== _.toLower(str) && str !== _.toUpper(str);
};
var Bch = /** @class */ (function (_super) {
    __extends(Bch, _super);
    function Bch(bitgo, network) {
        return _super.call(this, bitgo, network || bitcoin.networks.bitcoincash) || this;
    }
    Bch.createInstance = function (bitgo) {
        return new Bch(bitgo);
    };
    Bch.prototype.getChain = function () {
        return 'bch';
    };
    Bch.prototype.getFamily = function () {
        return 'bch';
    };
    Bch.prototype.getFullName = function () {
        return 'Bitcoin Cash';
    };
    Bch.prototype.getAddressPrefix = function () {
        return 'bitcoincash';
    };
    Bch.prototype.supportsBlockTarget = function () {
        return false;
    };
    /**
     * Canonicalize a Bitcoin Cash address for a specific version
     *
     * Starting on January 14th, 2018 Bitcoin Cash's bitcoin-abc node switched over to using cashaddr
     * encoding for all of their addresses in order to distinguish them from Bitcoin Core's.
     * https://www.bitcoinabc.org/cashaddr. We're sticking with the old base58 format because
     * migrating over to the new format will be laborious, and we want to see how the space evolves
     *
     * @param address
     * @param version the version of the desired address, 'base58' or 'cashaddr', defaulting to 'base58', 'bech32' is also
     *                supported for backwards compatibility but is deprecated and will be removed
     * @returns {*} address string
     */
    Bch.prototype.canonicalAddress = function (address, version) {
        var _a;
        if (version === void 0) { version = 'base58'; }
        if (!_.includes(_.keys(VALID_ADDRESS_VERSIONS), version)) {
            throw new Error('version must be base58 or cashaddr');
        }
        var originalAddress = address; // used for error message
        var isValidBase58Address;
        var isValidCashAddr;
        try {
            isValidBase58Address = this.isValidAddress(address, true);
        }
        catch (e) {
            // ignore
        }
        try {
            isValidCashAddr = !!cashaddress.decode(address);
        }
        catch (e) {
            // try to coerce the address into a valid BCH cashaddr address if we know it's not a base58 address
            // We do this to remain compliant with the spec at https://github.com/Bitcoin-UAHF/spec/blob/master/cashaddr.md,
            // which says addresses do not need the prefix, and can be all lowercase XOR all uppercase
            if (!isValidBase58Address) {
                if (!_.startsWith(address, this.getAddressPrefix() + ':')) {
                    address = this.getAddressPrefix() + ':' + address;
                }
                if (containsMixedCaseCharacters(address.split(':')[1])) {
                    // we should reject these addresses
                }
                else {
                    address = _.toLower(address);
                    try {
                        isValidCashAddr = !!cashaddress.decode(address);
                    }
                    catch (e) {
                        // ignore
                    }
                }
            }
        }
        if (!isValidBase58Address && !isValidCashAddr) {
            throw new Error('invalid address: ' + originalAddress);
        }
        // mapping to cashaddress's script versions
        var versionMap = (_a = {},
            _a[this.network.pubKeyHash] = 'pubkeyhash',
            _a[this.network.scriptHash] = 'scripthash',
            _a);
        // another mapping to cashaddress's script versions
        var scriptVersionMap = {
            pubkeyhash: 'pubKeyHash',
            scripthash: 'scriptHash',
        };
        // convert from base58
        if (isValidBase58Address) {
            if (version === VALID_ADDRESS_VERSIONS.base58) {
                // no conversion needed
                return address;
            }
            var addressDetails = bitcoin.address.fromBase58Check(address);
            // JS annoyingly converts JSON Object variable keys to Strings, so we have to do so as well
            var addressVersionString = String(addressDetails.version);
            if (!_.includes(_.keys(versionMap), addressVersionString)) {
                throw new Error('invalid address version: ' + addressVersionString + '. Expected one of ' + _.keys(versionMap));
            }
            return cashaddress.encode(this.getAddressPrefix(), versionMap[addressVersionString], addressDetails.hash);
        }
        // convert from cashaddr
        if (version === VALID_ADDRESS_VERSIONS.cashaddr || version === VALID_ADDRESS_VERSIONS.bech32) {
            return address;
        }
        var rawBytes = cashaddress.decode(address);
        return bitcoin.address.toBase58Check(rawBytes.hash, this.network[scriptVersionMap[rawBytes.version]]);
    };
    /**
     * Checks if the unspent comes from the BitGo taint provider address
     * @param unspent
     * @returns {boolean}
     */
    Bch.prototype.isBitGoTaintedUnspent = function (unspent) {
        return unspent.address === '33p1q7mTGyeM5UnZERGiMcVUkY12SCsatA';
    };
    /**
     *
     * @param txBuilder
     * @returns {*}
     */
    Bch.prototype.prepareTransactionBuilder = function (txBuilder) {
        txBuilder.setVersion(2);
        return txBuilder;
    };
    /**
     * Calculate the hash to verify the signature against
     * @param transaction Transaction object
     * @param inputIndex
     * @param pubScript
     * @param amount The previous output's amount
     * @param hashType
     * @param isSegwitInput
     * @returns {*}
     */
    Bch.prototype.calculateSignatureHash = function (transaction, inputIndex, pubScript, amount, hashType, isSegwitInput) {
        return transaction.hashForCashSignature(inputIndex, pubScript, amount, hashType);
    };
    Object.defineProperty(Bch.prototype, "defaultSigHashType", {
        /**
         *
         * @returns {number}
         */
        get: function () {
            return bitcoin.Transaction.SIGHASH_ALL | bitcoin.Transaction.SIGHASH_BITCOINCASHBIP143;
        },
        enumerable: true,
        configurable: true
    });
    Bch.prototype.recoveryBlockchainExplorerUrl = function (url) {
        return common.Environments[this.bitgo.env].bchExplorerBaseUrl + url;
    };
    Bch.prototype.getAddressInfoFromExplorer = function (addressBase58, apiKey) {
        var explorer = new blockchairApi_1.BlockchairApi(this.bitgo, 'bitcoin-cash', apiKey);
        return Bluebird.resolve(explorer.getAccountInfo(addressBase58));
    };
    Bch.prototype.getUnspentInfoFromExplorer = function (addressBase58, apiKey) {
        var explorer = new blockchairApi_1.BlockchairApi(this.bitgo, 'bitcoin-cash', apiKey);
        return Bluebird.resolve(explorer.getUnspents(addressBase58));
    };
    return Bch;
}(abstractUtxoCoin_1.AbstractUtxoCoin));
exports.Bch = Bch;
//# sourceMappingURL=data:application/json;base64,