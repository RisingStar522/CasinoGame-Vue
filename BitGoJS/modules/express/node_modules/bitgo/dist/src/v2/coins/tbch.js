"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var bch_1 = require("./bch");
var bitcoin = require("@bitgo/utxo-lib");
var Tbch = /** @class */ (function (_super) {
    __extends(Tbch, _super);
    function Tbch(bitgo) {
        return _super.call(this, bitgo, bitcoin.networks.bitcoincashTestnet) || this;
    }
    Tbch.createInstance = function (bitgo) {
        return new Tbch(bitgo);
    };
    Tbch.prototype.getChain = function () {
        return 'tbch';
    };
    Tbch.prototype.getFullName = function () {
        return 'Testnet Bitcoin Cash';
    };
    Tbch.prototype.getAddressPrefix = function () {
        return 'bchtest';
    };
    /**
     * Checks if the unspent comes from the BitGo taint provider address
     * @param unspent
     * @returns {boolean}
     */
    Tbch.prototype.isBitGoTaintedUnspent = function (unspent) {
        return unspent.address === '2MuMnPoSDgWEpNWH28X2nLtYMXQJCyT61eY';
    };
    return Tbch;
}(bch_1.Bch));
exports.Tbch = Tbch;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGJjaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy92Mi9jb2lucy90YmNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUtBLDZCQUE0QjtBQUM1Qix5Q0FBMkM7QUFFM0M7SUFBMEIsd0JBQUc7SUFDM0IsY0FBWSxLQUFZO2VBQ3RCLGtCQUFNLEtBQUssRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDO0lBQ25ELENBQUM7SUFFTSxtQkFBYyxHQUFyQixVQUFzQixLQUFZO1FBQ2hDLE9BQU8sSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUVELHVCQUFRLEdBQVI7UUFDRSxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQsMEJBQVcsR0FBWDtRQUNFLE9BQU8sc0JBQXNCLENBQUM7SUFDaEMsQ0FBQztJQUVELCtCQUFnQixHQUFoQjtRQUNFLE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsb0NBQXFCLEdBQXJCLFVBQXNCLE9BQU87UUFDM0IsT0FBTyxPQUFPLENBQUMsT0FBTyxLQUFLLHFDQUFxQyxDQUFDO0lBQ25FLENBQUM7SUFDSCxXQUFDO0FBQUQsQ0FBQyxBQTdCRCxDQUEwQixTQUFHLEdBNkI1QjtBQTdCWSxvQkFBSSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHByZXR0aWVyXG4gKi9cbmltcG9ydCB7IEJpdEdvIH0gZnJvbSAnLi4vLi4vYml0Z28nO1xuaW1wb3J0IHsgQmFzZUNvaW4gfSBmcm9tICcuLi9iYXNlQ29pbic7XG5pbXBvcnQgeyBCY2ggfSBmcm9tICcuL2JjaCc7XG5pbXBvcnQgKiBhcyBiaXRjb2luIGZyb20gJ0BiaXRnby91dHhvLWxpYic7XG5cbmV4cG9ydCBjbGFzcyBUYmNoIGV4dGVuZHMgQmNoIHtcbiAgY29uc3RydWN0b3IoYml0Z286IEJpdEdvKSB7XG4gICAgc3VwZXIoYml0Z28sIGJpdGNvaW4ubmV0d29ya3MuYml0Y29pbmNhc2hUZXN0bmV0KTtcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGVJbnN0YW5jZShiaXRnbzogQml0R28pOiBCYXNlQ29pbiB7XG4gICAgcmV0dXJuIG5ldyBUYmNoKGJpdGdvKTtcbiAgfVxuXG4gIGdldENoYWluKCkge1xuICAgIHJldHVybiAndGJjaCc7XG4gIH1cblxuICBnZXRGdWxsTmFtZSgpIHtcbiAgICByZXR1cm4gJ1Rlc3RuZXQgQml0Y29pbiBDYXNoJztcbiAgfVxuXG4gIGdldEFkZHJlc3NQcmVmaXgoKSB7XG4gICAgcmV0dXJuICdiY2h0ZXN0JztcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIHVuc3BlbnQgY29tZXMgZnJvbSB0aGUgQml0R28gdGFpbnQgcHJvdmlkZXIgYWRkcmVzc1xuICAgKiBAcGFyYW0gdW5zcGVudFxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGlzQml0R29UYWludGVkVW5zcGVudCh1bnNwZW50KSB7XG4gICAgcmV0dXJuIHVuc3BlbnQuYWRkcmVzcyA9PT0gJzJNdU1uUG9TRGdXRXBOV0gyOFgybkx0WU1YUUpDeVQ2MWVZJztcbiAgfVxufVxuIl19