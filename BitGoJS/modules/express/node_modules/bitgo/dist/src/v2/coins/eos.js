"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var baseCoin_1 = require("../baseCoin");
var bignumber_js_1 = require("bignumber.js");
var crypto_1 = require("crypto");
var utxo_lib_1 = require("@bitgo/utxo-lib");
var EosJs = require("eosjs");
var ecc = require("eosjs-ecc");
var url = require("url");
var querystring = require("querystring");
var _ = require("lodash");
var Bluebird = require("bluebird");
var co = Bluebird.coroutine;
var errors_1 = require("../../errors");
var config = require("../../config");
var environments_1 = require("../environments");
var request = require("superagent");
var Eos = /** @class */ (function (_super) {
    __extends(Eos, _super);
    function Eos() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Eos.createInstance = function (bitgo) {
        return new Eos(bitgo);
    };
    Eos.prototype.getChainId = function () {
        return 'aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906'; // mainnet chain id
    };
    Eos.prototype.getChain = function () {
        return 'eos';
    };
    Eos.prototype.getFamily = function () {
        return 'eos';
    };
    Eos.prototype.getFullName = function () {
        return 'EOS';
    };
    Eos.prototype.getBaseFactor = function () {
        return 1e4;
    };
    /**
     * Flag for sending value of 0
     * @returns {boolean} True if okay to send 0 value, false otherwise
     */
    Eos.prototype.valuelessTransferAllowed = function () {
        return true;
    };
    /**
     * Get URLs of some active public nodes
     */
    Eos.prototype.getPublicNodeUrls = function () {
        return environments_1.Environments[this.bitgo.getEnv()].eosNodeUrls;
    };
    /**
     * Generate secp256k1 key pair
     *
     * @param seed - Seed from which the new keypair should be generated, otherwise a random seed is used
     */
    Eos.prototype.generateKeyPair = function (seed) {
        if (!seed) {
            // An extended private key has both a normal 256 bit private key and a 256
            // bit chain code, both of which must be random. 512 bits is therefore the
            // maximum entropy and gives us maximum security against cracking.
            seed = crypto_1.randomBytes(512 / 8);
        }
        var extendedKey = utxo_lib_1.HDNode.fromSeedBuffer(seed);
        var xpub = extendedKey.neutered().toBase58();
        return {
            pub: xpub,
            prv: extendedKey.toBase58(),
        };
    };
    /**
     * Return boolean indicating whether input is valid public key for the coin.
     *
     * @param pub - the pub to be checked
     */
    Eos.prototype.isValidPub = function (pub) {
        try {
            utxo_lib_1.HDNode.fromBase58(pub);
            return true;
        }
        catch (e) {
            return false;
        }
    };
    /**
     * Return boolean indicating whether input is valid seed for the coin
     *
     * @param prv - the prv to be checked
     */
    Eos.prototype.isValidPrv = function (prv) {
        try {
            utxo_lib_1.HDNode.fromBase58(prv);
            return true;
        }
        catch (e) {
            return false;
        }
    };
    /**
     * Evaluates whether a memo is valid
     *
     * @param value - the memo to be checked
     */
    Eos.prototype.isValidMemo = function (_a) {
        var value = _a.value;
        return _.isString(value) && value.length <= 256;
    };
    /**
     * Return boolean indicating whether a memo id is valid
     *
     * @param memoId - the memo id to be checked
     */
    Eos.prototype.isValidMemoId = function (memoId) {
        if (!this.isValidMemo({ value: memoId })) {
            return false;
        }
        var memoIdNumber;
        try {
            memoIdNumber = new bignumber_js_1.BigNumber(memoId);
        }
        catch (e) {
            return false;
        }
        return memoIdNumber.gte(0);
    };
    /**
     * Process address into address and memo id
     * @param address - the address
     */
    Eos.prototype.getAddressDetails = function (address) {
        var destinationDetails = url.parse(address);
        var destinationAddress = destinationDetails.pathname;
        if (!destinationAddress) {
            throw new errors_1.InvalidAddressError("failed to parse address: " + address);
        }
        // EOS addresses have to be "human readable", which means up to 12 characters and only a-z1-5., i.e.mtoda1.bitgo
        // source: https://developers.eos.io/eosio-cpp/docs/naming-conventions
        if (!/^[a-z1-5.]*$/.test(destinationAddress) || destinationAddress.length > Eos.ADDRESS_LENGTH) {
            throw new errors_1.InvalidAddressError("invalid address: " + address);
        }
        // address doesn't have a memo id
        if (destinationDetails.pathname === address) {
            return {
                address: address,
                memoId: undefined,
            };
        }
        if (!destinationDetails.query) {
            throw new errors_1.InvalidAddressError("failed to parse query string: " + address);
        }
        var queryDetails = querystring.parse(destinationDetails.query);
        if (!queryDetails.memoId) {
            // if there are more properties, the query details need to contain the memoId property
            throw new errors_1.InvalidAddressError("invalid property in address: " + address);
        }
        if (Array.isArray(queryDetails.memoId) && queryDetails.memoId.length !== 1) {
            // valid addresses can only contain one memo id
            throw new errors_1.InvalidAddressError("invalid address '" + address + "', must contain exactly one memoId");
        }
        var memoId = _.castArray(queryDetails.memoId)[0];
        if (!this.isValidMemoId(memoId)) {
            throw new errors_1.InvalidAddressError("invalid address: '" + address + "', memoId is not valid");
        }
        return {
            address: destinationAddress,
            memoId: memoId,
        };
    };
    /**
     * Convert a currency amount represented in base units (satoshi, wei, atoms, drops, stroops)
     * to big units (btc, eth, rmg, xrp, xlm)
     */
    Eos.prototype.baseUnitsToBigUnits = function (baseUnits) {
        var dividend = this.getBaseFactor();
        var bigNumber = new bignumber_js_1.BigNumber(baseUnits).dividedBy(dividend);
        // set the format so commas aren't added to large coin amounts
        // @ts-ignore
        return bigNumber.toFormat(4, null, { groupSeparator: '', decimalSeparator: '.' });
    };
    /**
     * Validate and return address with appended memo id
     *
     * @param address
     * @param memoId
     */
    Eos.prototype.normalizeAddress = function (_a) {
        var address = _a.address, memoId = _a.memoId;
        if (memoId && this.isValidMemoId(memoId)) {
            return address + "?memoId=" + memoId;
        }
        return address;
    };
    /**
     * Return boolean indicating whether input is valid public key for the coin
     *
     * @param address - the address to be checked
     */
    Eos.prototype.isValidAddress = function (address) {
        try {
            var addressDetails = this.getAddressDetails(address);
            return address === this.normalizeAddress(addressDetails);
        }
        catch (e) {
            return false;
        }
    };
    /**
     * Check if address is a valid EOS address, then verify it matches the root address.
     *
     * @param address - the address to verify
     * @param rootAddress - the wallet's root address
     */
    Eos.prototype.verifyAddress = function (_a) {
        var address = _a.address, rootAddress = _a.rootAddress;
        if (!rootAddress || !_.isString(rootAddress)) {
            throw new Error('missing required string rootAddress');
        }
        if (!this.isValidAddress(address)) {
            throw new errors_1.InvalidAddressError("invalid address: " + address);
        }
        var addressDetails = this.getAddressDetails(address);
        var rootAddressDetails = this.getAddressDetails(rootAddress);
        if (!addressDetails || !rootAddressDetails) {
            return false;
        }
        if (addressDetails.address !== rootAddressDetails.address) {
            throw new errors_1.UnexpectedAddressError("address validation failure: " + addressDetails.address + " vs " + rootAddressDetails.address);
        }
        return true;
    };
    /**
     * Assemble keychain and half-sign prebuilt transaction
     *
     * @param params
     * @param params.txPrebuild {Object} prebuild object returned by platform
     * @param params.prv {String} user prv
     * @param callback
     * @returns {Bluebird<EosSignedTransaction>}
     */
    Eos.prototype.signTransaction = function (params, callback) {
        return co(function () {
            var prv, txHex, transaction, signBuffer, privateKeyBuffer, signature, txParams;
            return __generator(this, function (_a) {
                prv = params.prv;
                txHex = params.txPrebuild.txHex;
                transaction = params.txPrebuild.transaction;
                signBuffer = Buffer.from(txHex, 'hex');
                privateKeyBuffer = utxo_lib_1.HDNode.fromBase58(prv)
                    .getKey()
                    .getPrivateKeyBuffer();
                signature = ecc.Signature.sign(signBuffer, privateKeyBuffer).toString();
                transaction.signatures.push(signature);
                txParams = {
                    transaction: transaction,
                    txHex: txHex,
                    recipients: params.txPrebuild.recipients,
                    headers: params.txPrebuild.headers,
                    txid: params.txPrebuild.txid,
                };
                return [2 /*return*/, { halfSigned: txParams }];
            });
        })
            .call(this)
            .asCallback(callback);
    };
    Eos.prototype.deserializeStakeAction = function (eosClient, serializedStakeAction) {
        var eosStakeActionStruct = eosClient.fc.abiCache.abi('eosio').structs.delegatebw;
        var serializedStakeActionBuffer = Buffer.from(serializedStakeAction, 'hex');
        var stakeAction = EosJs.modules.Fcbuffer.fromBuffer(eosStakeActionStruct, serializedStakeActionBuffer);
        if (stakeAction.from !== stakeAction.receiver) {
            throw new Error("staker (" + stakeAction.from + ") and receiver (" + stakeAction.receiver + ") must be the same");
        }
        if (stakeAction.transfer !== 0) {
            throw new Error('cannot transfer funds as part of delegatebw action');
        }
        // stake_cpu_quantity is used as the amount because the BitGo platform only stakes cpu for voting transactions
        return {
            address: stakeAction.from,
            amount: this.bigUnitsToBaseUnits(stakeAction.stake_cpu_quantity.split(' ')[0]),
        };
    };
    Eos.deserializeVoteAction = function (eosClient, serializedVoteAction) {
        var eosVoteActionStruct = eosClient.fc.abiCache.abi('eosio').structs.voteproducer;
        var serializedVoteActionBuffer = Buffer.from(serializedVoteAction, 'hex');
        var voteAction = EosJs.modules.Fcbuffer.fromBuffer(eosVoteActionStruct, serializedVoteActionBuffer);
        var proxyIsEmpty = _.isEmpty(voteAction.proxy);
        var producersIsEmpty = _.isEmpty(voteAction.producers);
        if ((proxyIsEmpty && producersIsEmpty) || (!proxyIsEmpty && !producersIsEmpty)) {
            throw new Error('voting transactions must specify either producers or proxy to vote for');
        }
        return { address: voteAction.voter, proxy: voteAction.proxy, producers: voteAction.producers };
    };
    /**
     * Deserialize a transaction
     * @param transaction
     * @param headers
     */
    Eos.prototype.deserializeTransaction = function (_a) {
        var transaction = _a.transaction, headers = _a.headers;
        var self = this;
        return co(function () {
            var eosClientConfig, eosClient, eosTxStruct, serializedTxBuffer, tx, txAction, transferStruct, serializedTransferDataBuffer, transferActionData, txAction2, deserializedStakeAction, deserializedVoteAction, deserializedStakeAction, txAction2, deserializedVoteAction, rebuiltTransaction;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        eosClientConfig = {
                            chainId: self.getChainId(),
                            transactionHeaders: headers,
                        };
                        eosClient = new EosJs(eosClientConfig);
                        eosTxStruct = eosClient.fc.structs.transaction;
                        serializedTxBuffer = Buffer.from(transaction.packed_trx, 'hex');
                        tx = EosJs.modules.Fcbuffer.fromBuffer(eosTxStruct, serializedTxBuffer);
                        // Only support transactions with one (transfer | voteproducer) or two (delegatebw & voteproducer) actions
                        if (tx.actions.length !== 1 && tx.actions.length !== 2) {
                            throw new Error("invalid number of actions: " + tx.actions.length);
                        }
                        txAction = tx.actions[0];
                        if (!txAction) {
                            throw new Error('missing transaction action');
                        }
                        if (txAction.name === 'transfer') {
                            // Transfers should only have 1 action
                            if (tx.actions.length !== 1) {
                                throw new Error("transfers should only have 1 action: " + tx.actions.length + " given");
                            }
                            transferStruct = eosClient.fc.abiCache.abi('eosio.token').structs.transfer;
                            serializedTransferDataBuffer = Buffer.from(txAction.data, 'hex');
                            transferActionData = EosJs.modules.Fcbuffer.fromBuffer(transferStruct, serializedTransferDataBuffer);
                            tx.address = transferActionData.to;
                            tx.amount = this.bigUnitsToBaseUnits(transferActionData.quantity.split(' ')[0]);
                            tx.memo = transferActionData.memo;
                        }
                        else if (txAction.name === 'delegatebw') {
                            // The delegatebw action should only be part of voting transactions
                            if (tx.actions.length !== 2) {
                                throw new Error("staking transactions that include the delegatebw action should have 2 actions: " + tx.actions.length + " given");
                            }
                            txAction2 = tx.actions[1];
                            if (txAction2.name !== 'voteproducer') {
                                throw new Error("invalid staking transaction action: " + txAction2.name + ", expecting: voteproducer");
                            }
                            deserializedStakeAction = self.deserializeStakeAction(eosClient, txAction.data);
                            deserializedVoteAction = Eos.deserializeVoteAction(eosClient, txAction2.data);
                            if (deserializedStakeAction.address !== deserializedVoteAction.address) {
                                throw new Error("staker (" + deserializedStakeAction.address + ") and voter (" + deserializedVoteAction.address + ") must be the same");
                            }
                            tx.amount = deserializedStakeAction.amount;
                            tx.proxy = deserializedVoteAction.proxy;
                            tx.producers = deserializedVoteAction.producers;
                        }
                        else if (txAction.name === 'voteproducer') {
                            if (tx.actions.length > 2) {
                                throw new Error('voting transactions should not have more than 2 actions');
                            }
                            deserializedStakeAction = void 0;
                            if (tx.actions.length === 2) {
                                txAction2 = tx.actions[1];
                                if (txAction2.name !== 'delegatebw') {
                                    throw new Error("invalid staking transaction action: " + txAction2.name + ", expecting: delegatebw");
                                }
                                deserializedStakeAction = self.deserializeStakeAction(eosClient, txAction2.data);
                            }
                            deserializedVoteAction = Eos.deserializeVoteAction(eosClient, txAction.data);
                            if (!!deserializedStakeAction && deserializedStakeAction.address !== deserializedVoteAction.address) {
                                throw new Error("staker (" + deserializedStakeAction.address + ") and voter (" + deserializedVoteAction.address + ") must be the same");
                            }
                            tx.amount = !!deserializedStakeAction ? deserializedStakeAction.amount : '0';
                            tx.proxy = deserializedVoteAction.proxy;
                            tx.producers = deserializedVoteAction.producers;
                        }
                        else {
                            throw new Error("invalid action: " + txAction.name);
                        }
                        if (!headers) return [3 /*break*/, 2];
                        return [4 /*yield*/, eosClient.transaction({ actions: tx.actions }, { sign: false, broadcast: false })];
                    case 1:
                        rebuiltTransaction = _a.sent();
                        tx.transaction_id = rebuiltTransaction.transaction_id;
                        _a.label = 2;
                    case 2: return [2 /*return*/, tx];
                }
            });
        }).call(this);
    };
    /**
     * Explain/parse transaction
     * @param params - ExplainTransactionOptions
     * @param callback
     */
    Eos.prototype.explainTransaction = function (params, callback) {
        var self = this;
        return co(function () {
            var transaction, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, self.deserializeTransaction(params)];
                    case 1:
                        transaction = _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        e_1 = _a.sent();
                        throw new Error('invalid EOS transaction or headers');
                    case 3: return [2 /*return*/, {
                            displayOrder: [
                                'id',
                                'outputAmount',
                                'changeAmount',
                                'outputs',
                                'changeOutputs',
                                'fee',
                                'memo',
                                'proxy',
                                'producers',
                            ],
                            id: transaction.transaction_id,
                            changeOutputs: [],
                            outputAmount: transaction.amount,
                            changeAmount: 0,
                            outputs: !!transaction.address ? [{ address: transaction.address, amount: transaction.amount }] : [],
                            fee: {},
                            memo: transaction.memo,
                            proxy: transaction.proxy,
                            producers: transaction.producers,
                        }];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Validate a public or private key
     * If passphrase is provided, try to decrypt the key with it
     * @param key
     * @param source
     * @param passphrase
     * @param isUnsignedSweep
     * @param isKrsRecovery
     */
    Eos.prototype.validateKey = function (_a) {
        var key = _a.key, source = _a.source, passphrase = _a.passphrase, isUnsignedSweep = _a.isUnsignedSweep, isKrsRecovery = _a.isKrsRecovery;
        if (!key.startsWith('xprv') && !isUnsignedSweep) {
            // Try to decrypt the key
            try {
                if (source === 'user' || (source === 'backup' && !isKrsRecovery)) {
                    return utxo_lib_1.HDNode.fromBase58(this.bitgo.decrypt({ password: passphrase, input: key }));
                }
            }
            catch (e) {
                throw new Error("Failed to decrypt " + source + " key with passcode - try again!");
            }
        }
        try {
            return utxo_lib_1.HDNode.fromBase58(key);
        }
        catch (e) {
            throw new Error("Failed to validate " + source + " key - try again!");
        }
    };
    /**
     * Prepare and validate all keychains from the keycard for recovery
     * @param userKey
     * @param backupKey
     * @param recoveryDestination
     * @param krsProvider
     * @param walletPassphrase
     */
    Eos.prototype.initiateRecovery = function (_a) {
        var userKey = _a.userKey, backupKey = _a.backupKey, recoveryDestination = _a.recoveryDestination, krsProvider = _a.krsProvider, walletPassphrase = _a.walletPassphrase;
        var self = this;
        return co(function () {
            var isKrsRecovery, isUnsignedSweep, krsProviderConfig, keys;
            return __generator(this, function (_a) {
                isKrsRecovery = backupKey.startsWith('xpub') && !userKey.startsWith('xpub');
                isUnsignedSweep = backupKey.startsWith('xpub') && userKey.startsWith('xpub');
                if (isKrsRecovery) {
                    if (!krsProvider || _.isUndefined(config.krsProviders[krsProvider])) {
                        throw new Error('unknown key recovery service provider');
                    }
                    krsProviderConfig = config.krsProviders[krsProvider];
                    if (!krsProviderConfig.supportedCoins.includes(self.getFamily())) {
                        throw new Error('specified key recovery service does not support recoveries for this coin');
                    }
                }
                keys = [
                    self.validateKey({
                        key: userKey,
                        source: 'user',
                        passphrase: walletPassphrase,
                        isKrsRecovery: isKrsRecovery,
                        isUnsignedSweep: isUnsignedSweep,
                    }),
                    self.validateKey({
                        key: backupKey,
                        source: 'backup',
                        passphrase: walletPassphrase,
                        isKrsRecovery: isKrsRecovery,
                        isUnsignedSweep: isUnsignedSweep,
                    }),
                ];
                if (!self.isValidAddress(recoveryDestination)) {
                    throw new Error('Invalid destination address!');
                }
                return [2 /*return*/, keys];
            });
        }).call(this);
    };
    /**
     * Make a request to one of the public EOS nodes available
     * @param endpoint
     * @param payload
     */
    Eos.prototype.getDataFromNode = function (_a) {
        var endpoint = _a.endpoint, payload = _a.payload;
        var self = this;
        return co(function () {
            var nodeUrls, _i, nodeUrls_1, nodeUrl, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        nodeUrls = self.getPublicNodeUrls();
                        _i = 0, nodeUrls_1 = nodeUrls;
                        _a.label = 1;
                    case 1:
                        if (!(_i < nodeUrls_1.length)) return [3 /*break*/, 6];
                        nodeUrl = nodeUrls_1[_i];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, request.post(nodeUrl + endpoint).send(payload)];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4:
                        e_2 = _a.sent();
                        return [3 /*break*/, 5];
                    case 5:
                        _i++;
                        return [3 /*break*/, 1];
                    case 6: throw new Error("Unable to call endpoint: " + endpoint + " from nodes: " + _.join(nodeUrls, ', '));
                }
            });
        }).call(this);
    };
    /**
     * Get EOS chain info from a public node
     */
    Eos.prototype.getChainInfoFromNode = function () {
        var self = this;
        return co(function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, self.getDataFromNode({ endpoint: '/v1/chain/get_info' })];
                    case 1:
                        response = _a.sent();
                        if (response.status !== 200) {
                            throw new Error('Unable to fetch chain info');
                        }
                        return [2 /*return*/, response.body];
                }
            });
        }).call(this);
    };
    /**
     * Get data specific to an account from a public node
     * @param address
     */
    Eos.prototype.getAccountFromNode = function (_a) {
        var address = _a.address;
        var self = this;
        return co(function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, self.getDataFromNode({
                            endpoint: '/v1/chain/get_account',
                            payload: { account_name: address },
                        })];
                    case 1:
                        response = _a.sent();
                        if (response.status !== 200) {
                            throw new Error('Account not found');
                        }
                        return [2 /*return*/, response.body];
                }
            });
        }).call(this);
    };
    /**
     * Get block data from a public node using its block number or block id
     * @param blockNumOrId
     */
    Eos.prototype.getBlockFromNode = function (_a) {
        var blockNumOrId = _a.blockNumOrId;
        var self = this;
        return co(function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, self.getDataFromNode({
                            endpoint: '/v1/chain/get_block',
                            payload: { block_num_or_id: blockNumOrId },
                        })];
                    case 1:
                        response = _a.sent();
                        if (response.status !== 200) {
                            throw new Error('Block not found');
                        }
                        return [2 /*return*/, response.body];
                }
            });
        }).call(this);
    };
    /**
     * Get headers for an EOS tx from a public node
     */
    Eos.prototype.getTransactionHeadersFromNode = function () {
        var self = this;
        return co(function () {
            var chainInfo, headBlockInfoResult, expireSeconds, chainDate, expirationDate;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, self.getChainInfoFromNode()];
                    case 1:
                        chainInfo = _a.sent();
                        return [4 /*yield*/, self.getBlockFromNode({ blockNumOrId: chainInfo.head_block_num })];
                    case 2:
                        headBlockInfoResult = _a.sent();
                        expireSeconds = 28800;
                        chainDate = new Date(chainInfo.head_block_time + 'Z');
                        expirationDate = new Date(chainDate.getTime() + expireSeconds * 1000);
                        return [2 /*return*/, {
                                expiration: expirationDate.toISOString(),
                                ref_block_num: chainInfo.head_block_num & 0xffff,
                                ref_block_prefix: headBlockInfoResult.ref_block_prefix,
                            }];
                }
            });
        }).call(this);
    };
    Eos.prototype.getTransferAction = function (_a) {
        var recipient = _a.recipient, sender = _a.sender, amount = _a.amount, memo = _a.memo;
        return {
            account: 'eosio.token',
            name: 'transfer',
            authorization: [
                {
                    actor: sender,
                    permission: 'active',
                },
            ],
            data: {
                from: sender,
                to: recipient,
                quantity: this.baseUnitsToBigUnits(amount) + " EOS",
                memo: !_.isNil(memo) ? memo : '',
            },
        };
    };
    /**
     * Sign a transaction with a key
     * @param signableTx
     * @param signingKey
     */
    Eos.prototype.signTx = function (signableTx, signingKey) {
        var signBuffer = Buffer.from(signableTx, 'hex');
        var privateKeyBuffer = signingKey.getKey().getPrivateKeyBuffer();
        return ecc.Signature.sign(signBuffer, privateKeyBuffer).toString();
    };
    /**
     * Serialize an EOS transaction, to the format that should be signed
     * @param eosClient an offline EOSClient that has the transaction structs
     * @param transaction The EOS transaction returned from `eosClient.transaction` to serialize
     * @return {String} serialized transaction in hex format
     */
    Eos.prototype.serializeTransaction = function (eosClient, transaction) {
        var eosTxStruct = eosClient.fc.structs.transaction;
        var txHex = transaction.transaction.transaction;
        var txObject = eosTxStruct.fromObject(txHex);
        return EosJs.modules.Fcbuffer.toBuffer(eosTxStruct, txObject).toString('hex');
    };
    /**
     * Builds a funds recovery transaction without BitGo
     * @param params
     * @param callback
     */
    Eos.prototype.recover = function (params, callback) {
        var self = this;
        return co(function () {
            var isKrsRecovery, isUnsignedSweep, keys, account, userPub, backupPub, activePermission, requiredAuth, foundPubs, requiredAuthKeys, _i, requiredAuthKeys_1, signer, accountBalance, recoveryAmount, destinationAddress, destinationAddressDetails, destinationAccount, transactionHeaders, eosClient, transferAction, transaction, serializedTransaction, txObject, signableTx, userSignature, backupSignature;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!params.rootAddress) {
                            throw new Error('missing required string rootAddress');
                        }
                        isKrsRecovery = params.backupKey.startsWith('xpub') && !params.userKey.startsWith('xpub');
                        isUnsignedSweep = params.backupKey.startsWith('xpub') && params.userKey.startsWith('xpub');
                        return [4 /*yield*/, self.initiateRecovery(params)];
                    case 1:
                        keys = _a.sent();
                        return [4 /*yield*/, self.getAccountFromNode({ address: params.rootAddress })];
                    case 2:
                        account = _a.sent();
                        userPub = ecc.PublicKey.fromBuffer(keys[0].getPublicKeyBuffer()).toString();
                        backupPub = ecc.PublicKey.fromBuffer(keys[1].getPublicKeyBuffer()).toString();
                        activePermission = _.find(account.permissions, { perm_name: 'active' });
                        requiredAuth = _.get(activePermission, 'required_auth');
                        if (!requiredAuth) {
                            throw new Error('Required auth for active permission not found in account');
                        }
                        if (requiredAuth.threshold !== 2) {
                            throw new Error('Unexpected active permission threshold');
                        }
                        foundPubs = {};
                        requiredAuthKeys = requiredAuth.keys;
                        for (_i = 0, requiredAuthKeys_1 = requiredAuthKeys; _i < requiredAuthKeys_1.length; _i++) {
                            signer = requiredAuthKeys_1[_i];
                            if (signer.weight !== 1) {
                                throw new Error('invalid signer weight');
                            }
                            // if it's a dupe of a pub we already know, block
                            if (foundPubs[signer.key]) {
                                throw new Error('duplicate signer key');
                            }
                            foundPubs[signer.key] = (foundPubs[signer.key] || 0) + 1;
                        }
                        if (foundPubs[userPub] !== 1 || foundPubs[backupPub] !== 1) {
                            throw new Error('unexpected incidence frequency of user signer key');
                        }
                        accountBalance = account.core_liquid_balance.split(' ')[0];
                        recoveryAmount = this.bigUnitsToBaseUnits(new bignumber_js_1.BigNumber(accountBalance));
                        destinationAddress = params.recoveryDestination;
                        destinationAddressDetails = self.getAddressDetails(destinationAddress);
                        return [4 /*yield*/, self.getAccountFromNode({ address: destinationAddress })];
                    case 3:
                        destinationAccount = _a.sent();
                        if (!destinationAccount) {
                            throw new Error('Destination account not found');
                        }
                        return [4 /*yield*/, self.getTransactionHeadersFromNode()];
                    case 4:
                        transactionHeaders = _a.sent();
                        eosClient = new EosJs({ chainId: self.getChainId(), transactionHeaders: transactionHeaders });
                        transferAction = self.getTransferAction({
                            recipient: destinationAddressDetails.address,
                            sender: params.rootAddress,
                            amount: new bignumber_js_1.BigNumber(recoveryAmount),
                            memo: destinationAddressDetails.memoId,
                        });
                        return [4 /*yield*/, eosClient.transaction({ actions: [transferAction] }, { sign: false, broadcast: false })];
                    case 5:
                        transaction = _a.sent();
                        serializedTransaction = self.serializeTransaction(eosClient, transaction);
                        txObject = {
                            transaction: {
                                compression: 'none',
                                packed_trx: serializedTransaction,
                                signatures: [],
                            },
                            txid: transaction.transaction_id,
                            recoveryAmount: accountBalance,
                        };
                        signableTx = Buffer.concat([
                            Buffer.from(self.getChainId(), 'hex'),
                            Buffer.from(serializedTransaction, 'hex'),
                            Buffer.from(new Uint8Array(32)),
                        ]).toString('hex');
                        if (isUnsignedSweep) {
                            return [2 /*return*/, txObject];
                        }
                        userSignature = self.signTx(signableTx, keys[0]);
                        txObject.transaction.signatures.push(userSignature);
                        if (!isKrsRecovery) {
                            backupSignature = self.signTx(signableTx, keys[1]);
                            txObject.transaction.signatures.push(backupSignature);
                        }
                        return [2 /*return*/, txObject];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    Eos.prototype.parseTransaction = function (params, callback) {
        return Bluebird.resolve({}).asCallback(callback);
    };
    Eos.prototype.verifyTransaction = function (params, callback) {
        return Bluebird.resolve(true).asCallback(callback);
    };
    /**
     * Generate a random EOS address.
     *
     * This is just a random string which abides by the EOS adddress constraints,
     * and is not actually checked for availability on the EOS blockchain.
     *
     * Current EOS address constraints are:
     * * Address must be exactly 12 characters
     * * Address must only contain lowercase letters and numbers 1-5
     * @returns a validly formatted EOS address, which may or may not actually be available on chain.
     */
    Eos.prototype.generateRandomAddress = function (params) {
        var address = [];
        while (address.length < 12) {
            var char = _.sample(Eos.VALID_ADDRESS_CHARS);
            if (!char) {
                throw new Error('failed to sample valid EOS address characters');
            }
            address.push(char);
        }
        return address.join('');
    };
    Eos.VALID_ADDRESS_CHARS = '12345abcdefghijklmnopqrstuvwxyz'.split('');
    Eos.ADDRESS_LENGTH = 12;
    return Eos;
}(baseCoin_1.BaseCoin));
exports.Eos = Eos;
//# sourceMappingURL=data:application/json;base64,