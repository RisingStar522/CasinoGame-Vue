"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var bitcoin = require("@bitgo/utxo-lib");
var querystring = require("querystring");
var url = require("url");
var Bluebird = require("bluebird");
var request = require("superagent");
var stellar = require("stellar-sdk");
var bignumber_js_1 = require("bignumber.js");
var keychains_1 = require("../keychains");
var keyDeriver_1 = require("../internal/keyDeriver");
var config = require("../../config");
var common = require("../../common");
var errors_1 = require("../../errors");
var baseCoin_1 = require("../baseCoin");
var co = Bluebird.coroutine;
var Xlm = /** @class */ (function (_super) {
    __extends(Xlm, _super);
    function Xlm(bitgo) {
        var _this = _super.call(this, bitgo) || this;
        _this.homeDomain = 'bitgo.com'; // used for reverse federation lookup
        stellar.Network.use(new stellar.Network(stellar.Networks.PUBLIC));
        return _this;
    }
    Xlm.createInstance = function (bitgo) {
        return new Xlm(bitgo);
    };
    /**
     * Factor between the base unit and its smallest subdivison
     */
    Xlm.prototype.getBaseFactor = function () {
        return 1e7;
    };
    /**
     * Identifier for the blockchain which supports this coin
     */
    Xlm.prototype.getChain = function () {
        return 'xlm';
    };
    /**
     * Identifier for the coin family
     */
    Xlm.prototype.getFamily = function () {
        return 'xlm';
    };
    /**
     * Complete human-readable name of this coin
     */
    Xlm.prototype.getFullName = function () {
        return 'Stellar';
    };
    /**
     * Url at which the stellar federation server can be reached
     */
    Xlm.prototype.getFederationServerUrl = function () {
        return common.Environments[this.bitgo.getEnv()].stellarFederationServerUrl;
    };
    /**
     * Url at which horizon can be reached
     */
    Xlm.prototype.getHorizonUrl = function () {
        return 'https://horizon.stellar.org';
    };
    /**
     * Generate a new key pair on the ed25519 curve
     * @param seed
     * @returns generated pub and prv
     */
    Xlm.prototype.generateKeyPair = function (seed) {
        var pair = seed ? stellar.Keypair.fromRawEd25519Seed(seed) : stellar.Keypair.random();
        return {
            pub: pair.publicKey(),
            prv: pair.secret(),
        };
    };
    /**
     * Get decoded ed25519 public key from raw data
     *
     * @param pub Raw public key
     * @returns Encoded public key
     */
    Xlm.prototype.getPubFromRaw = function (pub) {
        return stellar.StrKey.encodeEd25519PublicKey(Buffer.from(pub, 'hex'));
    };
    /**
     * Get decoded ed25519 private key from raw data
     *
     * @param prv Raw private key
     * @returns Encoded private key
     */
    Xlm.prototype.getPrvFromRaw = function (prv) {
        return stellar.StrKey.encodeEd25519SecretSeed(Buffer.from(prv, 'hex'));
    };
    /**
     * Return boolean indicating whether input is valid public key for the coin.
     *
     * @param pub the pub to be checked
     * @returns is it valid?
     */
    Xlm.prototype.isValidPub = function (pub) {
        return stellar.StrKey.isValidEd25519PublicKey(pub);
    };
    /**
     * Return boolean indicating whether input is valid private key for the coin
     *
     * @param prv the prv to be checked
     * @returns is it valid?
     */
    Xlm.prototype.isValidPrv = function (prv) {
        return stellar.StrKey.isValidEd25519SecretSeed(prv);
    };
    /**
     * Return boolean indicating whether a memo id is valid
     *
     * @param memoId memo id
     * @returns true if memo id is valid
     */
    Xlm.prototype.isValidMemoId = function (memoId) {
        var memoIdNumber;
        try {
            stellar.Memo.id(memoId); // throws if the value is not valid memo id
            memoIdNumber = new bignumber_js_1.BigNumber(memoId);
        }
        catch (e) {
            return false;
        }
        return (memoIdNumber.gte(0) && memoIdNumber.lt(Xlm.maxMemoId));
    };
    /**
     * Evaluates whether a memo is valid
     *
     * @param value value of the memo
     * @param type type of the memo
     * @returns true if value and type are a valid
     */
    Xlm.prototype.isValidMemo = function (_a) {
        var value = _a.value, type = _a.type;
        if (!value || !type) {
            return false;
        }
        try {
            // throws if the value is not valid for the type
            // valid types are: 'id', 'text', 'hash', 'return'
            // See https://www.stellar.org/developers/guides/concepts/transactions.html#memo
            stellar.Memo[type](value);
        }
        catch (e) {
            return false;
        }
        return true;
    };
    /**
     * Minimum balance of a 2-of-3 multisig wallet
     * @returns minimum balance in stroops
     */
    Xlm.prototype.getMinimumReserve = function () {
        var self = this;
        return co(function () {
            var server, horizonLedgerInfo, baseReserve;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        server = new stellar.Server(self.getHorizonUrl());
                        return [4 /*yield*/, server
                                .ledgers()
                                .order('desc')
                                .limit(1)
                                .call()];
                    case 1:
                        horizonLedgerInfo = _a.sent();
                        if (!horizonLedgerInfo) {
                            throw new Error('unable to connect to Horizon for reserve requirement data');
                        }
                        baseReserve = horizonLedgerInfo.records[0].base_reserve_in_stroops;
                        // 2-of-3 wallets have a minimum reserve of 5x the base reserve
                        return [2 /*return*/, 5 * baseReserve];
                }
            });
        }).call(this);
    };
    /**
     * Transaction fee for each operation
     * @returns transaction fee in stroops
     */
    Xlm.prototype.getBaseTransactionFee = function () {
        var self = this;
        return co(function () {
            var server, horizonLedgerInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        server = new stellar.Server(self.getHorizonUrl());
                        return [4 /*yield*/, server
                                .ledgers()
                                .order('desc')
                                .limit(1)
                                .call()];
                    case 1:
                        horizonLedgerInfo = _a.sent();
                        if (!horizonLedgerInfo) {
                            throw new Error('unable to connect to Horizon for reserve requirement data');
                        }
                        return [2 /*return*/, horizonLedgerInfo.records[0].base_fee_in_stroops];
                }
            });
        }).call(this);
    };
    /**
     * Process address into address and memo id
     *
     * @param address the address
     * @returns object containing address and memo id
     */
    Xlm.prototype.getAddressDetails = function (address) {
        var destinationDetails = url.parse(address);
        var destinationAddress = destinationDetails.pathname;
        if (!destinationAddress || !stellar.StrKey.isValidEd25519PublicKey(destinationAddress)) {
            throw new Error("invalid address: " + address);
        }
        // address doesn't have a memo id
        if (destinationDetails.pathname === address) {
            return {
                address: address,
                memoId: undefined,
            };
        }
        if (!destinationDetails.query) {
            throw new errors_1.InvalidAddressError("invalid address: " + address);
        }
        var queryDetails = querystring.parse(destinationDetails.query);
        if (!queryDetails.memoId) {
            // if there are more properties, the query details need to contain the memo id property
            throw new errors_1.InvalidAddressError("invalid address: " + address);
        }
        if (Array.isArray(queryDetails.memoId)) {
            throw new errors_1.InvalidAddressError("memoId may only be given at most once, but found " + queryDetails.memoId.length + " instances in address " + address);
        }
        if (Array.isArray(queryDetails.memoId) && queryDetails.memoId.length !== 1) {
            // valid addresses can only contain one memo id
            throw new errors_1.InvalidAddressError("invalid address '" + address + "', must contain exactly one memoId");
        }
        var memoId = _.castArray(queryDetails.memoId)[0];
        if (!this.isValidMemoId(memoId)) {
            throw new errors_1.InvalidMemoIdError("invalid address: '" + address + "', memoId is not valid");
        }
        return {
            address: destinationAddress,
            memoId: memoId,
        };
    };
    /**
     * Validate and return address with appended memo id
     *
     * @param address address
     * @param memoId memo id
     * @returns address with memo id
     */
    Xlm.prototype.normalizeAddress = function (_a) {
        var address = _a.address, memoId = _a.memoId;
        if (!stellar.StrKey.isValidEd25519PublicKey(address)) {
            throw new Error("invalid address details: " + address);
        }
        if (memoId && this.isValidMemoId(memoId)) {
            return address + "?memoId=" + memoId;
        }
        return address;
    };
    /**
     * Return boolean indicating whether input is valid public key for the coin
     *
     * @param address the pub to be checked
     * @returns is it valid?
     */
    Xlm.prototype.isValidAddress = function (address) {
        try {
            var addressDetails = this.getAddressDetails(address);
            return address === this.normalizeAddress(addressDetails);
        }
        catch (e) {
            return false;
        }
    };
    /**
     * Return a Stellar Asset in coin:token form (i.e. (t)xlm:<code>-<issuer>)
     * If the asset is XLM, return the chain
     * @param {stellar.Asset} asset - instance of Stellar Asset
     */
    Xlm.prototype.getTokenNameFromStellarAsset = function (asset) {
        var code = asset.getCode();
        var issuer = asset.getIssuer();
        if (asset.isNative()) {
            return this.getChain();
        }
        return "" + this.getChain() + baseCoin_1.BaseCoin.coinTokenPatternSeparator + code + Xlm.tokenPatternSeparator + issuer;
    };
    /**
     * Evaluate whether a stellar username has valid format
     * This method is used by the client when a stellar address is being added to a wallet
     * Example of a common stellar username: foo@bar.baz
     * The above example would result in the Stellar address: foo@bar.baz*bitgo.com
     *
     * @param username - stellar username
     * @return true if stellar username is valid
     */
    Xlm.prototype.isValidStellarUsername = function (username) {
        return /^[a-z0-9\-_.+@]+$/.test(username);
    };
    /**
     * Get an instance of FederationServer for BitGo lookups
     *
     * @returns instance of BitGo Federation Server
     */
    Xlm.prototype.getBitGoFederationServer = function () {
        // Identify the URI scheme in case we need to allow connecting to HTTP server.
        var isNonSecureEnv = !_.startsWith(common.Environments[this.bitgo.env].uri, 'https');
        var federationServerOptions = { allowHttp: isNonSecureEnv };
        return new stellar.FederationServer(this.getFederationServerUrl(), 'bitgo.com', federationServerOptions);
    };
    /**
     * Perform federation lookups
     * Our federation server handles lookups for bitgo as well as for other federation domains
     *
     * @param {String} [address] - address to look up
     * @param {String} [accountId] - account id to look up
     */
    Xlm.prototype.federationLookup = function (_a) {
        var address = _a.address, accountId = _a.accountId;
        var self = this;
        return co(function () {
            var federationServer, e_1, error;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 6, , 7]);
                        federationServer = self.getBitGoFederationServer();
                        if (!address) return [3 /*break*/, 2];
                        return [4 /*yield*/, federationServer.resolveAddress(address)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        if (!accountId) return [3 /*break*/, 4];
                        return [4 /*yield*/, federationServer.resolveAccountId(accountId)];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4: throw new Error('invalid argument - must provide Stellar address or account id');
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        e_1 = _a.sent();
                        error = _.get(e_1, 'response.data.detail');
                        if (error) {
                            throw new errors_1.StellarFederationUserNotFoundError(error);
                        }
                        else {
                            throw e_1;
                        }
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        }).call(this);
    };
    /**
     * Attempt to resolve a stellar address into a stellar account
     *
     * @param {String} address - stellar address to look for
     */
    Xlm.prototype.federationLookupByName = function (address) {
        var self = this;
        return co(function () {
            return __generator(this, function (_a) {
                if (!address) {
                    throw new Error('invalid Stellar address');
                }
                return [2 /*return*/, self.federationLookup({ address: address })];
            });
        }).call(this);
    };
    /**
     * Attempt to resolve an account id into a stellar account
     * Only works for accounts that can be resolved by our federation server
     *
     * @param {String} accountId - stellar account id
     */
    Xlm.prototype.federationLookupByAccountId = function (accountId) {
        var self = this;
        return co(function () {
            return __generator(this, function (_a) {
                if (!accountId) {
                    throw new Error('invalid Stellar account');
                }
                return [2 /*return*/, self.federationLookup({ accountId: accountId })];
            });
        }).call(this);
    };
    /**
     * Check if address is a valid XLM address, and then make sure it matches the root address.
     *
     * @param address {String} the address to verify
     * @param rootAddress {String} the wallet's root address
     */
    Xlm.prototype.verifyAddress = function (_a) {
        var address = _a.address, rootAddress = _a.rootAddress;
        if (!this.isValidAddress(address)) {
            throw new errors_1.InvalidAddressError("invalid address: " + address);
        }
        var addressDetails = this.getAddressDetails(address);
        var rootAddressDetails = this.getAddressDetails(rootAddress);
        if (addressDetails.address !== rootAddressDetails.address) {
            throw new errors_1.UnexpectedAddressError("address validation failure: " + addressDetails.address + " vs " + rootAddressDetails.address);
        }
        return true;
    };
    /**
     * Get extra parameters for prebuilding a tx
     * Set empty recipients array in trustline txs
     */
    Xlm.prototype.getExtraPrebuildParams = function (buildParams, callback) {
        var params = {};
        if (buildParams.type === 'trustline') {
            params.recipients = [];
        }
        return Bluebird.resolve(params).asCallback(callback);
    };
    /**
     * Generates Stellar keypairs from the user key and backup key
     * @param params
     */
    Xlm.prototype.initiateRecovery = function (params) {
        var self = this;
        return co(function () {
            var keys, userKey, backupKey, isKrsRecovery, isUnsignedSweep, userKeyPair;
            return __generator(this, function (_a) {
                keys = [];
                userKey = params.userKey;
                backupKey = params.backupKey;
                isKrsRecovery = backupKey.startsWith('G') && !userKey.startsWith('G');
                isUnsignedSweep = backupKey.startsWith('G') && userKey.startsWith('G');
                if (isKrsRecovery && params.krsProvider && _.isUndefined(config.krsProviders[params.krsProvider])) {
                    throw new errors_1.KeyRecoveryServiceError("Unknown key recovery service provider - " + params.krsProvider);
                }
                if (isKrsRecovery && params.krsProvider && !config.krsProviders[params.krsProvider].supportedCoins.includes(self.getFamily())) {
                    throw new errors_1.KeyRecoveryServiceError("Specified key recovery service does not support recoveries for " + self.getChain());
                }
                if (!self.isValidAddress(params.recoveryDestination)) {
                    throw new errors_1.InvalidAddressError('Invalid destination address!');
                }
                try {
                    if (!userKey.startsWith('S') && !userKey.startsWith('G')) {
                        userKey = self.bitgo.decrypt({
                            input: userKey,
                            password: params.walletPassphrase,
                        });
                    }
                    userKeyPair = isUnsignedSweep ?
                        stellar.Keypair.fromPublicKey(userKey) :
                        stellar.Keypair.fromSecret(userKey);
                    keys.push(userKeyPair);
                }
                catch (e) {
                    throw new Error('Failed to decrypt user key with passcode - try again!');
                }
                try {
                    if (!backupKey.startsWith('S') && !isKrsRecovery && !isUnsignedSweep) {
                        backupKey = this.bitgo.decrypt({
                            input: backupKey,
                            password: params.walletPassphrase,
                        });
                    }
                    if (isKrsRecovery || isUnsignedSweep) {
                        keys.push(stellar.Keypair.fromPublicKey(backupKey));
                    }
                    else {
                        keys.push(stellar.Keypair.fromSecret(backupKey));
                    }
                }
                catch (e) {
                    throw new Error('Failed to decrypt backup key with passcode - try again!');
                }
                return [2 /*return*/, keys];
            });
        }).call(this);
    };
    /**
     * Builds a funds recovery transaction without BitGo
     * @param params
     * - userKey: [encrypted] Stellar private key
     * - backupKey: [encrypted] Stellar private key, or public key if the private key is held by a KRS provider
     * - walletPassphrase: necessary if one of the private keys is encrypted
     * - rootAddress: base address of the wallet to recover funds from
     * - krsProvider: necessary if backup key is held by KRS
     * - recoveryDestination: target address to send recovered funds to
     * @param callback
     */
    Xlm.prototype.recover = function (params, callback) {
        var self = this;
        return co(function () {
            var _a, userKey, backupKey, isKrsRecovery, isUnsignedSweep, accountDataUrl, destinationUrl, accountData, e_2, unfundedDestination, e_3, account, nativeBalanceInfo, walletBalance, minimumReserve, baseTxFee, recoveryAmount, formattedRecoveryAmount, txBuilder, operation, tx, transaction;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, self.initiateRecovery(params)];
                    case 1:
                        _a = _b.sent(), userKey = _a[0], backupKey = _a[1];
                        isKrsRecovery = params.backupKey.startsWith('G') && !params.userKey.startsWith('G');
                        isUnsignedSweep = params.backupKey.startsWith('G') && params.userKey.startsWith('G');
                        if (!params.rootAddress || !stellar.StrKey.isValidEd25519PublicKey(params.rootAddress)) {
                            throw new Error("Invalid wallet address: " + params.rootAddress);
                        }
                        accountDataUrl = self.getHorizonUrl() + "/accounts/" + params.rootAddress;
                        destinationUrl = self.getHorizonUrl() + "/accounts/" + params.recoveryDestination;
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, request.get(accountDataUrl).result()];
                    case 3:
                        accountData = _b.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        e_2 = _b.sent();
                        throw new Error('Unable to reach the Stellar network via Horizon.');
                    case 5:
                        unfundedDestination = false;
                        _b.label = 6;
                    case 6:
                        _b.trys.push([6, 8, , 9]);
                        return [4 /*yield*/, request.get(destinationUrl)];
                    case 7:
                        _b.sent();
                        return [3 /*break*/, 9];
                    case 8:
                        e_3 = _b.sent();
                        if (e_3.status === 404) {
                            // If the destination account does not yet exist, horizon responds with 404
                            unfundedDestination = true;
                        }
                        return [3 /*break*/, 9];
                    case 9:
                        if (!accountData.sequence || !accountData.balances) {
                            throw new Error('Horizon server error - unable to retrieve sequence ID or account balance');
                        }
                        account = new stellar.Account(params.rootAddress, accountData.sequence);
                        nativeBalanceInfo = accountData.balances.find(function (assetBalance) { return assetBalance['asset_type'] === 'native'; });
                        if (!nativeBalanceInfo) {
                            throw new Error('Provided wallet has a balance of 0 XLM, recovery aborted');
                        }
                        walletBalance = Number(self.bigUnitsToBaseUnits(nativeBalanceInfo.balance));
                        return [4 /*yield*/, self.getMinimumReserve()];
                    case 10:
                        minimumReserve = _b.sent();
                        return [4 /*yield*/, self.getBaseTransactionFee()];
                    case 11:
                        baseTxFee = _b.sent();
                        recoveryAmount = walletBalance - minimumReserve - baseTxFee;
                        formattedRecoveryAmount = self.baseUnitsToBigUnits(recoveryAmount).toString();
                        txBuilder = new stellar.TransactionBuilder(account);
                        operation = unfundedDestination ?
                            // In this case, we need to create the account
                            stellar.Operation.createAccount({
                                destination: params.recoveryDestination,
                                startingBalance: formattedRecoveryAmount,
                            }) :
                            // Otherwise if the account already exists, we do a normal send
                            stellar.Operation.payment({
                                destination: params.recoveryDestination,
                                asset: stellar.Asset.native(),
                                amount: formattedRecoveryAmount,
                            });
                        tx = txBuilder.addOperation(operation).build();
                        if (!isUnsignedSweep) {
                            tx.sign(userKey);
                        }
                        if (!isKrsRecovery && !isUnsignedSweep) {
                            tx.sign(backupKey);
                        }
                        transaction = {
                            tx: Xlm.txToString(tx),
                            recoveryAmount: recoveryAmount,
                        };
                        if (isKrsRecovery) {
                            transaction.backupKey = params.backupKey;
                            transaction.coin = self.getChain();
                        }
                        return [2 /*return*/, transaction];
                }
            });
        }).call(this).asCallback(callback);
    };
    /**
     * Assemble keychain and half-sign prebuilt transaction
     *
     * @param params
     * @param params.txPrebuild {Object} prebuild object returned by platform
     * @param params.prv {String} user prv
     * @param callback
     * @returns {Bluebird<HalfSignedTransaction>}
     */
    Xlm.prototype.signTransaction = function (params, callback) {
        return co(function () {
            var txPrebuild, prv, keyPair, tx;
            return __generator(this, function (_a) {
                txPrebuild = params.txPrebuild, prv = params.prv;
                if (_.isUndefined(txPrebuild)) {
                    throw new Error('missing txPrebuild parameter');
                }
                if (!_.isObject(txPrebuild)) {
                    throw new Error("txPrebuild must be an object, got type " + typeof txPrebuild);
                }
                if (_.isUndefined(prv)) {
                    throw new Error('missing prv parameter to sign transaction');
                }
                if (!_.isString(prv)) {
                    throw new Error("prv must be a string, got type " + typeof prv);
                }
                keyPair = stellar.Keypair.fromSecret(prv);
                tx = new stellar.Transaction(txPrebuild.txBase64);
                tx.sign(keyPair);
                return [2 /*return*/, {
                        halfSigned: {
                            txBase64: Xlm.txToString(tx),
                        },
                    }];
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Extend walletParams with extra params required for generating an XLM wallet
     *
     * Stellar wallets have three keychains on them. Two are generated by the platform, and the last is generated by the user.
     * Initially, we need a root prv to generate the account, which must be distinct from all three keychains on the wallet.
     * If a root prv is not provided, a random one is generated.
     */
    Xlm.prototype.supplementGenerateWallet = function (walletParams) {
        var self = this;
        return co(function () {
            var seed, rootPrv, keyPair;
            return __generator(this, function (_a) {
                rootPrv = walletParams.rootPrivateKey;
                if (rootPrv) {
                    if (!self.isValidPrv(rootPrv)) {
                        throw new Error('rootPrivateKey needs to be valid ed25519 secret seed');
                    }
                    seed = stellar.StrKey.decodeEd25519SecretSeed(rootPrv);
                }
                keyPair = self.generateKeyPair(seed);
                // extend the wallet initialization params
                walletParams.rootPrivateKey = keyPair.prv;
                return [2 /*return*/, walletParams];
            });
        }).call(this);
    };
    /**
     * Sign message with private key
     *
     * @param key
     * @param message
     * @param callback
     */
    Xlm.prototype.signMessage = function (key, message, callback) {
        var self = this;
        return co(function cosignMessage() {
            var keypair;
            return __generator(this, function (_a) {
                if (!self.isValidPrv(key.prv)) {
                    throw new Error("invalid prv: " + key.prv);
                }
                if (!Buffer.isBuffer(message)) {
                    message = Buffer.from(message);
                }
                keypair = stellar.Keypair.fromSecret(key.prv);
                return [2 /*return*/, keypair.sign(message)];
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Verifies if signature for message is valid.
     *
     * @param pub public key
     * @param message signed message
     * @param signature signature to verify
     * @returns true if signature is valid.
     */
    Xlm.prototype.verifySignature = function (pub, message, signature) {
        if (!this.isValidPub(pub)) {
            throw new Error("invalid pub: " + pub);
        }
        if (!Buffer.isBuffer(message)) {
            message = Buffer.from(message);
        }
        var keyPair = stellar.Keypair.fromPublicKey(pub);
        return keyPair.verify(message, signature);
    };
    /**
     * Explain/parse transaction
     * @param params
     * @param callback
     */
    Xlm.prototype.explainTransaction = function (params, callback) {
        var self = this;
        return co(function () {
            var txBase64, tx, id, memo, spendAmount, spendAmounts, outputs, operations, outputAmount, outputAmounts, fee;
            return __generator(this, function (_a) {
                txBase64 = params.txBase64;
                try {
                    tx = new stellar.Transaction(txBase64);
                }
                catch (e) {
                    throw new Error('txBase64 needs to be a valid tx encoded as base64 string');
                }
                id = tx.hash().toString('hex');
                memo = _.result(tx, '_memo.value') && _.result(tx, '_memo.arm') ?
                    {
                        value: _.result(tx, '_memo.value').toString(),
                        type: _.result(tx, '_memo.arm'),
                    } : {};
                spendAmount = new bignumber_js_1.BigNumber(0);
                spendAmounts = {};
                if (_.isEmpty(tx.operations)) {
                    throw new Error('missing operations');
                }
                outputs = [];
                operations = [];
                _.forEach(tx.operations, function (op) {
                    if (op.type === 'createAccount' || op.type === 'payment') {
                        // TODO Remove memoId from address
                        // Get memo to attach to address, if type is 'id'
                        var memoId = _.get(memo, 'type') === 'id' && !_.get(memo, 'value') ?
                            "?memoId=" + memo.value :
                            '';
                        var asset = op.type === 'payment' ? op.asset : stellar.Asset.native();
                        var coin = self.getTokenNameFromStellarAsset(asset); // coin or token id
                        var output = {
                            amount: self.bigUnitsToBaseUnits(op.startingBalance || op.amount),
                            address: op.destination + memoId,
                            coin: coin,
                        };
                        if (!_.isUndefined(spendAmounts[coin])) {
                            spendAmounts[coin] = spendAmounts[coin].plus(output.amount);
                        }
                        else {
                            spendAmounts[coin] = new bignumber_js_1.BigNumber(output.amount);
                        }
                        if (asset.isNative()) {
                            spendAmount = spendAmount.plus(output.amount);
                        }
                        outputs.push(output);
                    }
                    else if (op.type === 'changeTrust') {
                        operations.push({
                            type: op.type,
                            coin: self.getTokenNameFromStellarAsset(op.line),
                            asset: op.line,
                            limit: self.bigUnitsToBaseUnits(op.limit),
                        });
                    }
                });
                outputAmount = spendAmount.toFixed(0);
                outputAmounts = _.mapValues(spendAmounts, function (amount) { return amount.toFixed(0); });
                fee = {
                    fee: tx.fee.toFixed(0),
                    feeRate: null,
                    size: null,
                };
                return [2 /*return*/, {
                        displayOrder: ['id', 'outputAmount', 'outputAmounts', 'changeAmount', 'outputs', 'changeOutputs', 'fee', 'memo', 'operations'],
                        id: id,
                        outputs: outputs,
                        outputAmount: outputAmount,
                        outputAmounts: outputAmounts,
                        changeOutputs: [],
                        changeAmount: '0',
                        memo: memo,
                        fee: fee,
                        operations: operations,
                    }];
            });
        }).call(this).asCallback(callback);
    };
    /**
     * Verify that a tx prebuild's operations comply with the original intention
     * @param {stellar.Operation} operations - tx operations
     * @param {TransactionParams} txParams - params used to build the tx
     */
    Xlm.prototype.verifyTrustlineTxOperations = function (operations, txParams) {
        var _this = this;
        var trustlineOperations = _.filter(operations, ['type', 'changeTrust']);
        if (trustlineOperations.length !== _.get(txParams, 'trustlines', []).length) {
            throw new Error('transaction prebuild does not match expected trustline operations');
        }
        _.forEach(trustlineOperations, function (op) {
            var opToken = _this.getTokenNameFromStellarAsset(op.line);
            var tokenTrustline = _.find(txParams.trustlines, function (trustline) {
                // trustline params use limits in base units
                var opLimitBaseUnits = _this.bigUnitsToBaseUnits(op.limit);
                // Prepare the conditions to check for
                // Limit will always be set in the operation, even if it was omitted from txParams in the following cases:
                // 1. Action is 'add' - limit is set to Xlm.maxTrustlineLimit by default
                // 2. Action is 'remove' - limit is set to '0'
                var noLimit = _.isUndefined(trustline.limit);
                var addTrustlineWithDefaultLimit = (trustline.action === 'add' && opLimitBaseUnits === Xlm.maxTrustlineLimit);
                var removeTrustline = (trustline.action === 'remove' && opLimitBaseUnits === '0');
                return (trustline.token === opToken &&
                    (trustline.limit === opLimitBaseUnits || (noLimit && (addTrustlineWithDefaultLimit || removeTrustline))));
            });
            if (!tokenTrustline) {
                throw new Error('transaction prebuild does not match expected trustline tokens');
            }
        });
    };
    /**
     * Verify that a transaction prebuild complies with the original intention
     *
     * @param options
     * @param options.txPrebuild prebuild object returned by platform
     * @param options.txPrebuild.txBase64 prebuilt transaction encoded as base64 string
     * @param options.wallet wallet object to obtain keys to verify against
     * @param options.verification specifying some verification parameters
     * @param options.verification.disableNetworking Disallow fetching any data from the internet for verification purposes
     * @param options.verification.keychains Pass keychains manually rather than fetching them by id
     * @param callback
     */
    Xlm.prototype.verifyTransaction = function (options, callback) {
        // TODO BG-5600 Add parseTransaction / improve verification
        var self = this;
        return co(function () {
            var txParams, txPrebuild, wallet, _a, verification, disableNetworking, tx, outputOperations, userSignature, keychains;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        txParams = options.txParams, txPrebuild = options.txPrebuild, wallet = options.wallet, _a = options.verification, verification = _a === void 0 ? {} : _a;
                        disableNetworking = !!verification.disableNetworking;
                        if (!txPrebuild.txBase64) {
                            throw new Error('missing required tx prebuild property txBase64');
                        }
                        tx = new stellar.Transaction(txPrebuild.txBase64);
                        if (txParams.recipients && txParams.recipients.length > 1) {
                            throw new Error('cannot specify more than 1 recipient');
                        }
                        outputOperations = _.filter(tx.operations, function (operation) {
                            return operation.type === 'createAccount' || operation.type === 'payment';
                        });
                        if (txParams.type === 'trustline') {
                            this.verifyTrustlineTxOperations(tx.operations, txParams);
                        }
                        else {
                            if (_.isEmpty(outputOperations)) {
                                throw new Error('transaction prebuild does not have any operations');
                            }
                            _.forEach(txParams.recipients, function (expectedOutput, index) {
                                var expectedOutputAddress = self.getAddressDetails(expectedOutput.address);
                                var output = outputOperations[index];
                                if (output.destination !== expectedOutputAddress.address) {
                                    throw new Error('transaction prebuild does not match expected recipient');
                                }
                                var expectedOutputAmount = new bignumber_js_1.BigNumber(expectedOutput.amount);
                                // The output amount is expressed as startingBalance in createAccount operations and as amount in payment operations.
                                var outputAmountString = (output.type === 'createAccount') ? output.startingBalance : output.amount;
                                var outputAmount = new bignumber_js_1.BigNumber(self.bigUnitsToBaseUnits(outputAmountString));
                                if (!outputAmount.eq(expectedOutputAmount)) {
                                    throw new Error('transaction prebuild does not match expected amount');
                                }
                            });
                        }
                        if (!!_.isEmpty(tx.signatures)) return [3 /*break*/, 4];
                        userSignature = tx.signatures[0].signature();
                        keychains = verification.keychains;
                        if (!(!keychains && disableNetworking)) return [3 /*break*/, 1];
                        throw new Error('cannot fetch keychains without networking');
                    case 1:
                        if (!!keychains) return [3 /*break*/, 3];
                        return [4 /*yield*/, Bluebird.props({
                                user: self.keychains().get({ id: wallet.keyIds()[keychains_1.KeyIndices.USER] }),
                                backup: self.keychains().get({ id: wallet.keyIds()[keychains_1.KeyIndices.BACKUP] }),
                            })];
                    case 2:
                        keychains = _b.sent();
                        _b.label = 3;
                    case 3:
                        if (!keychains || !keychains.backup || !keychains.user) {
                            throw new Error('keychains are required, but could not be fetched');
                        }
                        if (self.verifySignature(keychains.backup.pub, tx.hash(), userSignature)) {
                            throw new Error('transaction signed with wrong key');
                        }
                        if (!self.verifySignature(keychains.user.pub, tx.hash(), userSignature)) {
                            throw new Error('transaction signature invalid');
                        }
                        _b.label = 4;
                    case 4: return [2 /*return*/, true];
                }
            });
        }).call(this).asCallback(callback);
    };
    /**
     * Derive a hardened child public key from a master key seed using an additional seed for randomness.
     *
     * Due to technical differences between keypairs on the ed25519 curve and the secp256k1 curve,
     * only hardened private key derivation is supported.
     *
     * @param key seed for the master key. Note: Not the public key or encoded private key. This is the raw seed.
     * @param entropySeed random seed which is hashed to generate the derivation path
     */
    Xlm.prototype.deriveKeyWithSeed = function (_a) {
        var key = _a.key, seed = _a.seed;
        var derivationPathInput = bitcoin.crypto.hash256("" + seed).toString('hex');
        var derivationPathParts = [
            999999,
            parseInt(derivationPathInput.slice(0, 7), 16),
            parseInt(derivationPathInput.slice(7, 14), 16),
        ];
        var derivationPath = 'm/' + derivationPathParts
            .map(function (part) { return part + "'"; })
            .join('/');
        var derivedKey = keyDeriver_1.Ed25519KeyDeriver.derivePath(derivationPath, key).key;
        var keypair = stellar.Keypair.fromRawEd25519Seed(derivedKey);
        return {
            key: keypair.publicKey(),
            derivationPath: derivationPath,
        };
    };
    Xlm.prototype.parseTransaction = function (params, callback) {
        return Bluebird.resolve({}).asCallback(callback);
    };
    Xlm.tokenPatternSeparator = '-'; // separator for token code and issuer
    Xlm.maxMemoId = '0xFFFFFFFFFFFFFFFF'; // max unsigned 64-bit number = 18446744073709551615
    // max int64 number supported by the network (2^63)-1
    // See: https://www.stellar.org/developers/guides/concepts/assets.html#amount-precision-and-representation
    Xlm.maxTrustlineLimit = '9223372036854775807';
    /**
     * stellar-sdk has two overloads for toXDR, and typescript can't seem to figure out the
     * correct one to use, so we have to be very explicit as to which one we want.
     * @param tx transaction to convert
     */
    Xlm.txToString = function (tx) { return tx.toEnvelope().toXDR('base64'); };
    return Xlm;
}(baseCoin_1.BaseCoin));
exports.Xlm = Xlm;
//# sourceMappingURL=data:application/json;base64,