"use strict";
/**
 * @prettier
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var debugLib = require("debug");
var _ = require("lodash");
var errors = require("../../errors");
var abstractUtxoCoin_1 = require("../coins/abstractUtxoCoin");
var debug = debugLib('bitgo:v2:parseoutput');
/**
 * Check an address which failed initial validation to see if it's the base address of a migrated v1 bch wallet.
 *
 * The wallet in question could be a migrated SafeHD BCH wallet, and the transaction we
 * are currently parsing is trying to spend change back to the v1 wallet base address.
 *
 * It does this since we don't allow new address creation for these wallets,
 * and instead return the base address from the v1 wallet when a new address is requested.
 * If this new address is requested for the purposes of spending change back to the wallet,
 * the change will go to the v1 wallet base address. This address *is* on the wallet,
 * but it will still cause an error to be thrown by verifyAddress, since the derivation path
 * used for this address is non-standard. (I have seen these addresses derived using paths m/0/0 and m/101,
 * whereas the v2 addresses are derived using path  m/0/0/${chain}/${index}).
 *
 * This means we need to check for this case explicitly in this catch block, and classify
 * these types of outputs as internal instead of external. Failing to do so would cause the
 * transaction's implicit external outputs (ie, outputs which go to addresses not specified in
 * the recipients array) to add up to more than the 150 basis point limit which we enforce on
 * pay-as-you-go outputs (which should be the only implicit external outputs on our transactions).
 *
 * The 150 basis point limit for implicit external sends is enforced in verifyTransaction,
 * which calls this function to get information on the total external/internal spend amounts
 * for a transaction. The idea here is to protect from the transaction being maliciously modified
 * to add more implicit external spends (eg, to an attacker-controlled wallet).
 *
 * See verifyTransaction for more information on how transaction prebuilds are verified before signing.
 *
 * @param wallet {Wallet} wallet which is making the transaction
 * @param currentAddress {string} address to check for externality relative to v1 wallet base address
 */
function isMigratedAddress(wallet, currentAddress) {
    if (_.isString(wallet.migratedFrom()) && wallet.migratedFrom() === currentAddress) {
        debug('found address %s which was migrated from v1 wallet, address is not external', currentAddress);
        return true;
    }
    return false;
}
/**
 * Check to see if an address is derived from the given custom change keys
 * @param {VerifyCustomChangeAddressOptions} params
 * @return {boolean}
 */
function verifyCustomChangeAddress(params) {
    var coin = params.coin, customChangeKeys = params.customChangeKeys, addressType = params.addressType, addressDetails = params.addressDetails, currentAddress = params.currentAddress;
    try {
        return coin.verifyAddress(_.extend({ addressType: addressType }, addressDetails, {
            keychains: customChangeKeys,
            address: currentAddress,
        }));
    }
    catch (e) {
        debug('failed to verify custom change address %s', currentAddress);
        return false;
    }
}
function handleVerifyAddressError(_a) {
    var e = _a.e, currentAddress = _a.currentAddress, wallet = _a.wallet, txParams = _a.txParams, customChangeKeys = _a.customChangeKeys, coin = _a.coin, addressDetails = _a.addressDetails, addressType = _a.addressType;
    // Todo: name server-side errors to avoid message-based checking [BG-5124]
    var walletAddressNotFound = e.message.includes('wallet address not found');
    var unexpectedAddress = e instanceof errors.UnexpectedAddressError;
    if (walletAddressNotFound || unexpectedAddress) {
        if (unexpectedAddress && !walletAddressNotFound) {
            // check to see if this is a migrated v1 bch address - it could be internal
            var isMigrated = isMigratedAddress(wallet, currentAddress);
            if (isMigrated) {
                return { external: false };
            }
            debug('Address %s was found on wallet but could not be reconstructed', currentAddress);
            // attempt to verify address using custom change address keys if the wallet has that feature enabled
            if (customChangeKeys &&
                verifyCustomChangeAddress({ coin: coin, addressDetails: addressDetails, addressType: addressType, currentAddress: currentAddress, customChangeKeys: customChangeKeys })) {
                // address is valid against the custom change keys. Mark address as not external
                // and request signature verification for the custom change keys
                debug('Address %s verified as derived from the custom change keys', currentAddress);
                return { external: false, needsCustomChangeKeySignatureVerification: true };
            }
        }
        // the address was found, but not on the wallet, which simply means it's external
        debug('Address %s presumed external', currentAddress);
        return { external: true };
    }
    else if (e instanceof errors.InvalidAddressDerivationPropertyError && currentAddress === txParams.changeAddress) {
        // expect to see this error when passing in a custom changeAddress with no chain or index
        return { external: false };
    }
    debug('Address %s verification failed', currentAddress);
    /**
     * It might be a completely invalid address or a bad validation attempt or something else completely, in
     * which case we do not proceed and rather rethrow the error, which is safer than assuming that the address
     * validation failed simply because it's external to the wallet.
     */
    throw e;
}
function fetchAddressDetails(_a) {
    var reqId = _a.reqId, disableNetworking = _a.disableNetworking, addressDetailsPrebuild = _a.addressDetailsPrebuild, addressDetailsVerification = _a.addressDetailsVerification, currentAddress = _a.currentAddress, wallet = _a.wallet;
    return __awaiter(this, void 0, void 0, function () {
        var addressDetails;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    addressDetails = _.extend({}, addressDetailsPrebuild, addressDetailsVerification);
                    debug('Locally available address %s details: %O', currentAddress, addressDetails);
                    if (!(_.isEmpty(addressDetails) && !disableNetworking)) return [3 /*break*/, 2];
                    return [4 /*yield*/, wallet.getAddress({ address: currentAddress, reqId: reqId })];
                case 1:
                    addressDetails = _b.sent();
                    debug('Downloaded address %s details: %O', currentAddress, addressDetails);
                    _b.label = 2;
                case 2: return [2 /*return*/, addressDetails];
            }
        });
    });
}
function parseOutput(_a) {
    var currentOutput = _a.currentOutput, coin = _a.coin, txPrebuild = _a.txPrebuild, verification = _a.verification, keychainArray = _a.keychainArray, wallet = _a.wallet, txParams = _a.txParams, customChange = _a.customChange, reqId = _a.reqId;
    return __awaiter(this, void 0, void 0, function () {
        var disableNetworking, currentAddress, addressDetailsPrebuild, addressDetailsVerification, currentAddressDetails, currentAddressType, addressDetails, e_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    disableNetworking = !!verification.disableNetworking;
                    currentAddress = currentOutput.address;
                    addressDetailsPrebuild = _.get(txPrebuild, "txInfo.walletAddressDetails." + currentAddress, {});
                    addressDetailsVerification = _.get(verification, "addresses." + currentAddress, {});
                    debug('Parsing address details for %s', currentAddress);
                    currentAddressDetails = undefined;
                    currentAddressType = undefined;
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, fetchAddressDetails({
                            reqId: reqId,
                            addressDetailsVerification: addressDetailsVerification,
                            addressDetailsPrebuild: addressDetailsPrebuild,
                            currentAddress: currentAddress,
                            disableNetworking: disableNetworking,
                            wallet: wallet,
                        })];
                case 2:
                    addressDetails = _b.sent();
                    // verify that the address is on the wallet. verifyAddress throws if
                    // it fails to correctly rederive the address, meaning it's external
                    currentAddressType = abstractUtxoCoin_1.AbstractUtxoCoin.inferAddressType(addressDetails) || undefined;
                    currentAddressDetails = addressDetails;
                    coin.verifyAddress(_.extend({ addressType: currentAddressType }, addressDetails, {
                        keychains: keychainArray,
                        address: currentAddress,
                    }));
                    debug('Address %s verification passed', currentAddress);
                    // verify address succeeded without throwing, so the address was
                    // correctly rederived from the wallet keychains, making it not external
                    return [2 /*return*/, _.extend({}, currentOutput, addressDetails, { external: false })];
                case 3:
                    e_1 = _b.sent();
                    debug('Address %s verification threw an error:', currentAddress, e_1);
                    return [2 /*return*/, _.extend({}, currentOutput, handleVerifyAddressError({
                            e: e_1,
                            coin: coin,
                            currentAddress: currentAddress,
                            wallet: wallet,
                            txParams: txParams,
                            customChangeKeys: customChange && customChange.keys,
                            addressDetails: currentAddressDetails,
                            addressType: currentAddressType,
                        }))];
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.parseOutput = parseOutput;
//# sourceMappingURL=data:application/json;base64,