"use strict";
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = require("../common");
var Bluebird = require("bluebird");
var _ = require("lodash");
var util_1 = require("./internal/util");
var co = Bluebird.coroutine;
var OwnerType;
(function (OwnerType) {
    OwnerType["WALLET"] = "wallet";
    OwnerType["ENTERPRISE"] = "enterprise";
})(OwnerType = exports.OwnerType || (exports.OwnerType = {}));
var State;
(function (State) {
    State["PENDING"] = "pending";
    State["AWAITING_SIGNATURE"] = "awaitingSignature";
    State["PENDING_BITGO_ADMIN_APPROVAL"] = "pendingBitGoAdminApproval";
    State["PENDING_ID_VERIFICATION"] = "pendingIdVerification";
    State["PENDING_CUSTODIAN_APPROVAL"] = "pendingCustodianApproval";
    State["PENDING_FINAL_APPROVAL"] = "pendingFinalApproval";
    State["APPROVED"] = "approved";
    State["PROCESSING"] = "processing";
    State["REJECTED"] = "rejected";
})(State = exports.State || (exports.State = {}));
var Type;
(function (Type) {
    Type["USER_CHANGE_REQUEST"] = "userChangeRequest";
    Type["TRANSACTION_REQUEST"] = "transactionRequest";
    Type["POLICY_RULE_REQUEST"] = "policyRuleRequest";
    Type["UPDATE_APPROVALS_REQUIRED_REQUEST"] = "updateApprovalsRequiredRequest";
})(Type = exports.Type || (exports.Type = {}));
var PendingApproval = /** @class */ (function () {
    function PendingApproval(bitgo, baseCoin, pendingApprovalData, wallet) {
        this.bitgo = bitgo;
        this.baseCoin = baseCoin;
        this.wallet = wallet;
        this._pendingApproval = pendingApprovalData;
    }
    /**
     * Get the id for this PendingApproval
     */
    PendingApproval.prototype.id = function () {
        return this._pendingApproval.id;
    };
    /**
     * Get the owner type (wallet or enterprise)
     * Pending approvals can be approved or modified by different scopes (depending on how they were created)
     * If a pending approval is owned by a wallet, then it can be approved by administrators of the wallet
     * If a pending approval is owned by an enterprise, then it can be approved by administrators of the enterprise
     */
    PendingApproval.prototype.ownerType = function () {
        if (this._pendingApproval.wallet) {
            return OwnerType.WALLET;
        }
        else if (this._pendingApproval.enterprise) {
            return OwnerType.ENTERPRISE;
        }
        else {
            throw new Error('unexpected pending approval owner: neither wallet nor enterprise was present');
        }
    };
    /**
     * Get the id of the wallet which is associated with this PendingApproval
     */
    PendingApproval.prototype.walletId = function () {
        return this._pendingApproval.wallet;
    };
    /**
     * Get the enterprise ID that is associated with this PendingApproval
     */
    PendingApproval.prototype.enterpriseId = function () {
        return this._pendingApproval.enterprise;
    };
    /**
     * Get the state of this PendingApproval
     */
    PendingApproval.prototype.state = function () {
        return this._pendingApproval.state;
    };
    /**
     * Get the id of the user that performed the action resulting in this PendingApproval
     */
    PendingApproval.prototype.creator = function () {
        return this._pendingApproval.creator;
    };
    /**
     * Get the type of the pending approval (what it approves)
     */
    PendingApproval.prototype.type = function () {
        if (!this._pendingApproval.info) {
            throw new Error('pending approval info is not available');
        }
        return this._pendingApproval.info.type;
    };
    /**
     * Get information about this PendingApproval
     */
    PendingApproval.prototype.info = function () {
        return this._pendingApproval.info;
    };
    /**
     * Get the number of approvals that are required for this PendingApproval to be approved.
     * Defaults to 1 if approvalsRequired doesn't exist on the object
     */
    PendingApproval.prototype.approvalsRequired = function () {
        return this._pendingApproval.approvalsRequired || 1;
    };
    /**
     * Generate a url for this PendingApproval for making requests to the server.
     * @param extra
     */
    PendingApproval.prototype.url = function (extra) {
        if (extra === void 0) { extra = ''; }
        return this.baseCoin.url('/pendingapprovals/' + this.id() + extra);
    };
    /**
     * Refetches this PendingApproval from the server and returns it.
     *
     * Note that this mutates the PendingApproval object in place.
     * @param params
     * @param callback
     */
    PendingApproval.prototype.get = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = self;
                        return [4 /*yield*/, self.bitgo.get(self.url()).result()];
                    case 1:
                        _a._pendingApproval = _b.sent();
                        return [2 /*return*/, self];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Helper function to ensure that self.wallet is set
     */
    PendingApproval.prototype.populateWallet = function () {
        var self = this;
        return co(function () {
            var transactionRequest, updatedWallet;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        transactionRequest = self.info().transactionRequest;
                        if (_.isUndefined(transactionRequest)) {
                            throw new Error('missing required object property transactionRequest');
                        }
                        if (!_.isUndefined(self.wallet)) return [3 /*break*/, 2];
                        return [4 /*yield*/, self.baseCoin.wallets().get({ id: transactionRequest.sourceWallet })];
                    case 1:
                        updatedWallet = _a.sent();
                        if (_.isUndefined(updatedWallet)) {
                            throw new Error('unexpected - unable to get wallet using sourcewallet');
                        }
                        self.wallet = updatedWallet;
                        _a.label = 2;
                    case 2:
                        if (self.wallet.id() !== transactionRequest.sourceWallet) {
                            throw new Error('unexpected source wallet for pending approval');
                        }
                        return [2 /*return*/];
                }
            });
        }).call(this);
    };
    /**
     * Sets this PendingApproval to an approved state
     */
    PendingApproval.prototype.approve = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            /*
             * Internal helper function to get the serialized transaction which is being approved
             */
            function getApprovalTransaction() {
                return co(function () {
                    var transaction;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!(self.type() === 'transactionRequest')) return [3 /*break*/, 3];
                                /*
                                 * If this is a request for approving a transaction, depending on whether this user has a private key to the wallet
                                 * (some admins may not have the spend permission), the transaction could either be rebroadcast as is, or it could
                                 * be reconstructed. It is preferable to reconstruct a tx in order to adhere to the latest network conditions
                                 * such as newer unspents, different fees, or a higher sequence id
                                 */
                                if (params.tx) {
                                    // the approval tx was reconstructed and explicitly specified - pass it through
                                    return [2 /*return*/, {
                                            txHex: params.tx,
                                        }];
                                }
                                transaction = _.get(self.info(), "transactionRequest.coinSpecific." + self.baseCoin.type);
                                // this user may not have spending privileges or a passphrase may not have been passed in
                                if (!canRecreateTransaction) {
                                    if (!_.isObject(transaction)) {
                                        throw new Error('there is neither an original transaction object nor can a new one be recreated');
                                    }
                                    return [2 /*return*/, transaction];
                                }
                                self.bitgo.setRequestTracer(reqId);
                                return [4 /*yield*/, self.populateWallet()];
                            case 1:
                                _a.sent();
                                return [4 /*yield*/, self.recreateAndSignTransaction(params)];
                            case 2: return [2 /*return*/, _a.sent()];
                            case 3: return [2 /*return*/];
                        }
                    });
                }).call(this);
            }
            /*
             * Internal helper function to prepare the approval payload and send it to bitgo
             */
            function sendApproval(transaction) {
                return co(function () {
                    var approvalParams;
                    return __generator(this, function (_a) {
                        approvalParams = { state: 'approved', otp: params.otp };
                        if (transaction) {
                            // if the transaction already has a half signed property, we take that directly
                            approvalParams.halfSigned = transaction.halfSigned || transaction;
                        }
                        self.bitgo.setRequestTracer(reqId);
                        return [2 /*return*/, self.bitgo
                                .put(self.url())
                                .send(approvalParams)
                                .result()
                                .nodeify(callback)];
                    });
                }).call(this);
            }
            var canRecreateTransaction, isColdWallet, isOFCWallet, reqId, approvalTransaction, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        common_1.validateParams(params, [], ['walletPassphrase', 'otp'], callback);
                        canRecreateTransaction = true;
                        isColdWallet = !!_.get(self.wallet, '_wallet.isCold');
                        isOFCWallet = self.baseCoin.getFamily() === 'ofc';
                        if (!params.xprv && !(params.walletPassphrase && !isColdWallet && !isOFCWallet)) {
                            canRecreateTransaction = false;
                        }
                        reqId = new util_1.RequestTracer();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, getApprovalTransaction()];
                    case 2:
                        approvalTransaction = _a.sent();
                        self.bitgo.setRequestTracer(reqId);
                        return [4 /*yield*/, sendApproval(approvalTransaction)];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4:
                        e_1 = _a.sent();
                        if (!canRecreateTransaction &&
                            (e_1.message.indexOf('could not find unspent output for input') !== -1 ||
                                e_1.message.indexOf('transaction conflicts with an existing transaction in the send queue') !== -1)) {
                            throw new Error('unspents expired, wallet passphrase or xprv required to recreate transaction');
                        }
                        throw e_1;
                    case 5: return [2 /*return*/];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    /**
     * Sets this PendingApproval to a rejected state
     * @param params
     * @param callback
     */
    PendingApproval.prototype.reject = function (params, callback) {
        if (params === void 0) { params = {}; }
        return this.bitgo
            .put(this.url())
            .send({ state: 'rejected' })
            .result()
            .nodeify(callback);
    };
    /**
     * Alias for PendingApproval.reject()
     *
     * @deprecated
     * @param params
     * @param callback
     */
    PendingApproval.prototype.cancel = function (params, callback) {
        if (params === void 0) { params = {}; }
        return this.reject(params, callback);
    };
    /**
     * Recreate a transaction for a pending approval to respond to updated network conditions
     * @param params
     * @param callback
     */
    PendingApproval.prototype.recreateAndSignTransaction = function (params, callback) {
        if (params === void 0) { params = {}; }
        var self = this;
        return co(function () {
            var transactionRequest, originalPrebuild, recipients, prebuildParams, _a, signedTransaction, originalParsedTransaction, recreatedParsedTransaction;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        transactionRequest = self.info().transactionRequest;
                        if (_.isUndefined(transactionRequest)) {
                            throw new Error('cannot recreate transaction without transaction request');
                        }
                        if (_.isUndefined(self.wallet)) {
                            throw new Error('cannot recreate transaction without wallet');
                        }
                        originalPrebuild = transactionRequest.coinSpecific[self.baseCoin.type];
                        recipients = transactionRequest.recipients;
                        prebuildParams = _.extend({}, params, { recipients: recipients }, transactionRequest.buildParams);
                        if (!_.isUndefined(originalPrebuild.hopTransaction)) {
                            prebuildParams.hop = true;
                        }
                        if (!!recipients.length) return [3 /*break*/, 2];
                        // no recipients - this is a consolidation transaction
                        _a = prebuildParams;
                        return [4 /*yield*/, self.bitgo
                                .post(self.wallet.url("/consolidateUnspents"))
                                .send(params)
                                .result()];
                    case 1:
                        // no recipients - this is a consolidation transaction
                        _a.prebuildTx = _b.sent();
                        delete prebuildParams.recipients;
                        _b.label = 2;
                    case 2: return [4 /*yield*/, self.wallet.prebuildAndSignTransaction(prebuildParams)];
                    case 3:
                        signedTransaction = _b.sent();
                        return [4 /*yield*/, self.baseCoin.parseTransaction({
                                txParams: prebuildParams,
                                wallet: self.wallet,
                                txPrebuild: originalPrebuild,
                            })];
                    case 4:
                        originalParsedTransaction = _b.sent();
                        return [4 /*yield*/, self.baseCoin.parseTransaction({
                                txParams: prebuildParams,
                                wallet: self.wallet,
                                txPrebuild: signedTransaction,
                            })];
                    case 5:
                        recreatedParsedTransaction = _b.sent();
                        if (_.isUndefined(recreatedParsedTransaction.implicitExternalSpendAmount)) {
                            return [2 /*return*/, signedTransaction];
                        }
                        if (!_.isFinite(recreatedParsedTransaction.implicitExternalSpendAmount)) {
                            throw new Error('implicit external spend amount could not be determined');
                        }
                        if (!_.isUndefined(originalParsedTransaction.implicitExternalSpendAmount) &&
                            recreatedParsedTransaction.implicitExternalSpendAmount > originalParsedTransaction.implicitExternalSpendAmount) {
                            throw new Error('recreated transaction is using a higher pay-as-you-go-fee');
                        }
                        return [2 /*return*/, signedTransaction];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    return PendingApproval;
}());
exports.PendingApproval = PendingApproval;
//# sourceMappingURL=data:application/json;base64,