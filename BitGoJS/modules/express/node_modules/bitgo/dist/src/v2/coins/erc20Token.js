"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @prettier
 */
var utxo_lib_1 = require("@bitgo/utxo-lib");
var Bluebird = require("bluebird");
var _ = require("lodash");
var eth_1 = require("./eth");
var util_1 = require("../internal/util");
var config = require("../../config");
var co = Bluebird.coroutine;
var Erc20Token = /** @class */ (function (_super) {
    __extends(Erc20Token, _super);
    function Erc20Token(bitgo, tokenConfig) {
        var _this = _super.call(this, bitgo) || this;
        _this.tokenConfig = tokenConfig;
        return _this;
    }
    Erc20Token.createTokenConstructor = function (config) {
        return function (bitgo) { return new Erc20Token(bitgo, config); };
    };
    Object.defineProperty(Erc20Token.prototype, "type", {
        get: function () {
            return this.tokenConfig.type;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Erc20Token.prototype, "name", {
        get: function () {
            return this.tokenConfig.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Erc20Token.prototype, "coin", {
        get: function () {
            return this.tokenConfig.coin;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Erc20Token.prototype, "network", {
        get: function () {
            return this.tokenConfig.network;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Erc20Token.prototype, "tokenContractAddress", {
        get: function () {
            return this.tokenConfig.tokenContractAddress;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Erc20Token.prototype, "decimalPlaces", {
        get: function () {
            return this.tokenConfig.decimalPlaces;
        },
        enumerable: true,
        configurable: true
    });
    Erc20Token.prototype.getChain = function () {
        return this.tokenConfig.type;
    };
    Erc20Token.prototype.getFullName = function () {
        return 'ERC20 Token';
    };
    Erc20Token.prototype.getBaseFactor = function () {
        return String(Math.pow(10, this.tokenConfig.decimalPlaces));
    };
    /**
     * Flag for sending value of 0
     * @returns {boolean} True if okay to send 0 value, false otherwise
     */
    Erc20Token.prototype.valuelessTransferAllowed = function () {
        return false;
    };
    /**
     * Flag for sending data along with transactions
     * @returns {boolean} True if okay to send tx data (ETH), false otherwise
     */
    Erc20Token.prototype.transactionDataAllowed = function () {
        return false;
    };
    /**
     * Builds a token recovery transaction without BitGo
     * @param params
     * @param params.userKey {String} [encrypted] xprv
     * @param params.backupKey {String} [encrypted] xprv or xpub if the xprv is held by a KRS providers
     * @param params.walletPassphrase {String} used to decrypt userKey and backupKey
     * @param params.walletContractAddress {String} the ETH address of the wallet contract
     * @param params.recoveryDestination {String} target address to send recovered funds to
     * @param params.krsProvider {String} necessary if backup key is held by KRS
     * @param callback
     */
    Erc20Token.prototype.recover = function (params, callback) {
        var self = this;
        return co(function recover() {
            var isKrsRecovery, userKey, backupKey, gasPrice, gasLimit, userPrv, backupKeyAddress, backupSigningKey, backupHDNode, backupPrv, backupHDNode, backupKeyNonce, result, backupKeyTxList, outgoingTxs, backupKeyBalance, txAmount, recipients, sequenceId, operationHash, signature, txInfo, sendMethodArgs, methodSignature, encodedArgs, sendData, tx, signedTx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (_.isUndefined(params.userKey)) {
                            throw new Error('missing userKey');
                        }
                        if (_.isUndefined(params.backupKey)) {
                            throw new Error('missing backupKey');
                        }
                        if (_.isUndefined(params.walletPassphrase)) {
                            throw new Error('missing wallet passphrase');
                        }
                        if (_.isUndefined(params.walletContractAddress) || !self.isValidAddress(params.walletContractAddress)) {
                            throw new Error('invalid walletContractAddress');
                        }
                        if (_.isUndefined(params.recoveryDestination) || !self.isValidAddress(params.recoveryDestination)) {
                            throw new Error('invalid recoveryDestination');
                        }
                        isKrsRecovery = params.backupKey.startsWith('xpub');
                        if (isKrsRecovery && params.krsProvider && _.isUndefined(config.krsProviders[params.krsProvider])) {
                            throw new Error('unknown key recovery service provider');
                        }
                        userKey = params.userKey.replace(/\s/g, '');
                        backupKey = params.backupKey.replace(/\s/g, '');
                        gasPrice = self.getRecoveryGasPrice();
                        gasLimit = self.getRecoveryGasLimit();
                        try {
                            userPrv = self.bitgo.decrypt({
                                input: userKey,
                                password: params.walletPassphrase,
                            });
                        }
                        catch (e) {
                            throw new Error("Error decrypting user keychain: " + e.message);
                        }
                        if (isKrsRecovery) {
                            backupHDNode = utxo_lib_1.HDNode.fromBase58(backupKey);
                            backupSigningKey = backupHDNode.getKey().getPublicKeyBuffer();
                            backupKeyAddress = "0x" + eth_1.optionalDeps.ethUtil.publicToAddress(backupSigningKey, true).toString('hex');
                        }
                        else {
                            backupPrv = void 0;
                            try {
                                backupPrv = self.bitgo.decrypt({
                                    input: backupKey,
                                    password: params.walletPassphrase,
                                });
                            }
                            catch (e) {
                                throw new Error("Error decrypting backup keychain: " + e.message);
                            }
                            backupHDNode = utxo_lib_1.HDNode.fromBase58(backupPrv);
                            backupSigningKey = backupHDNode.getKey().getPrivateKeyBuffer();
                            backupKeyAddress = "0x" + eth_1.optionalDeps.ethUtil.privateToAddress(backupSigningKey).toString('hex');
                        }
                        backupKeyNonce = 0;
                        return [4 /*yield*/, self.recoveryBlockchainExplorerQuery({
                                module: 'account',
                                action: 'txlist',
                                address: backupKeyAddress,
                            })];
                    case 1:
                        result = _a.sent();
                        backupKeyTxList = result.result;
                        if (backupKeyTxList.length > 0) {
                            outgoingTxs = backupKeyTxList.filter(function (tx) { return tx.from === backupKeyAddress; });
                            backupKeyNonce = outgoingTxs.length;
                        }
                        return [4 /*yield*/, self.queryAddressBalance(backupKeyAddress)];
                    case 2:
                        backupKeyBalance = _a.sent();
                        if (backupKeyBalance.lt(gasPrice.mul(gasLimit))) {
                            throw new Error("Backup key address " + backupKeyAddress + " has balance " + backupKeyBalance.toString(10) + ". This address must have a balance of at least 0.01 ETH to perform recoveries");
                        }
                        return [4 /*yield*/, self.queryAddressTokenBalance(self.tokenContractAddress, params.walletContractAddress)];
                    case 3:
                        txAmount = _a.sent();
                        recipients = [
                            {
                                address: params.recoveryDestination,
                                amount: txAmount.toString(10),
                            },
                        ];
                        return [4 /*yield*/, self.querySequenceId(params.walletContractAddress)];
                    case 4:
                        sequenceId = _a.sent();
                        operationHash = self.getOperationSha3ForExecuteAndConfirm(recipients, self.getDefaultExpireTime(), sequenceId);
                        signature = util_1.Util.ethSignMsgHash(operationHash, util_1.Util.xprvToEthPrivateKey(userPrv));
                        try {
                            util_1.Util.ecRecoverEthAddress(operationHash, signature);
                        }
                        catch (e) {
                            throw new Error('Invalid signature');
                        }
                        txInfo = {
                            recipient: recipients[0],
                            expireTime: self.getDefaultExpireTime(),
                            contractSequenceId: sequenceId,
                            signature: signature,
                            gasLimit: gasLimit.toString(10),
                        };
                        sendMethodArgs = self.getSendMethodArgs(txInfo);
                        methodSignature = eth_1.optionalDeps.ethAbi.methodID('sendMultiSigToken', _.map(sendMethodArgs, 'type'));
                        encodedArgs = eth_1.optionalDeps.ethAbi.rawEncode(_.map(sendMethodArgs, 'type'), _.map(sendMethodArgs, 'value'));
                        sendData = Buffer.concat([methodSignature, encodedArgs]);
                        tx = new eth_1.optionalDeps.EthTx({
                            to: params.walletContractAddress,
                            nonce: backupKeyNonce,
                            value: 0,
                            gasPrice: gasPrice,
                            gasLimit: gasLimit,
                            data: sendData,
                            spendAmount: txAmount,
                        });
                        if (!isKrsRecovery) {
                            tx.sign(backupSigningKey);
                        }
                        signedTx = {
                            id: eth_1.optionalDeps.ethUtil.bufferToHex(tx.hash(true)),
                            tx: tx.serialize().toString('hex'),
                        };
                        if (isKrsRecovery) {
                            signedTx.backupKey = backupKey;
                            signedTx.coin = 'erc20';
                        }
                        return [2 /*return*/, signedTx];
                }
            });
        })
            .call(this)
            .asCallback(callback);
    };
    Erc20Token.prototype.getOperation = function (recipient, expireTime, contractSequenceId) {
        return [
            ['string', 'address', 'uint', 'address', 'uint', 'uint'],
            [
                'ERC20',
                new eth_1.optionalDeps.ethUtil.BN(eth_1.optionalDeps.ethUtil.stripHexPrefix(recipient.address), 16),
                recipient.amount,
                new eth_1.optionalDeps.ethUtil.BN(eth_1.optionalDeps.ethUtil.stripHexPrefix(this.tokenContractAddress), 16),
                expireTime,
                contractSequenceId,
            ],
        ];
    };
    Erc20Token.prototype.getSendMethodArgs = function (txInfo) {
        // Method signature is
        // sendMultiSigToken(address toAddress, uint value, address tokenContractAddress, uint expireTime, uint sequenceId, bytes signature)
        return [
            {
                name: 'toAddress',
                type: 'address',
                value: txInfo.recipient.address,
            },
            {
                name: 'value',
                type: 'uint',
                value: txInfo.recipient.amount,
            },
            {
                name: 'tokenContractAddress',
                type: 'address',
                value: this.tokenContractAddress,
            },
            {
                name: 'expireTime',
                type: 'uint',
                value: txInfo.expireTime,
            },
            {
                name: 'sequenceId',
                type: 'uint',
                value: txInfo.contractSequenceId,
            },
            {
                name: 'signature',
                type: 'bytes',
                value: eth_1.optionalDeps.ethUtil.toBuffer(txInfo.signature),
            },
        ];
    };
    return Erc20Token;
}(eth_1.Eth));
exports.Erc20Token = Erc20Token;
//# sourceMappingURL=data:application/json;base64,