"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var btc_1 = require("./btc");
var bitcoin = require("@bitgo/utxo-lib");
var Bluebird = require("bluebird");
var co = Bluebird.coroutine;
var common = require("../../common");
var errors = require("../../errors");
var request = require('superagent');
var Btg = /** @class */ (function (_super) {
    __extends(Btg, _super);
    function Btg(bitgo, network) {
        return _super.call(this, bitgo, network || bitcoin.networks.bitcoingold) || this;
    }
    Btg.createInstance = function (bitgo) {
        return new Btg(bitgo);
    };
    Btg.prototype.getChain = function () {
        return 'btg';
    };
    Btg.prototype.getFamily = function () {
        return 'btg';
    };
    Btg.prototype.getFullName = function () {
        return 'Bitcoin Gold';
    };
    Btg.prototype.supportsBlockTarget = function () {
        return false;
    };
    Btg.prototype.supportsP2shP2wsh = function () {
        return true;
    };
    Btg.prototype.supportsP2wsh = function () {
        return true;
    };
    /**
     *
     * @param txBuilder
     * @returns {*}
     */
    Btg.prototype.prepareTransactionBuilder = function (txBuilder) {
        txBuilder.setVersion(2);
        return txBuilder;
    };
    Object.defineProperty(Btg.prototype, "defaultSigHashType", {
        /**
         *
         * @returns {number}
         */
        get: function () {
            return bitcoin.Transaction.SIGHASH_ALL | bitcoin.Transaction.SIGHASH_BITCOINCASHBIP143;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Calculate the hash to verify the signature against
     * @param transaction Transaction object
     * @param inputIndex
     * @param pubScript
     * @param amount The previous output's amount
     * @param hashType
     * @param isSegwitInput
     * @returns {*}
     */
    Btg.prototype.calculateSignatureHash = function (transaction, inputIndex, pubScript, amount, hashType, isSegwitInput) {
        return transaction.hashForGoldSignature(inputIndex, pubScript, amount, hashType, isSegwitInput);
    };
    Btg.prototype.recoveryBlockchainExplorerUrl = function (url) {
        var baseUrl = common.Environments[this.bitgo.getEnv()].btgExplorerBaseUrl;
        if (!baseUrl) {
            throw new Error("Recoveries not supported for " + this.getChain() + " - no explorer available");
        }
        return common.Environments[this.bitgo.getEnv()].btgExplorerBaseUrl + url;
    };
    Btg.prototype.getAddressInfoFromExplorer = function (addressBase58) {
        var self = this;
        return co(function getAddressInfoFromExplorer() {
            var addrInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, request.get(self.recoveryBlockchainExplorerUrl("/addr/" + addressBase58)).result()];
                    case 1:
                        addrInfo = _a.sent();
                        addrInfo.txCount = addrInfo.txApperances;
                        addrInfo.totalBalance = addrInfo.balanceSat;
                        return [2 /*return*/, addrInfo];
                }
            });
        }).call(this);
    };
    Btg.prototype.getUnspentInfoFromExplorer = function (addressBase58) {
        var self = this;
        return co(function getUnspentInfoFromExplorer() {
            var unspents;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, request.get(self.recoveryBlockchainExplorerUrl("/addr/" + addressBase58 + "/utxo")).result()];
                    case 1:
                        unspents = _a.sent();
                        unspents.forEach(function processUnspent(unspent) {
                            unspent.amount = unspent.satoshis;
                            unspent.n = unspent.vout;
                        });
                        return [2 /*return*/, unspents];
                }
            });
        }).call(this);
    };
    Btg.prototype.verifyRecoveryTransaction = function (txInfo) {
        return Bluebird.reject(new errors.MethodNotImplementedError());
    };
    return Btg;
}(btc_1.Btc));
exports.Btg = Btg;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnRnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3YyL2NvaW5zL2J0Zy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSw2QkFBNEI7QUFDNUIseUNBQTJDO0FBQzNDLG1DQUFxQztBQUNyQyxJQUFNLEVBQUUsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDO0FBQzlCLHFDQUF1QztBQUN2QyxxQ0FBdUM7QUFDdkMsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBRXRDO0lBQXlCLHVCQUFHO0lBQzFCLGFBQVksS0FBWSxFQUFFLE9BQWE7ZUFDckMsa0JBQU0sS0FBSyxFQUFFLE9BQU8sSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQztJQUN2RCxDQUFDO0lBRU0sa0JBQWMsR0FBckIsVUFBc0IsS0FBSztRQUN6QixPQUFPLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxzQkFBUSxHQUFSO1FBQ0UsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsdUJBQVMsR0FBVDtRQUNFLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVELHlCQUFXLEdBQVg7UUFDRSxPQUFPLGNBQWMsQ0FBQztJQUN4QixDQUFDO0lBRUQsaUNBQW1CLEdBQW5CO1FBQ0UsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsK0JBQWlCLEdBQWpCO1FBQ0UsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsMkJBQWEsR0FBYjtRQUNFLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCx1Q0FBeUIsR0FBekIsVUFBMEIsU0FBYztRQUN0QyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hCLE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFNRCxzQkFBSSxtQ0FBa0I7UUFKdEI7OztXQUdHO2FBQ0g7WUFDRSxPQUFPLE9BQU8sQ0FBQyxXQUFXLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMseUJBQXlCLENBQUM7UUFDekYsQ0FBQzs7O09BQUE7SUFFRDs7Ozs7Ozs7O09BU0c7SUFDSCxvQ0FBc0IsR0FBdEIsVUFBdUIsV0FBVyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxhQUFhO1FBQ3hGLE9BQU8sV0FBVyxDQUFDLG9CQUFvQixDQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUNsRyxDQUFDO0lBRUQsMkNBQTZCLEdBQTdCLFVBQThCLEdBQVc7UUFDdkMsSUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsa0JBQWtCLENBQUM7UUFFNUUsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNaLE1BQU0sSUFBSSxLQUFLLENBQUMsa0NBQWdDLElBQUksQ0FBQyxRQUFRLEVBQUUsNkJBQTBCLENBQUMsQ0FBQztTQUM1RjtRQUVELE9BQU8sTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsa0JBQWtCLEdBQUcsR0FBRyxDQUFDO0lBQzNFLENBQUM7SUFFRCx3Q0FBMEIsR0FBMUIsVUFBMkIsYUFBcUI7UUFDOUMsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLE9BQU8sRUFBRSxDQUFDLFNBQVUsMEJBQTBCOzs7OzRCQUMzQixxQkFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxXQUFTLGFBQWUsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUE7O3dCQUFuRyxRQUFRLEdBQUcsU0FBd0Y7d0JBRXpHLFFBQVEsQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQzt3QkFDekMsUUFBUSxDQUFDLFlBQVksR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDO3dCQUU1QyxzQkFBTyxRQUFRLEVBQUM7OztTQUNqQixDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hCLENBQUM7SUFFRCx3Q0FBMEIsR0FBMUIsVUFBMkIsYUFBcUI7UUFDOUMsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLE9BQU8sRUFBRSxDQUFDLFNBQVUsMEJBQTBCOzs7OzRCQUMzQixxQkFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxXQUFTLGFBQWEsVUFBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBQTs7d0JBQXhHLFFBQVEsR0FBRyxTQUE2Rjt3QkFFOUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxTQUFTLGNBQWMsQ0FBQyxPQUFPOzRCQUM5QyxPQUFPLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUM7NEJBQ2xDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQzt3QkFDM0IsQ0FBQyxDQUFDLENBQUM7d0JBRUgsc0JBQU8sUUFBUSxFQUFDOzs7U0FDakIsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoQixDQUFDO0lBRUQsdUNBQXlCLEdBQXpCLFVBQTBCLE1BQXdDO1FBQ2hFLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyx5QkFBeUIsRUFBRSxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUNILFVBQUM7QUFBRCxDQUFDLEFBeEdELENBQXlCLFNBQUcsR0F3RzNCO0FBeEdZLGtCQUFHIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQml0R28gfSBmcm9tICcuLi8uLi9iaXRnbyc7XG5pbXBvcnQge0Jhc2VDb2luLCBWZXJpZnlSZWNvdmVyeVRyYW5zYWN0aW9uT3B0aW9uc30gZnJvbSAnLi4vYmFzZUNvaW4nO1xuaW1wb3J0IHsgQnRjIH0gZnJvbSAnLi9idGMnO1xuaW1wb3J0ICogYXMgYml0Y29pbiBmcm9tICdAYml0Z28vdXR4by1saWInO1xuaW1wb3J0ICogYXMgQmx1ZWJpcmQgZnJvbSAnYmx1ZWJpcmQnO1xuY29uc3QgY28gPSBCbHVlYmlyZC5jb3JvdXRpbmU7XG5pbXBvcnQgKiBhcyBjb21tb24gZnJvbSAnLi4vLi4vY29tbW9uJztcbmltcG9ydCAqIGFzIGVycm9ycyBmcm9tIFwiLi4vLi4vZXJyb3JzXCI7XG5jb25zdCByZXF1ZXN0ID0gcmVxdWlyZSgnc3VwZXJhZ2VudCcpO1xuXG5leHBvcnQgY2xhc3MgQnRnIGV4dGVuZHMgQnRjIHtcbiAgY29uc3RydWN0b3IoYml0Z286IEJpdEdvLCBuZXR3b3JrPzogYW55KSB7XG4gICAgc3VwZXIoYml0Z28sIG5ldHdvcmsgfHwgYml0Y29pbi5uZXR3b3Jrcy5iaXRjb2luZ29sZCk7XG4gIH1cblxuICBzdGF0aWMgY3JlYXRlSW5zdGFuY2UoYml0Z28pOiBCYXNlQ29pbiB7XG4gICAgcmV0dXJuIG5ldyBCdGcoYml0Z28pO1xuICB9XG5cbiAgZ2V0Q2hhaW4oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gJ2J0Zyc7XG4gIH1cblxuICBnZXRGYW1pbHkoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gJ2J0Zyc7XG4gIH1cblxuICBnZXRGdWxsTmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiAnQml0Y29pbiBHb2xkJztcbiAgfVxuXG4gIHN1cHBvcnRzQmxvY2tUYXJnZXQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3VwcG9ydHNQMnNoUDJ3c2goKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBzdXBwb3J0c1Ayd3NoKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB0eEJ1aWxkZXJcbiAgICogQHJldHVybnMgeyp9XG4gICAqL1xuICBwcmVwYXJlVHJhbnNhY3Rpb25CdWlsZGVyKHR4QnVpbGRlcjogYW55KTogYW55IHtcbiAgICB0eEJ1aWxkZXIuc2V0VmVyc2lvbigyKTtcbiAgICByZXR1cm4gdHhCdWlsZGVyO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgZGVmYXVsdFNpZ0hhc2hUeXBlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIGJpdGNvaW4uVHJhbnNhY3Rpb24uU0lHSEFTSF9BTEwgfCBiaXRjb2luLlRyYW5zYWN0aW9uLlNJR0hBU0hfQklUQ09JTkNBU0hCSVAxNDM7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSBoYXNoIHRvIHZlcmlmeSB0aGUgc2lnbmF0dXJlIGFnYWluc3RcbiAgICogQHBhcmFtIHRyYW5zYWN0aW9uIFRyYW5zYWN0aW9uIG9iamVjdFxuICAgKiBAcGFyYW0gaW5wdXRJbmRleFxuICAgKiBAcGFyYW0gcHViU2NyaXB0XG4gICAqIEBwYXJhbSBhbW91bnQgVGhlIHByZXZpb3VzIG91dHB1dCdzIGFtb3VudFxuICAgKiBAcGFyYW0gaGFzaFR5cGVcbiAgICogQHBhcmFtIGlzU2Vnd2l0SW5wdXRcbiAgICogQHJldHVybnMgeyp9XG4gICAqL1xuICBjYWxjdWxhdGVTaWduYXR1cmVIYXNoKHRyYW5zYWN0aW9uLCBpbnB1dEluZGV4LCBwdWJTY3JpcHQsIGFtb3VudCwgaGFzaFR5cGUsIGlzU2Vnd2l0SW5wdXQpOiBCdWZmZXIge1xuICAgIHJldHVybiB0cmFuc2FjdGlvbi5oYXNoRm9yR29sZFNpZ25hdHVyZShpbnB1dEluZGV4LCBwdWJTY3JpcHQsIGFtb3VudCwgaGFzaFR5cGUsIGlzU2Vnd2l0SW5wdXQpO1xuICB9XG5cbiAgcmVjb3ZlcnlCbG9ja2NoYWluRXhwbG9yZXJVcmwodXJsOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IGJhc2VVcmwgPSBjb21tb24uRW52aXJvbm1lbnRzW3RoaXMuYml0Z28uZ2V0RW52KCldLmJ0Z0V4cGxvcmVyQmFzZVVybDtcblxuICAgIGlmICghYmFzZVVybCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBSZWNvdmVyaWVzIG5vdCBzdXBwb3J0ZWQgZm9yICR7dGhpcy5nZXRDaGFpbigpfSAtIG5vIGV4cGxvcmVyIGF2YWlsYWJsZWApO1xuICAgIH1cblxuICAgIHJldHVybiBjb21tb24uRW52aXJvbm1lbnRzW3RoaXMuYml0Z28uZ2V0RW52KCldLmJ0Z0V4cGxvcmVyQmFzZVVybCArIHVybDtcbiAgfVxuXG4gIGdldEFkZHJlc3NJbmZvRnJvbUV4cGxvcmVyKGFkZHJlc3NCYXNlNTg6IHN0cmluZyk6IEJsdWViaXJkPGFueT4ge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiBjbyhmdW5jdGlvbiAqZ2V0QWRkcmVzc0luZm9Gcm9tRXhwbG9yZXIoKSB7XG4gICAgICBjb25zdCBhZGRySW5mbyA9IHlpZWxkIHJlcXVlc3QuZ2V0KHNlbGYucmVjb3ZlcnlCbG9ja2NoYWluRXhwbG9yZXJVcmwoYC9hZGRyLyR7YWRkcmVzc0Jhc2U1OH1gKSkucmVzdWx0KCk7XG5cbiAgICAgIGFkZHJJbmZvLnR4Q291bnQgPSBhZGRySW5mby50eEFwcGVyYW5jZXM7XG4gICAgICBhZGRySW5mby50b3RhbEJhbGFuY2UgPSBhZGRySW5mby5iYWxhbmNlU2F0O1xuXG4gICAgICByZXR1cm4gYWRkckluZm87XG4gICAgfSkuY2FsbCh0aGlzKTtcbiAgfVxuXG4gIGdldFVuc3BlbnRJbmZvRnJvbUV4cGxvcmVyKGFkZHJlc3NCYXNlNTg6IHN0cmluZyk6IEJsdWViaXJkPGFueT4ge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiBjbyhmdW5jdGlvbiAqZ2V0VW5zcGVudEluZm9Gcm9tRXhwbG9yZXIoKSB7XG4gICAgICBjb25zdCB1bnNwZW50cyA9IHlpZWxkIHJlcXVlc3QuZ2V0KHNlbGYucmVjb3ZlcnlCbG9ja2NoYWluRXhwbG9yZXJVcmwoYC9hZGRyLyR7YWRkcmVzc0Jhc2U1OH0vdXR4b2ApKS5yZXN1bHQoKTtcblxuICAgICAgdW5zcGVudHMuZm9yRWFjaChmdW5jdGlvbiBwcm9jZXNzVW5zcGVudCh1bnNwZW50KSB7XG4gICAgICAgIHVuc3BlbnQuYW1vdW50ID0gdW5zcGVudC5zYXRvc2hpcztcbiAgICAgICAgdW5zcGVudC5uID0gdW5zcGVudC52b3V0O1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiB1bnNwZW50cztcbiAgICB9KS5jYWxsKHRoaXMpO1xuICB9XG5cbiAgdmVyaWZ5UmVjb3ZlcnlUcmFuc2FjdGlvbih0eEluZm86IFZlcmlmeVJlY292ZXJ5VHJhbnNhY3Rpb25PcHRpb25zKTogQmx1ZWJpcmQ8YW55PiB7XG4gICAgcmV0dXJuIEJsdWViaXJkLnJlamVjdChuZXcgZXJyb3JzLk1ldGhvZE5vdEltcGxlbWVudGVkRXJyb3IoKSk7XG4gIH1cbn1cbiJdfQ==