"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var algosdk_1 = require("algosdk");
var stellar = require("stellar-sdk");
var _ = require("lodash");
var statics_1 = require("@bitgo/statics");
var account_lib_1 = require("@bitgo/account-lib");
/**
 * This classes intention is to guess/verify what seeds come from where.
 */
var SeedValidator = /** @class */ (function () {
    function SeedValidator() {
    }
    /**
     * Try to guess what kind of seed this could be
     * @param seed
     * @returns {string} - returns undefined if the coin type is undetectable. returns
     * the coin family otherwise.
     */
    SeedValidator.getCoinFamilyFromSeed = function (seed) {
        var coin = undefined;
        // if this can be implemented in more than one competing seed format, that could be an issue
        if (!SeedValidator.hasCompetingSeedFormats(seed)) {
            // ordering generally matters here - hbar is the least permissive for seed checking, algo and
            // stellar have checksums. coin is guaranteed to be mutually exclusive by the
            // competing seed format check
            if (algosdk_1.isValidSeed(seed))
                coin = statics_1.CoinFamily.ALGO;
            if (stellar.StrKey.isValidEd25519SecretSeed(seed))
                coin = statics_1.CoinFamily.XLM;
            if (SeedValidator.isValidHbarSeedFormat(seed))
                coin = statics_1.CoinFamily.HBAR;
        }
        return coin;
    };
    /**
     * Checks whether this is a valid seed for this coin family type.
     * @param seed - seed
     * @param coinFamily - the coinFamily of the coin we're working with
     */
    SeedValidator.isValidEd25519SeedForCoin = function (seed, coinFamily) {
        var guessedCoin = SeedValidator.getCoinFamilyFromSeed(seed);
        return coinFamily === guessedCoin;
    };
    /**
     * We need to ensure there is no overlap for any two seeds we put into this function. This functions
     * intention is for gating whether this seed could possibly match two formats or is invalid itself.
     * @param seed
     */
    SeedValidator.hasCompetingSeedFormats = function (seed) {
        var isAlgoSeed = algosdk_1.isValidSeed(seed);
        var isStellarSeed = stellar.StrKey.isValidEd25519SecretSeed(seed);
        var isHbarSeed = SeedValidator.isValidHbarSeedFormat(seed);
        return _.sum([isAlgoSeed, isStellarSeed, isHbarSeed]) !== 1;
    };
    /**
     * Checks if this is a valid Hbar prv. These can be encoded differently.
     * @param seed
     */
    SeedValidator.isValidHbarSeedFormat = function (seed) {
        try {
            account_lib_1.Hbar.Utils.createRawKey(seed);
        }
        catch (_a) {
            return false;
        }
        return true;
    };
    return SeedValidator;
}());
exports.SeedValidator = SeedValidator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VlZFZhbGlkYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy92Mi9pbnRlcm5hbC9zZWVkVmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQXlEO0FBQ3pELHFDQUF1QztBQUN2QywwQkFBNEI7QUFDNUIsMENBQTRDO0FBQzVDLGtEQUEwQztBQUUxQzs7R0FFRztBQUNIO0lBQUE7SUE2REEsQ0FBQztJQTNEQzs7Ozs7T0FLRztJQUNJLG1DQUFxQixHQUE1QixVQUE2QixJQUFZO1FBQ3ZDLElBQUksSUFBSSxHQUEyQixTQUFTLENBQUM7UUFFN0MsNEZBQTRGO1FBQzVGLElBQUksQ0FBQyxhQUFhLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDaEQsNkZBQTZGO1lBQzdGLDZFQUE2RTtZQUM3RSw4QkFBOEI7WUFFOUIsSUFBSSxxQkFBZSxDQUFDLElBQUksQ0FBQztnQkFBRSxJQUFJLEdBQUcsb0JBQVUsQ0FBQyxJQUFJLENBQUM7WUFDbEQsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQztnQkFBRSxJQUFJLEdBQUcsb0JBQVUsQ0FBQyxHQUFHLENBQUM7WUFDekUsSUFBSSxhQUFhLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDO2dCQUFFLElBQUksR0FBRyxvQkFBVSxDQUFDLElBQUksQ0FBQztTQUN2RTtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSx1Q0FBeUIsR0FBaEMsVUFBaUMsSUFBWSxFQUFFLFVBQXNCO1FBQ25FLElBQU0sV0FBVyxHQUFHLGFBQWEsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5RCxPQUFPLFVBQVUsS0FBSyxXQUFXLENBQUM7SUFDcEMsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxxQ0FBdUIsR0FBOUIsVUFBK0IsSUFBWTtRQUN6QyxJQUFNLFVBQVUsR0FBRyxxQkFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pDLElBQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEUsSUFBTSxVQUFVLEdBQUcsYUFBYSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTdELE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsRUFBRSxhQUFhLEVBQUUsVUFBVSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVEOzs7T0FHRztJQUNJLG1DQUFxQixHQUE1QixVQUE2QixJQUFZO1FBQ3ZDLElBQUk7WUFDRixrQkFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDL0I7UUFBQyxXQUFNO1lBQ04sT0FBTyxLQUFLLENBQUM7U0FDZDtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVILG9CQUFDO0FBQUQsQ0FBQyxBQTdERCxJQTZEQztBQTdEWSxzQ0FBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzVmFsaWRTZWVkIGFzIEFsZ29Jc1ZhbGlkU2VlZCB9IGZyb20gJ2FsZ29zZGsnO1xuaW1wb3J0ICogYXMgc3RlbGxhciBmcm9tICdzdGVsbGFyLXNkayc7XG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBDb2luRmFtaWx5IH0gZnJvbSAnQGJpdGdvL3N0YXRpY3MnO1xuaW1wb3J0IHsgSGJhciB9IGZyb20gJ0BiaXRnby9hY2NvdW50LWxpYic7XG5cbi8qKlxuICogVGhpcyBjbGFzc2VzIGludGVudGlvbiBpcyB0byBndWVzcy92ZXJpZnkgd2hhdCBzZWVkcyBjb21lIGZyb20gd2hlcmUuXG4gKi9cbmV4cG9ydCBjbGFzcyBTZWVkVmFsaWRhdG9yIHtcblxuICAvKipcbiAgICogVHJ5IHRvIGd1ZXNzIHdoYXQga2luZCBvZiBzZWVkIHRoaXMgY291bGQgYmVcbiAgICogQHBhcmFtIHNlZWRcbiAgICogQHJldHVybnMge3N0cmluZ30gLSByZXR1cm5zIHVuZGVmaW5lZCBpZiB0aGUgY29pbiB0eXBlIGlzIHVuZGV0ZWN0YWJsZS4gcmV0dXJuc1xuICAgKiB0aGUgY29pbiBmYW1pbHkgb3RoZXJ3aXNlLlxuICAgKi9cbiAgc3RhdGljIGdldENvaW5GYW1pbHlGcm9tU2VlZChzZWVkOiBzdHJpbmcpOiBDb2luRmFtaWx5IHwgdW5kZWZpbmVkIHtcbiAgICBsZXQgY29pbjogQ29pbkZhbWlseSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuICAgIC8vIGlmIHRoaXMgY2FuIGJlIGltcGxlbWVudGVkIGluIG1vcmUgdGhhbiBvbmUgY29tcGV0aW5nIHNlZWQgZm9ybWF0LCB0aGF0IGNvdWxkIGJlIGFuIGlzc3VlXG4gICAgaWYgKCFTZWVkVmFsaWRhdG9yLmhhc0NvbXBldGluZ1NlZWRGb3JtYXRzKHNlZWQpKSB7XG4gICAgICAvLyBvcmRlcmluZyBnZW5lcmFsbHkgbWF0dGVycyBoZXJlIC0gaGJhciBpcyB0aGUgbGVhc3QgcGVybWlzc2l2ZSBmb3Igc2VlZCBjaGVja2luZywgYWxnbyBhbmRcbiAgICAgIC8vIHN0ZWxsYXIgaGF2ZSBjaGVja3N1bXMuIGNvaW4gaXMgZ3VhcmFudGVlZCB0byBiZSBtdXR1YWxseSBleGNsdXNpdmUgYnkgdGhlXG4gICAgICAvLyBjb21wZXRpbmcgc2VlZCBmb3JtYXQgY2hlY2tcblxuICAgICAgaWYgKEFsZ29Jc1ZhbGlkU2VlZChzZWVkKSkgY29pbiA9IENvaW5GYW1pbHkuQUxHTztcbiAgICAgIGlmIChzdGVsbGFyLlN0cktleS5pc1ZhbGlkRWQyNTUxOVNlY3JldFNlZWQoc2VlZCkpIGNvaW4gPSBDb2luRmFtaWx5LlhMTTtcbiAgICAgIGlmIChTZWVkVmFsaWRhdG9yLmlzVmFsaWRIYmFyU2VlZEZvcm1hdChzZWVkKSkgY29pbiA9IENvaW5GYW1pbHkuSEJBUjtcbiAgICB9XG5cbiAgICByZXR1cm4gY29pbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3Mgd2hldGhlciB0aGlzIGlzIGEgdmFsaWQgc2VlZCBmb3IgdGhpcyBjb2luIGZhbWlseSB0eXBlLlxuICAgKiBAcGFyYW0gc2VlZCAtIHNlZWRcbiAgICogQHBhcmFtIGNvaW5GYW1pbHkgLSB0aGUgY29pbkZhbWlseSBvZiB0aGUgY29pbiB3ZSdyZSB3b3JraW5nIHdpdGhcbiAgICovXG4gIHN0YXRpYyBpc1ZhbGlkRWQyNTUxOVNlZWRGb3JDb2luKHNlZWQ6IHN0cmluZywgY29pbkZhbWlseTogQ29pbkZhbWlseSk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGd1ZXNzZWRDb2luID0gU2VlZFZhbGlkYXRvci5nZXRDb2luRmFtaWx5RnJvbVNlZWQoc2VlZCk7XG4gICAgcmV0dXJuIGNvaW5GYW1pbHkgPT09IGd1ZXNzZWRDb2luO1xuICB9XG5cbiAgLyoqXG4gICAqIFdlIG5lZWQgdG8gZW5zdXJlIHRoZXJlIGlzIG5vIG92ZXJsYXAgZm9yIGFueSB0d28gc2VlZHMgd2UgcHV0IGludG8gdGhpcyBmdW5jdGlvbi4gVGhpcyBmdW5jdGlvbnNcbiAgICogaW50ZW50aW9uIGlzIGZvciBnYXRpbmcgd2hldGhlciB0aGlzIHNlZWQgY291bGQgcG9zc2libHkgbWF0Y2ggdHdvIGZvcm1hdHMgb3IgaXMgaW52YWxpZCBpdHNlbGYuXG4gICAqIEBwYXJhbSBzZWVkXG4gICAqL1xuICBzdGF0aWMgaGFzQ29tcGV0aW5nU2VlZEZvcm1hdHMoc2VlZDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgY29uc3QgaXNBbGdvU2VlZCA9IEFsZ29Jc1ZhbGlkU2VlZChzZWVkKTtcbiAgICBjb25zdCBpc1N0ZWxsYXJTZWVkID0gc3RlbGxhci5TdHJLZXkuaXNWYWxpZEVkMjU1MTlTZWNyZXRTZWVkKHNlZWQpO1xuICAgIGNvbnN0IGlzSGJhclNlZWQgPSBTZWVkVmFsaWRhdG9yLmlzVmFsaWRIYmFyU2VlZEZvcm1hdChzZWVkKTtcblxuICAgIHJldHVybiBfLnN1bShbaXNBbGdvU2VlZCwgaXNTdGVsbGFyU2VlZCwgaXNIYmFyU2VlZF0pICE9PSAxO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGlzIGlzIGEgdmFsaWQgSGJhciBwcnYuIFRoZXNlIGNhbiBiZSBlbmNvZGVkIGRpZmZlcmVudGx5LlxuICAgKiBAcGFyYW0gc2VlZFxuICAgKi9cbiAgc3RhdGljIGlzVmFsaWRIYmFyU2VlZEZvcm1hdChzZWVkOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICB0cnkge1xuICAgICAgSGJhci5VdGlscy5jcmVhdGVSYXdLZXkoc2VlZCk7XG4gICAgfSBjYXRjaCB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbn1cbiJdfQ==