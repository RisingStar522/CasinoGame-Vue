"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var bch_1 = require("./bch");
var bitcoin = require("@bitgo/utxo-lib");
var request = require('superagent');
var Bluebird = require("bluebird");
var co = Bluebird.coroutine;
var common = require("../../common");
var errors = require("../../errors");
var blockchairApi_1 = require("../recovery/blockchairApi");
var Bsv = /** @class */ (function (_super) {
    __extends(Bsv, _super);
    function Bsv(bitgo, network) {
        return _super.call(this, bitgo, network || bitcoin.networks.bitcoinsv) || this;
    }
    Bsv.createInstance = function (bitgo) {
        return new Bsv(bitgo);
    };
    Bsv.prototype.getChain = function () {
        return 'bsv';
    };
    Bsv.prototype.getFamily = function () {
        return 'bsv';
    };
    Bsv.prototype.getFullName = function () {
        return 'Bitcoin SV';
    };
    Bsv.prototype.recoveryBlockchainExplorerUrl = function (url) {
        var baseUrl = common.Environments[this.bitgo.getEnv()].bsvExplorerBaseUrl;
        // TODO BG-9989: There is no explorer api for Bitcoin SV yet. Once we have one, add it to src/common.js and update
        // this method.
        if (!baseUrl) {
            throw new errors.WalletRecoveryUnsupported("Recoveries not supported for " + this.getChain() + " - no explorer available");
        }
        return common.Environments[this.bitgo.getEnv()].bsvExplorerBaseUrl + url;
    };
    Bsv.prototype.getAddressInfoFromExplorer = function (addressBase58, apiKey) {
        var explorer = new blockchairApi_1.BlockchairApi(this.bitgo, 'bitcoin-sv', apiKey);
        return Bluebird.resolve(explorer.getAccountInfo(addressBase58));
    };
    Bsv.prototype.getUnspentInfoFromExplorer = function (addressBase58, apiKey) {
        var explorer = new blockchairApi_1.BlockchairApi(this.bitgo, 'bitcoin-sv', apiKey);
        return Bluebird.resolve(explorer.getUnspents(addressBase58));
    };
    return Bsv;
}(bch_1.Bch));
exports.Bsv = Bsv;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnN2LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3YyL2NvaW5zL2Jzdi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFJQSw2QkFBNEI7QUFDNUIseUNBQTJDO0FBQzNDLElBQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUN0QyxtQ0FBcUM7QUFHckMsSUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQztBQUM5QixxQ0FBdUM7QUFDdkMscUNBQXVDO0FBQ3ZDLDJEQUEwRDtBQUUxRDtJQUF5Qix1QkFBRztJQUMxQixhQUFZLEtBQVksRUFBRSxPQUFxQjtlQUM3QyxrQkFBTSxLQUFLLEVBQUUsT0FBTyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDO0lBQ3JELENBQUM7SUFFTSxrQkFBYyxHQUFyQixVQUFzQixLQUFZO1FBQ2hDLE9BQU8sSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUVELHNCQUFRLEdBQVI7UUFDRSxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCx1QkFBUyxHQUFUO1FBQ0UsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQseUJBQVcsR0FBWDtRQUNFLE9BQU8sWUFBWSxDQUFDO0lBQ3RCLENBQUM7SUFFRCwyQ0FBNkIsR0FBN0IsVUFBOEIsR0FBVztRQUN2QyxJQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQztRQUU1RSxrSEFBa0g7UUFDbEgsZUFBZTtRQUNmLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDWixNQUFNLElBQUksTUFBTSxDQUFDLHlCQUF5QixDQUN4QyxrQ0FBZ0MsSUFBSSxDQUFDLFFBQVEsRUFBRSw2QkFBMEIsQ0FDMUUsQ0FBQztTQUNIO1FBRUQsT0FBTyxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxrQkFBa0IsR0FBRyxHQUFHLENBQUM7SUFDM0UsQ0FBQztJQUVELHdDQUEwQixHQUExQixVQUEyQixhQUFxQixFQUFFLE1BQWU7UUFDL0QsSUFBTSxRQUFRLEdBQUcsSUFBSSw2QkFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3JFLE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUVELHdDQUEwQixHQUExQixVQUEyQixhQUFxQixFQUFFLE1BQWU7UUFDL0QsSUFBTSxRQUFRLEdBQUcsSUFBSSw2QkFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3JFLE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUNILFVBQUM7QUFBRCxDQUFDLEFBNUNELENBQXlCLFNBQUcsR0E0QzNCO0FBNUNZLGtCQUFHIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcHJldHRpZXJcbiAqL1xuaW1wb3J0IHsgQml0R28gfSBmcm9tICcuLi8uLi9iaXRnbyc7XG5pbXBvcnQgeyBCY2ggfSBmcm9tICcuL2JjaCc7XG5pbXBvcnQgKiBhcyBiaXRjb2luIGZyb20gJ0BiaXRnby91dHhvLWxpYic7XG5jb25zdCByZXF1ZXN0ID0gcmVxdWlyZSgnc3VwZXJhZ2VudCcpO1xuaW1wb3J0ICogYXMgQmx1ZWJpcmQgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHsgQmFzZUNvaW4gfSBmcm9tICcuLi9iYXNlQ29pbic7XG5pbXBvcnQgeyBBZGRyZXNzSW5mbywgVW5zcGVudEluZm8sIFV0eG9OZXR3b3JrIH0gZnJvbSAnLi9hYnN0cmFjdFV0eG9Db2luJztcbmNvbnN0IGNvID0gQmx1ZWJpcmQuY29yb3V0aW5lO1xuaW1wb3J0ICogYXMgY29tbW9uIGZyb20gJy4uLy4uL2NvbW1vbic7XG5pbXBvcnQgKiBhcyBlcnJvcnMgZnJvbSAnLi4vLi4vZXJyb3JzJztcbmltcG9ydCB7IEJsb2NrY2hhaXJBcGkgfSBmcm9tICcuLi9yZWNvdmVyeS9ibG9ja2NoYWlyQXBpJztcblxuZXhwb3J0IGNsYXNzIEJzdiBleHRlbmRzIEJjaCB7XG4gIGNvbnN0cnVjdG9yKGJpdGdvOiBCaXRHbywgbmV0d29yaz86IFV0eG9OZXR3b3JrKSB7XG4gICAgc3VwZXIoYml0Z28sIG5ldHdvcmsgfHwgYml0Y29pbi5uZXR3b3Jrcy5iaXRjb2luc3YpO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZUluc3RhbmNlKGJpdGdvOiBCaXRHbyk6IEJhc2VDb2luIHtcbiAgICByZXR1cm4gbmV3IEJzdihiaXRnbyk7XG4gIH1cblxuICBnZXRDaGFpbigpOiBzdHJpbmcge1xuICAgIHJldHVybiAnYnN2JztcbiAgfVxuXG4gIGdldEZhbWlseSgpOiBzdHJpbmcge1xuICAgIHJldHVybiAnYnN2JztcbiAgfVxuXG4gIGdldEZ1bGxOYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICdCaXRjb2luIFNWJztcbiAgfVxuXG4gIHJlY292ZXJ5QmxvY2tjaGFpbkV4cGxvcmVyVXJsKHVybDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBiYXNlVXJsID0gY29tbW9uLkVudmlyb25tZW50c1t0aGlzLmJpdGdvLmdldEVudigpXS5ic3ZFeHBsb3JlckJhc2VVcmw7XG5cbiAgICAvLyBUT0RPIEJHLTk5ODk6IFRoZXJlIGlzIG5vIGV4cGxvcmVyIGFwaSBmb3IgQml0Y29pbiBTViB5ZXQuIE9uY2Ugd2UgaGF2ZSBvbmUsIGFkZCBpdCB0byBzcmMvY29tbW9uLmpzIGFuZCB1cGRhdGVcbiAgICAvLyB0aGlzIG1ldGhvZC5cbiAgICBpZiAoIWJhc2VVcmwpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuV2FsbGV0UmVjb3ZlcnlVbnN1cHBvcnRlZChcbiAgICAgICAgYFJlY292ZXJpZXMgbm90IHN1cHBvcnRlZCBmb3IgJHt0aGlzLmdldENoYWluKCl9IC0gbm8gZXhwbG9yZXIgYXZhaWxhYmxlYFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29tbW9uLkVudmlyb25tZW50c1t0aGlzLmJpdGdvLmdldEVudigpXS5ic3ZFeHBsb3JlckJhc2VVcmwgKyB1cmw7XG4gIH1cblxuICBnZXRBZGRyZXNzSW5mb0Zyb21FeHBsb3JlcihhZGRyZXNzQmFzZTU4OiBzdHJpbmcsIGFwaUtleT86IHN0cmluZyk6IEJsdWViaXJkPEFkZHJlc3NJbmZvPiB7XG4gICAgY29uc3QgZXhwbG9yZXIgPSBuZXcgQmxvY2tjaGFpckFwaSh0aGlzLmJpdGdvLCAnYml0Y29pbi1zdicsIGFwaUtleSk7XG4gICAgcmV0dXJuIEJsdWViaXJkLnJlc29sdmUoZXhwbG9yZXIuZ2V0QWNjb3VudEluZm8oYWRkcmVzc0Jhc2U1OCkpO1xuICB9XG5cbiAgZ2V0VW5zcGVudEluZm9Gcm9tRXhwbG9yZXIoYWRkcmVzc0Jhc2U1ODogc3RyaW5nLCBhcGlLZXk/OiBzdHJpbmcpOiBCbHVlYmlyZDxVbnNwZW50SW5mb1tdPiB7XG4gICAgY29uc3QgZXhwbG9yZXIgPSBuZXcgQmxvY2tjaGFpckFwaSh0aGlzLmJpdGdvLCAnYml0Y29pbi1zdicsIGFwaUtleSk7XG4gICAgcmV0dXJuIEJsdWViaXJkLnJlc29sdmUoZXhwbG9yZXIuZ2V0VW5zcGVudHMoYWRkcmVzc0Jhc2U1OCkpO1xuICB9XG59XG4iXX0=