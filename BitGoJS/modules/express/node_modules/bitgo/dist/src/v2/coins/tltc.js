"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ltc_1 = require("./ltc");
var bitcoin = require("@bitgo/utxo-lib");
var Tltc = /** @class */ (function (_super) {
    __extends(Tltc, _super);
    function Tltc(bitgo) {
        var _this = 
        // TODO: move to @bitgo/utxo-lib (BG-6821)
        _super.call(this, bitgo, {
            magic: 0xd9b4bef9,
            messagePrefix: '\x19Litecoin Signed Message:\n',
            bip32: {
                public: 0x0488b21e,
                private: 0x0488ade4,
            },
            bech32: 'tltc',
            pubKeyHash: 0x6f,
            scriptHash: 0x3a,
            wif: 0xb0,
            dustThreshold: 0,
            dustSoftThreshold: 100000,
            feePerKb: 100000,
            coin: 'ltc',
        }) || this;
        _this.altScriptHash = bitcoin.networks.testnet.scriptHash;
        // support alt destinations on test
        _this.supportAltScriptDestination = false;
        return _this;
    }
    Tltc.createInstance = function (bitgo) {
        return new Tltc(bitgo);
    };
    Tltc.prototype.getChain = function () {
        return 'tltc';
    };
    Tltc.prototype.getFullName = function () {
        return 'Testnet Litecoin';
    };
    return Tltc;
}(ltc_1.Ltc));
exports.Tltc = Tltc;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGx0Yy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy92Mi9jb2lucy90bHRjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUtBLDZCQUE0QjtBQUM1Qix5Q0FBMkM7QUFFM0M7SUFBMEIsd0JBQUc7SUFDM0IsY0FBWSxLQUFZO1FBQXhCO1FBQ0UsMENBQTBDO1FBQzFDLGtCQUFNLEtBQUssRUFBRTtZQUNYLEtBQUssRUFBRSxVQUFVO1lBQ2pCLGFBQWEsRUFBRSxnQ0FBZ0M7WUFDL0MsS0FBSyxFQUFFO2dCQUNMLE1BQU0sRUFBRSxVQUFVO2dCQUNsQixPQUFPLEVBQUUsVUFBVTthQUNwQjtZQUNELE1BQU0sRUFBRSxNQUFNO1lBQ2QsVUFBVSxFQUFFLElBQUk7WUFDaEIsVUFBVSxFQUFFLElBQUk7WUFDaEIsR0FBRyxFQUFFLElBQUk7WUFDVCxhQUFhLEVBQUUsQ0FBQztZQUNoQixpQkFBaUIsRUFBRSxNQUFNO1lBQ3pCLFFBQVEsRUFBRSxNQUFNO1lBQ2hCLElBQUksRUFBRSxLQUFLO1NBQ1osQ0FBQyxTQUlIO1FBSEMsS0FBSSxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7UUFDekQsbUNBQW1DO1FBQ25DLEtBQUksQ0FBQywyQkFBMkIsR0FBRyxLQUFLLENBQUM7O0lBQzNDLENBQUM7SUFFTSxtQkFBYyxHQUFyQixVQUFzQixLQUFZO1FBQ2hDLE9BQU8sSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUVELHVCQUFRLEdBQVI7UUFDRSxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQsMEJBQVcsR0FBWDtRQUNFLE9BQU8sa0JBQWtCLENBQUM7SUFDNUIsQ0FBQztJQUNILFdBQUM7QUFBRCxDQUFDLEFBbkNELENBQTBCLFNBQUcsR0FtQzVCO0FBbkNZLG9CQUFJIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcHJldHRpZXJcbiAqL1xuaW1wb3J0IHsgQml0R28gfSBmcm9tICcuLi8uLi9iaXRnbyc7XG5pbXBvcnQgeyBCYXNlQ29pbiB9IGZyb20gJy4uL2Jhc2VDb2luJztcbmltcG9ydCB7IEx0YyB9IGZyb20gJy4vbHRjJztcbmltcG9ydCAqIGFzIGJpdGNvaW4gZnJvbSAnQGJpdGdvL3V0eG8tbGliJztcblxuZXhwb3J0IGNsYXNzIFRsdGMgZXh0ZW5kcyBMdGMge1xuICBjb25zdHJ1Y3RvcihiaXRnbzogQml0R28pIHtcbiAgICAvLyBUT0RPOiBtb3ZlIHRvIEBiaXRnby91dHhvLWxpYiAoQkctNjgyMSlcbiAgICBzdXBlcihiaXRnbywge1xuICAgICAgbWFnaWM6IDB4ZDliNGJlZjksXG4gICAgICBtZXNzYWdlUHJlZml4OiAnXFx4MTlMaXRlY29pbiBTaWduZWQgTWVzc2FnZTpcXG4nLFxuICAgICAgYmlwMzI6IHtcbiAgICAgICAgcHVibGljOiAweDA0ODhiMjFlLFxuICAgICAgICBwcml2YXRlOiAweDA0ODhhZGU0LFxuICAgICAgfSxcbiAgICAgIGJlY2gzMjogJ3RsdGMnLFxuICAgICAgcHViS2V5SGFzaDogMHg2ZixcbiAgICAgIHNjcmlwdEhhc2g6IDB4M2EsXG4gICAgICB3aWY6IDB4YjAsXG4gICAgICBkdXN0VGhyZXNob2xkOiAwLCAvLyBodHRwczovL2dpdGh1Yi5jb20vbGl0ZWNvaW4tcHJvamVjdC9saXRlY29pbi9ibG9iL3YwLjguNy4yL3NyYy9tYWluLmNwcCNMMzYwLUwzNjVcbiAgICAgIGR1c3RTb2Z0VGhyZXNob2xkOiAxMDAwMDAsIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9saXRlY29pbi1wcm9qZWN0L2xpdGVjb2luL2Jsb2IvdjAuOC43LjIvc3JjL21haW4uaCNMNTNcbiAgICAgIGZlZVBlcktiOiAxMDAwMDAsIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9saXRlY29pbi1wcm9qZWN0L2xpdGVjb2luL2Jsb2IvdjAuOC43LjIvc3JjL21haW4uY3BwI0w1NlxuICAgICAgY29pbjogJ2x0YycsXG4gICAgfSk7XG4gICAgdGhpcy5hbHRTY3JpcHRIYXNoID0gYml0Y29pbi5uZXR3b3Jrcy50ZXN0bmV0LnNjcmlwdEhhc2g7XG4gICAgLy8gc3VwcG9ydCBhbHQgZGVzdGluYXRpb25zIG9uIHRlc3RcbiAgICB0aGlzLnN1cHBvcnRBbHRTY3JpcHREZXN0aW5hdGlvbiA9IGZhbHNlO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZUluc3RhbmNlKGJpdGdvOiBCaXRHbyk6IEJhc2VDb2luIHtcbiAgICByZXR1cm4gbmV3IFRsdGMoYml0Z28pO1xuICB9XG5cbiAgZ2V0Q2hhaW4oKSB7XG4gICAgcmV0dXJuICd0bHRjJztcbiAgfVxuXG4gIGdldEZ1bGxOYW1lKCkge1xuICAgIHJldHVybiAnVGVzdG5ldCBMaXRlY29pbic7XG4gIH1cbn1cbiJdfQ==