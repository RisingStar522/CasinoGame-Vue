"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var errors_1 = require("../../errors");
var abstractUtxoCoin_1 = require("./abstractUtxoCoin");
var common = require("../../common");
var bitcoin = require("@bitgo/utxo-lib");
var request = require("superagent");
var _ = require("lodash");
var Bluebird = require("bluebird");
var blockstreamApi_1 = require("../recovery/blockstreamApi");
var blockchairApi_1 = require("../recovery/blockchairApi");
var co = Bluebird.coroutine;
var Btc = /** @class */ (function (_super) {
    __extends(Btc, _super);
    function Btc(bitgo, network) {
        return _super.call(this, bitgo, network || bitcoin.networks.bitcoin) || this;
    }
    Btc.createInstance = function (bitgo) {
        return new Btc(bitgo);
    };
    Btc.prototype.getChain = function () {
        return 'btc';
    };
    Btc.prototype.getFamily = function () {
        return 'btc';
    };
    Btc.prototype.getFullName = function () {
        return 'Bitcoin';
    };
    Btc.prototype.supportsBlockTarget = function () {
        return true;
    };
    Btc.prototype.supportsP2shP2wsh = function () {
        return true;
    };
    Btc.prototype.supportsP2wsh = function () {
        return true;
    };
    Btc.prototype.getRecoveryFeePerBytes = function () {
        var self = this;
        return co(function getRecoveryFeePerBytes() {
            var recoveryFeeUrl, publicFeeDataReq, publicFeeData, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, self.getRecoveryFeeRecommendationApiBaseUrl()];
                    case 1:
                        recoveryFeeUrl = _a.sent();
                        publicFeeDataReq = request.get(recoveryFeeUrl);
                        publicFeeDataReq.forceV1Auth = true;
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, publicFeeDataReq.result()];
                    case 3:
                        publicFeeData = _a.sent();
                        if (publicFeeData && publicFeeData.hourFee && _.isInteger(publicFeeData.hourFee)) {
                            return [2 /*return*/, publicFeeData.hourFee];
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        e_1 = _a.sent();
                        // if bitcoinfees does not respond, we would resort to the default fee value, 100
                        // but we don't want to block the recovery process
                        console.dir(e_1);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/, 100];
                }
            });
        }).call(this);
    };
    Btc.prototype.getRecoveryFeeRecommendationApiBaseUrl = function () {
        return Bluebird.resolve('https://bitcoinfees.earn.com/api/v1/fees/recommended');
    };
    Btc.prototype.recoveryBlockchainExplorerUrl = function (url) {
        return blockchairApi_1.BlockchairApi.getBaseUrl(this.bitgo.getEnv(), 'bitcoin');
    };
    Btc.prototype.getAddressInfoFromExplorer = function (addressBase58, apiKey) {
        // TODO: allow users to choose the API to use
        var api = new blockstreamApi_1.BlockstreamApi(this.bitgo, apiKey);
        return Bluebird.resolve(api.getAccountInfo(addressBase58));
    };
    Btc.prototype.getUnspentInfoFromExplorer = function (addressBase58, apiKey) {
        // TODO: allow users to choose the API to use
        var api = new blockstreamApi_1.BlockstreamApi(this.bitgo, apiKey);
        return Bluebird.resolve(api.getUnspents(addressBase58));
    };
    /**
     * Verify that the txhex user signs correspond to the correct tx they intended
     * by 1) getting back the decoded transaction based on the txhex
     * and then 2) compute the txid (hash), h1 of the decoded transaction 3) compare h1
     * to the txid (hash) of the transaction (including unspent info) we constructed
     * @param {TransactionInfo} txInfo
     * @returns {Bluebird<any>}
     */
    Btc.prototype.verifyRecoveryTransaction = function (txInfo) {
        var self = this;
        return co(function verifyRecoveryTransaction() {
            var smartbitURL, res, e_2, transactionDetails, tx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        smartbitURL = common.Environments[this.bitgo.getEnv()].smartbitBaseUrl + '/blockchain/decodetx';
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, request.post(smartbitURL)
                                .send({ hex: txInfo.transactionHex })
                                .result()];
                    case 2:
                        res = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_2 = _a.sent();
                        if (e_2 || !res) { // if smartbit fails to respond
                            throw new errors_1.BlockExplorerUnavailable(e_2);
                        }
                        return [3 /*break*/, 4];
                    case 4:
                        /**
                         * Smartbit's response when something goes wrong
                         * {"success":false,"error":{"code":"REQ_ERROR","message":"TX decode failed"}}
                         * we should process the error message here
                         * interpret the res from smartbit
                         */
                        if (!res.success) {
                            throw new Error(res.error.message);
                        }
                        transactionDetails = res.transaction;
                        tx = bitcoin.Transaction.fromHex(txInfo.transactionHex, this.network);
                        if (transactionDetails.TxId !== tx.getId()) {
                            console.log('txhash/txid returned by blockexplorer: ', transactionDetails.TxId);
                            console.log('txhash/txid of the transaction bitgo constructed', tx.getId());
                            throw new Error('inconsistent recovery transaction id');
                        }
                        return [2 /*return*/, transactionDetails];
                }
            });
        }).call(this);
    };
    return Btc;
}(abstractUtxoCoin_1.AbstractUtxoCoin));
exports.Btc = Btc;
//# sourceMappingURL=data:application/json;base64,