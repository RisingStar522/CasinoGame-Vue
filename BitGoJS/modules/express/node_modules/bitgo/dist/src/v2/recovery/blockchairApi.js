"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var request = require("superagent");
var BlockchairCoin = [
    'bitcoin',
    'bitcoin-sv',
    'bitcoin-cash',
];
var devBase = ['dev', 'latest', 'local', 'localNonSecure', 'adminDev', 'adminLatest'];
var testnetBase = ['test', 'adminTest'];
var mainnetBase = ['prod', 'staging', 'adminProd'];
var BlockchairApi = /** @class */ (function () {
    function BlockchairApi(bitgo, coin, apiToken) {
        if (!BlockchairCoin.includes(coin)) {
            throw new Error("coin " + coin + " not supported by blockchair");
        }
        this.bitgo = bitgo;
        this.coin = coin;
        this.apiToken = apiToken;
    }
    BlockchairApi.getBaseUrl = function (env, coin) {
        var url;
        if (mainnetBase.includes(env)) {
            url = "https://api.blockchair.com/" + coin;
        }
        else if (testnetBase.includes(env) || devBase.includes((env))) {
            url = "https://api.blockchair.com/" + coin + "/testnet";
        }
        else if (env === 'mock') {
            url = 'https://api.blockchair.fakeurl/${coin}/testnet';
        }
        else {
            throw new Error("Environment " + env + " unsupported");
        }
        return url;
    };
    /** @inheritdoc */
    BlockchairApi.prototype.getExplorerUrl = function (query) {
        var env = this.bitgo.getEnv();
        var baseUrl = BlockchairApi.getBaseUrl(env, this.coin);
        if (this.apiToken) {
            return baseUrl + query + ("?key=" + this.apiToken);
        }
        return baseUrl + query;
    };
    /** @inheritDoc */
    BlockchairApi.prototype.getAccountInfo = function (address) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // we are using blockchair api: https://blockchair.com/api/docs#link_300
                        // https://api.blockchair.com/{:btc_chain}/dashboards/address/{:address}₀
                        if (!address || address.length === 0) {
                            throw new Error('invalid address');
                        }
                        return [4 /*yield*/, request.get(this.getExplorerUrl("/dashboards/address/" + address))];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, {
                                txCount: response.body.data[address].address.transaction_count,
                                totalBalance: response.body.data[address].address.balance,
                            }];
                }
            });
        });
    };
    /** @inheritDoc */
    BlockchairApi.prototype.getUnspents = function (address) {
        return __awaiter(this, void 0, void 0, function () {
            var response, rawUnspents;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // using blockchair api: https://blockchair.com/api/docs#link_300
                        // https://api.blockchair.com/{:btc_chain}/dashboards/address/{:address}₀
                        // example utxo from response:
                        // {block_id":-1,"transaction_hash":"cf5bcd42c688cb7c55b5811645e7f0d2a000a85564ca3d6b9fc20f57e14b30bb","index":1,"value":558},
                        if (!address || address.length === 0) {
                            throw new Error('invalid address');
                        }
                        return [4 /*yield*/, request.get(this.getExplorerUrl("/dashboards/address/" + address))];
                    case 1:
                        response = _a.sent();
                        rawUnspents = response.body.data[address].utxo;
                        return [2 /*return*/, rawUnspents.map(function (unspent) {
                                return {
                                    amount: unspent.value,
                                    n: unspent.index,
                                    txid: unspent.transaction_hash,
                                    address: address,
                                };
                            })];
                }
            });
        });
    };
    return BlockchairApi;
}());
exports.BlockchairApi = BlockchairApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2tjaGFpckFwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy92Mi9yZWNvdmVyeS9ibG9ja2NoYWlyQXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSxvQ0FBc0M7QUFHdEMsSUFBTSxjQUFjLEdBQUc7SUFDckIsU0FBUztJQUNULFlBQVk7SUFDWixjQUFjO0NBQ2YsQ0FBQztBQUVGLElBQU0sT0FBTyxHQUFHLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBQ3hGLElBQU0sV0FBVyxHQUFHLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQzFDLElBQU0sV0FBVyxHQUFHLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztBQUVyRDtJQU1FLHVCQUFZLEtBQVksRUFBRSxJQUFZLEVBQUUsUUFBaUI7UUFDdkQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDbEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxVQUFRLElBQUksaUNBQThCLENBQUMsQ0FBQztTQUM3RDtRQUNELElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUM7SUFFTyx3QkFBVSxHQUFqQixVQUFrQixHQUFXLEVBQUUsSUFBWTtRQUMxQyxJQUFJLEdBQUcsQ0FBQztRQUNSLElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUM3QixHQUFHLEdBQUcsZ0NBQThCLElBQU0sQ0FBQztTQUM1QzthQUFNLElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtZQUMvRCxHQUFHLEdBQUcsZ0NBQThCLElBQUksYUFBVSxDQUFDO1NBQ3BEO2FBQU0sSUFBSSxHQUFHLEtBQUssTUFBTSxFQUFFO1lBQ3pCLEdBQUcsR0FBRyxnREFBZ0QsQ0FBQztTQUN4RDthQUFNO1lBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQkFBZSxHQUFHLGlCQUFjLENBQUMsQ0FBQztTQUNuRDtRQUNELE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUVELGtCQUFrQjtJQUNsQixzQ0FBYyxHQUFkLFVBQWUsS0FBYTtRQUMxQixJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2hDLElBQU0sT0FBTyxHQUFHLGFBQWEsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV6RCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsT0FBTyxPQUFPLEdBQUcsS0FBSyxJQUFHLFVBQVEsSUFBSSxDQUFDLFFBQVUsQ0FBQSxDQUFDO1NBQ2xEO1FBQ0QsT0FBTyxPQUFPLEdBQUcsS0FBSyxDQUFDO0lBQ3pCLENBQUM7SUFFRCxrQkFBa0I7SUFDWixzQ0FBYyxHQUFwQixVQUFxQixPQUFlOzs7Ozs7d0JBQ2xDLHdFQUF3RTt3QkFDeEUseUVBQXlFO3dCQUN6RSxJQUFHLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFOzRCQUNuQyxNQUFNLElBQUksS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUM7eUJBQ3BDO3dCQUNnQixxQkFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMseUJBQXVCLE9BQVMsQ0FBQyxDQUFDLEVBQUE7O3dCQUFuRixRQUFRLEdBQUcsU0FBd0U7d0JBQ3pGLHNCQUFPO2dDQUNMLE9BQU8sRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsaUJBQWlCO2dDQUM5RCxZQUFZLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU87NkJBQzFELEVBQUM7Ozs7S0FDSDtJQUVELGtCQUFrQjtJQUNaLG1DQUFXLEdBQWpCLFVBQWtCLE9BQWU7Ozs7Ozt3QkFDL0IsaUVBQWlFO3dCQUNqRSx5RUFBeUU7d0JBQ3pFLDhCQUE4Qjt3QkFDOUIsOEhBQThIO3dCQUM5SCxJQUFHLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFOzRCQUNuQyxNQUFNLElBQUksS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUM7eUJBQ3BDO3dCQUNnQixxQkFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMseUJBQXVCLE9BQVMsQ0FBQyxDQUFDLEVBQUE7O3dCQUFuRixRQUFRLEdBQUcsU0FBd0U7d0JBRW5GLFdBQVcsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUM7d0JBRXJELHNCQUFPLFdBQVcsQ0FBQyxHQUFHLENBQUMsVUFBQSxPQUFPO2dDQUM1QixPQUFPO29DQUNMLE1BQU0sRUFBRSxPQUFPLENBQUMsS0FBSztvQ0FDckIsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxLQUFLO29DQUNoQixJQUFJLEVBQUUsT0FBTyxDQUFDLGdCQUFnQjtvQ0FDOUIsT0FBTyxTQUFBO2lDQUNSLENBQUM7NEJBQ0osQ0FBQyxDQUFDLEVBQUM7Ozs7S0FDSjtJQUNILG9CQUFDO0FBQUQsQ0FBQyxBQTVFRCxJQTRFQztBQTVFWSxzQ0FBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlY292ZXJ5QWNjb3VudERhdGEsIFJlY292ZXJ5VW5zcGVudCwgUmVjb3ZlcnlQcm92aWRlciB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0ICogYXMgY29tbW9uIGZyb20gJy4uLy4uL2NvbW1vbic7XG5pbXBvcnQgKiBhcyByZXF1ZXN0IGZyb20gJ3N1cGVyYWdlbnQnO1xuaW1wb3J0IHsgQml0R28gfSBmcm9tICcuLi8uLi9iaXRnbyc7XG5cbmNvbnN0IEJsb2NrY2hhaXJDb2luID0gW1xuICAnYml0Y29pbicsXG4gICdiaXRjb2luLXN2JyxcbiAgJ2JpdGNvaW4tY2FzaCcsXG5dO1xuXG5jb25zdCBkZXZCYXNlID0gWydkZXYnLCAnbGF0ZXN0JywgJ2xvY2FsJywgJ2xvY2FsTm9uU2VjdXJlJywgJ2FkbWluRGV2JywgJ2FkbWluTGF0ZXN0J107XG5jb25zdCB0ZXN0bmV0QmFzZSA9IFsndGVzdCcsICdhZG1pblRlc3QnXTtcbmNvbnN0IG1haW5uZXRCYXNlID0gWydwcm9kJywgJ3N0YWdpbmcnLCAnYWRtaW5Qcm9kJ107XG5cbmV4cG9ydCBjbGFzcyBCbG9ja2NoYWlyQXBpIGltcGxlbWVudHMgUmVjb3ZlcnlQcm92aWRlciB7XG4gIHByb3RlY3RlZCByZWFkb25seSBiaXRnbzogQml0R287XG4gIHByb3RlY3RlZCByZWFkb25seSBhcGlUb2tlbj86IHN0cmluZztcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IGNvaW46IHN0cmluZztcblxuXG4gIGNvbnN0cnVjdG9yKGJpdGdvOiBCaXRHbywgY29pbjogc3RyaW5nLCBhcGlUb2tlbj86IHN0cmluZyApIHtcbiAgICBpZiAoIUJsb2NrY2hhaXJDb2luLmluY2x1ZGVzKGNvaW4pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYGNvaW4gJHtjb2lufSBub3Qgc3VwcG9ydGVkIGJ5IGJsb2NrY2hhaXJgKTtcbiAgICB9XG4gICAgdGhpcy5iaXRnbyA9IGJpdGdvO1xuICAgIHRoaXMuY29pbiA9IGNvaW47XG4gICAgdGhpcy5hcGlUb2tlbiA9IGFwaVRva2VuO1xuICB9XG5cbiAgIHN0YXRpYyBnZXRCYXNlVXJsKGVudjogc3RyaW5nLCBjb2luOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGxldCB1cmw7XG4gICAgaWYgKG1haW5uZXRCYXNlLmluY2x1ZGVzKGVudikpIHtcbiAgICAgIHVybCA9IGBodHRwczovL2FwaS5ibG9ja2NoYWlyLmNvbS8ke2NvaW59YDtcbiAgICB9IGVsc2UgaWYgKHRlc3RuZXRCYXNlLmluY2x1ZGVzKGVudikgfHwgZGV2QmFzZS5pbmNsdWRlcygoZW52KSkpIHtcbiAgICAgIHVybCA9IGBodHRwczovL2FwaS5ibG9ja2NoYWlyLmNvbS8ke2NvaW59L3Rlc3RuZXRgO1xuICAgIH0gZWxzZSBpZiAoZW52ID09PSAnbW9jaycpIHtcbiAgICAgIHVybCA9ICdodHRwczovL2FwaS5ibG9ja2NoYWlyLmZha2V1cmwvJHtjb2lufS90ZXN0bmV0JztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBFbnZpcm9ubWVudCAke2Vudn0gdW5zdXBwb3J0ZWRgKTtcbiAgICB9XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICBnZXRFeHBsb3JlclVybChxdWVyeTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBlbnYgPSB0aGlzLmJpdGdvLmdldEVudigpO1xuICAgIGNvbnN0IGJhc2VVcmwgPSBCbG9ja2NoYWlyQXBpLmdldEJhc2VVcmwoZW52LCB0aGlzLmNvaW4pO1xuXG4gICAgaWYgKHRoaXMuYXBpVG9rZW4pIHtcbiAgICAgIHJldHVybiBiYXNlVXJsICsgcXVlcnkgKyBgP2tleT0ke3RoaXMuYXBpVG9rZW59YDtcbiAgICB9XG4gICAgcmV0dXJuIGJhc2VVcmwgKyBxdWVyeTtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdERvYyAqL1xuICBhc3luYyBnZXRBY2NvdW50SW5mbyhhZGRyZXNzOiBzdHJpbmcpOiBQcm9taXNlPFJlY292ZXJ5QWNjb3VudERhdGE+IHtcbiAgICAvLyB3ZSBhcmUgdXNpbmcgYmxvY2tjaGFpciBhcGk6IGh0dHBzOi8vYmxvY2tjaGFpci5jb20vYXBpL2RvY3MjbGlua18zMDBcbiAgICAvLyBodHRwczovL2FwaS5ibG9ja2NoYWlyLmNvbS97OmJ0Y19jaGFpbn0vZGFzaGJvYXJkcy9hZGRyZXNzL3s6YWRkcmVzc33igoBcbiAgICBpZighYWRkcmVzcyB8fCBhZGRyZXNzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGFkZHJlc3MnKTtcbiAgICB9XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0LmdldCh0aGlzLmdldEV4cGxvcmVyVXJsKGAvZGFzaGJvYXJkcy9hZGRyZXNzLyR7YWRkcmVzc31gKSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR4Q291bnQ6IHJlc3BvbnNlLmJvZHkuZGF0YVthZGRyZXNzXS5hZGRyZXNzLnRyYW5zYWN0aW9uX2NvdW50LFxuICAgICAgdG90YWxCYWxhbmNlOiByZXNwb25zZS5ib2R5LmRhdGFbYWRkcmVzc10uYWRkcmVzcy5iYWxhbmNlLFxuICAgIH07XG4gIH1cblxuICAvKiogQGluaGVyaXREb2MgKi9cbiAgYXN5bmMgZ2V0VW5zcGVudHMoYWRkcmVzczogc3RyaW5nKTogUHJvbWlzZTxSZWNvdmVyeVVuc3BlbnRbXT4ge1xuICAgIC8vIHVzaW5nIGJsb2NrY2hhaXIgYXBpOiBodHRwczovL2Jsb2NrY2hhaXIuY29tL2FwaS9kb2NzI2xpbmtfMzAwXG4gICAgLy8gaHR0cHM6Ly9hcGkuYmxvY2tjaGFpci5jb20vezpidGNfY2hhaW59L2Rhc2hib2FyZHMvYWRkcmVzcy97OmFkZHJlc3N94oKAXG4gICAgLy8gZXhhbXBsZSB1dHhvIGZyb20gcmVzcG9uc2U6XG4gICAgLy8ge2Jsb2NrX2lkXCI6LTEsXCJ0cmFuc2FjdGlvbl9oYXNoXCI6XCJjZjViY2Q0MmM2ODhjYjdjNTViNTgxMTY0NWU3ZjBkMmEwMDBhODU1NjRjYTNkNmI5ZmMyMGY1N2UxNGIzMGJiXCIsXCJpbmRleFwiOjEsXCJ2YWx1ZVwiOjU1OH0sXG4gICAgaWYoIWFkZHJlc3MgfHwgYWRkcmVzcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBhZGRyZXNzJyk7XG4gICAgfVxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdC5nZXQodGhpcy5nZXRFeHBsb3JlclVybChgL2Rhc2hib2FyZHMvYWRkcmVzcy8ke2FkZHJlc3N9YCkpO1xuXG4gICAgY29uc3QgcmF3VW5zcGVudHMgPSByZXNwb25zZS5ib2R5LmRhdGFbYWRkcmVzc10udXR4bztcblxuICAgIHJldHVybiByYXdVbnNwZW50cy5tYXAodW5zcGVudCA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBhbW91bnQ6IHVuc3BlbnQudmFsdWUsXG4gICAgICAgIG46IHVuc3BlbnQuaW5kZXgsXG4gICAgICAgIHR4aWQ6IHVuc3BlbnQudHJhbnNhY3Rpb25faGFzaCxcbiAgICAgICAgYWRkcmVzcyxcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==