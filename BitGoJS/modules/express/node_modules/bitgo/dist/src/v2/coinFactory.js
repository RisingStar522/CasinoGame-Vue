"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @prettier
 */
var statics_1 = require("@bitgo/statics");
var coins_1 = require("./coins");
var config_1 = require("../config");
var errors = require("../errors");
var CoinFactory = /** @class */ (function () {
    function CoinFactory() {
        this.coinConstructors = new Map();
    }
    /**
     *
     * @param bitgo
     * @param name
     * @throws CoinNotDefinedError
     * @throws UnsupportedCoinError
     */
    CoinFactory.prototype.getInstance = function (bitgo, name) {
        var staticsCoin;
        try {
            staticsCoin = statics_1.coins.get(name);
        }
        catch (e) {
            if (!(e instanceof statics_1.CoinNotDefinedError)) {
                throw e;
            }
        }
        var constructor = this.coinConstructors.get(name);
        if (constructor) {
            return constructor(bitgo, staticsCoin);
        }
        var ethConstructor = this.coinConstructors.get('eth');
        if (ethConstructor) {
            var ethCoin = ethConstructor(bitgo, staticsCoin);
            if (ethCoin.isValidAddress(name)) {
                var unknownTokenConstructor = coins_1.Erc20Token.createTokenConstructor({
                    type: 'unknown',
                    coin: 'eth',
                    network: 'Mainnet',
                    name: 'Unknown',
                    tokenContractAddress: name,
                    decimalPlaces: 0,
                });
                return unknownTokenConstructor(bitgo);
            }
        }
        throw new errors.UnsupportedCoinError(name);
    };
    CoinFactory.prototype.registerCoinConstructor = function (name, constructor) {
        if (this.coinConstructors.has(name)) {
            throw new Error("coin '" + name + "' is already defined");
        }
        this.coinConstructors.set(name, constructor);
    };
    return CoinFactory;
}());
exports.CoinFactory = CoinFactory;
exports.GlobalCoinFactory = new CoinFactory();
exports.GlobalCoinFactory.registerCoinConstructor('btc', coins_1.Btc.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('tbtc', coins_1.Tbtc.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('bch', coins_1.Bch.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('tbch', coins_1.Tbch.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('bsv', coins_1.Bsv.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('tbsv', coins_1.Tbsv.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('btg', coins_1.Btg.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('tbtg', coins_1.Tbtg.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('ltc', coins_1.Ltc.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('tltc', coins_1.Tltc.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('eos', coins_1.Eos.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('teos', coins_1.Teos.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('eth', coins_1.Eth.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('teth', coins_1.Teth.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('gteth', coins_1.Gteth.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('etc', coins_1.Etc.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('tetc', coins_1.Tetc.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('rbtc', coins_1.Rbtc.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('trbtc', coins_1.Trbtc.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('celo', coins_1.Celo.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('tcelo', coins_1.Tcelo.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('rmg', coins_1.Rmg.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('trmg', coins_1.Trmg.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('xrp', coins_1.Xrp.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('txrp', coins_1.Txrp.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('xlm', coins_1.Xlm.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('txlm', coins_1.Txlm.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('dash', coins_1.Dash.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('tdash', coins_1.Tdash.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('zec', coins_1.Zec.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('tzec', coins_1.Tzec.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('algo', coins_1.Algo.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('talgo', coins_1.Talgo.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('trx', coins_1.Trx.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('ttrx', coins_1.Ttrx.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('xtz', coins_1.Xtz.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('txtz', coins_1.Txtz.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('hbar', coins_1.Hbar.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('thbar', coins_1.Thbar.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('ofc', coins_1.Ofc.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('susd', coins_1.Susd.createInstance);
exports.GlobalCoinFactory.registerCoinConstructor('tsusd', coins_1.Tsusd.createInstance);
for (var _i = 0, _a = config_1.tokens.bitcoin.eth.tokens.concat(config_1.tokens.testnet.eth.tokens); _i < _a.length; _i++) {
    var token = _a[_i];
    var tokenConstructor = coins_1.Erc20Token.createTokenConstructor(token);
    exports.GlobalCoinFactory.registerCoinConstructor(token.type, tokenConstructor);
    exports.GlobalCoinFactory.registerCoinConstructor(token.tokenContractAddress, tokenConstructor);
}
for (var _b = 0, _c = config_1.tokens.bitcoin.xlm.tokens.concat(config_1.tokens.testnet.xlm.tokens); _b < _c.length; _b++) {
    var token = _c[_b];
    var tokenConstructor = coins_1.StellarToken.createTokenConstructor(token);
    exports.GlobalCoinFactory.registerCoinConstructor(token.type, tokenConstructor);
}
for (var _d = 0, _e = config_1.tokens.bitcoin.ofc.tokens.concat(config_1.tokens.testnet.ofc.tokens); _d < _e.length; _d++) {
    var ofcToken = _e[_d];
    var tokenConstructor = coins_1.OfcToken.createTokenConstructor(ofcToken);
    exports.GlobalCoinFactory.registerCoinConstructor(ofcToken.type, tokenConstructor);
}
for (var _f = 0, _g = config_1.tokens.bitcoin.celo.tokens.concat(config_1.tokens.testnet.celo.tokens); _f < _g.length; _f++) {
    var token = _g[_f];
    var tokenConstructor = coins_1.CeloToken.createTokenConstructor(token);
    exports.GlobalCoinFactory.registerCoinConstructor(token.type, tokenConstructor);
    exports.GlobalCoinFactory.registerCoinConstructor(token.tokenContractAddress, tokenConstructor);
}
//# sourceMappingURL=data:application/json;base64,