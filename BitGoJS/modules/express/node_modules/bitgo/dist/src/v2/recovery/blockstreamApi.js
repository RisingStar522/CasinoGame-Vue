"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var common = require("../../common");
var request = require("superagent");
var errors_1 = require("../../errors");
var BlockstreamApi = /** @class */ (function () {
    function BlockstreamApi(bitgo, apiToken) {
        this.bitgo = bitgo;
        this.apiToken = apiToken;
    }
    /** @inheritDoc */
    BlockstreamApi.prototype.getExplorerUrl = function (query) {
        if (this.apiToken) {
            // TODO: Blockstream does not require an API key for now, howeveer, at some point they may
        }
        return common.Environments[this.bitgo.getEnv()].blockstreamBaseUrl + query;
    };
    /** @inheritDoc */
    BlockstreamApi.prototype.getAccountInfo = function (address) {
        return __awaiter(this, void 0, void 0, function () {
            var response, totalBalance, e_1, errorMessage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, request.get(this.getExplorerUrl("/address/" + address))];
                    case 1:
                        response = _a.sent();
                        totalBalance = response.body.chain_stats.funded_txo_sum - response.body.chain_stats.spent_txo_sum;
                        return [2 /*return*/, {
                                txCount: response.body.chain_stats.tx_count,
                                totalBalance: totalBalance,
                            }];
                    case 2:
                        e_1 = _a.sent();
                        errorMessage = "Failed to get address information for " + address + " from " + this.getExplorerUrl('');
                        errorMessage += (e_1.response.status) ? " - " + e_1.response.status : '';
                        errorMessage += (e_1.response.text) ? ": " + e_1.response.text : '';
                        throw new errors_1.BlockExplorerUnavailable(errorMessage);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /** @inheritDoc */
    BlockstreamApi.prototype.getUnspents = function (address) {
        return __awaiter(this, void 0, void 0, function () {
            var response, rawUnspents, e_2, errorMessage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, request.get(this.getExplorerUrl("/address/" + address + "/utxo"))];
                    case 1:
                        response = _a.sent();
                        rawUnspents = response.body;
                        return [2 /*return*/, rawUnspents.map(function (unspent) {
                                return {
                                    amount: unspent.value,
                                    n: unspent.vout,
                                    txid: unspent.txid,
                                    address: address,
                                };
                            })];
                    case 2:
                        e_2 = _a.sent();
                        errorMessage = "Failed to get unspents information for " + address + " from " + this.getExplorerUrl('');
                        errorMessage += (e_2.response.status) ? " - " + e_2.response.status : '';
                        errorMessage += (e_2.response.text) ? ": " + e_2.response.text : '';
                        throw new errors_1.BlockExplorerUnavailable(errorMessage);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return BlockstreamApi;
}());
exports.BlockstreamApi = BlockstreamApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2tzdHJlYW1BcGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvdjIvcmVjb3ZlcnkvYmxvY2tzdHJlYW1BcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBLHFDQUF1QztBQUN2QyxvQ0FBc0M7QUFFdEMsdUNBQXdEO0FBRXhEO0lBSUUsd0JBQVksS0FBWSxFQUFFLFFBQWlCO1FBQ3pDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUM7SUFFRCxrQkFBa0I7SUFDbEIsdUNBQWMsR0FBZCxVQUFlLEtBQWE7UUFDMUIsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pCLDBGQUEwRjtTQUMzRjtRQUNELE9BQU8sTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsa0JBQWtCLEdBQUcsS0FBSyxDQUFDO0lBQzdFLENBQUM7SUFFRCxrQkFBa0I7SUFDWix1Q0FBYyxHQUFwQixVQUFxQixPQUFlOzs7Ozs7O3dCQXFCZixxQkFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsY0FBWSxPQUFTLENBQUMsQ0FBQyxFQUFBOzt3QkFBeEUsUUFBUSxHQUFHLFNBQTZEO3dCQUN4RSxZQUFZLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQzt3QkFDeEcsc0JBQU87Z0NBQ0wsT0FBTyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVE7Z0NBQzNDLFlBQVksY0FBQTs2QkFDYixFQUFDOzs7d0JBRUUsWUFBWSxHQUFHLDJDQUF5QyxPQUFPLGNBQVMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUcsQ0FBQzt3QkFDdEcsWUFBWSxJQUFJLENBQUMsR0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBTSxHQUFDLENBQUMsUUFBUSxDQUFDLE1BQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO3dCQUNyRSxZQUFZLElBQUksQ0FBQyxHQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFLLEdBQUMsQ0FBQyxRQUFRLENBQUMsSUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7d0JBQ2hFLE1BQU0sSUFBSSxpQ0FBd0IsQ0FBQyxZQUFZLENBQUMsQ0FBQzs7Ozs7S0FFcEQ7SUFFRCxrQkFBa0I7SUFDWixvQ0FBVyxHQUFqQixVQUFrQixPQUFlOzs7Ozs7O3dCQWlCWixxQkFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsY0FBWSxPQUFPLFVBQU8sQ0FBQyxDQUFDLEVBQUE7O3dCQUE3RSxRQUFRLEdBQUcsU0FBa0U7d0JBQzdFLFdBQVcsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO3dCQUVsQyxzQkFBTyxXQUFXLENBQUMsR0FBRyxDQUFDLFVBQUEsT0FBTztnQ0FDNUIsT0FBTztvQ0FDTCxNQUFNLEVBQUUsT0FBTyxDQUFDLEtBQUs7b0NBQ3JCLENBQUMsRUFBRSxPQUFPLENBQUMsSUFBSTtvQ0FDZixJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUk7b0NBQ2xCLE9BQU8sU0FBQTtpQ0FDUixDQUFDOzRCQUNKLENBQUMsQ0FBQyxFQUFDOzs7d0JBRUMsWUFBWSxHQUFHLDRDQUEwQyxPQUFPLGNBQVMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUcsQ0FBQzt3QkFDdkcsWUFBWSxJQUFJLENBQUMsR0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBTSxHQUFDLENBQUMsUUFBUSxDQUFDLE1BQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO3dCQUNyRSxZQUFZLElBQUksQ0FBQyxHQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFLLEdBQUMsQ0FBQyxRQUFRLENBQUMsSUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7d0JBQ2hFLE1BQU0sSUFBSSxpQ0FBd0IsQ0FBQyxZQUFZLENBQUMsQ0FBQzs7Ozs7S0FFcEQ7SUFDSCxxQkFBQztBQUFELENBQUMsQUF6RkQsSUF5RkM7QUF6Rlksd0NBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZWNvdmVyeUFjY291bnREYXRhLCBSZWNvdmVyeVVuc3BlbnQsIFJlY292ZXJ5UHJvdmlkZXIgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCAqIGFzIGNvbW1vbiBmcm9tICcuLi8uLi9jb21tb24nO1xuaW1wb3J0ICogYXMgcmVxdWVzdCBmcm9tICdzdXBlcmFnZW50JztcbmltcG9ydCB7IEJpdEdvIH0gZnJvbSAnLi4vLi4vYml0Z28nO1xuaW1wb3J0IHsgQmxvY2tFeHBsb3JlclVuYXZhaWxhYmxlIH0gZnJvbSAnLi4vLi4vZXJyb3JzJztcblxuZXhwb3J0IGNsYXNzIEJsb2Nrc3RyZWFtQXBpIGltcGxlbWVudHMgUmVjb3ZlcnlQcm92aWRlciB7XG4gIHByb3RlY3RlZCByZWFkb25seSBiaXRnbzogQml0R287XG4gIHByb3RlY3RlZCByZWFkb25seSBhcGlUb2tlbj86IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihiaXRnbzogQml0R28sIGFwaVRva2VuPzogc3RyaW5nKSB7XG4gICAgdGhpcy5iaXRnbyA9IGJpdGdvO1xuICAgIHRoaXMuYXBpVG9rZW4gPSBhcGlUb2tlbjtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdERvYyAqL1xuICBnZXRFeHBsb3JlclVybChxdWVyeTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAodGhpcy5hcGlUb2tlbikge1xuICAgICAgLy8gVE9ETzogQmxvY2tzdHJlYW0gZG9lcyBub3QgcmVxdWlyZSBhbiBBUEkga2V5IGZvciBub3csIGhvd2V2ZWVyLCBhdCBzb21lIHBvaW50IHRoZXkgbWF5XG4gICAgfVxuICAgIHJldHVybiBjb21tb24uRW52aXJvbm1lbnRzW3RoaXMuYml0Z28uZ2V0RW52KCldLmJsb2Nrc3RyZWFtQmFzZVVybCArIHF1ZXJ5O1xuICB9XG5cbiAgLyoqIEBpbmhlcml0RG9jICovXG4gIGFzeW5jIGdldEFjY291bnRJbmZvKGFkZHJlc3M6IHN0cmluZyk6IFByb21pc2U8UmVjb3ZlcnlBY2NvdW50RGF0YT4ge1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9CbG9ja3N0cmVhbS9lc3Bsb3JhL2Jsb2IvbWFzdGVyL0FQSS5tZCNnZXQtYWRkcmVzc2FkZHJlc3NcbiAgICAvLyBFeGFtcGxlIHJlc3BvbnNlOlxuICAgIC8vIHtcbiAgICAvLyAgICBcImFkZHJlc3NcIjpcIjJOQldGYlY5M0ZRRTUyeUVWNkM3UVlRNkRLVGJpTW9ES3VUXCIsXG4gICAgLy8gICAgXCJjaGFpbl9zdGF0c1wiOntcbiAgICAvLyAgICAgICBcImZ1bmRlZF90eG9fY291bnRcIjoyLFxuICAgIC8vICAgICAgIFwiZnVuZGVkX3R4b19zdW1cIjoyMDAwMDAwLFxuICAgIC8vICAgICAgIFwic3BlbnRfdHhvX2NvdW50XCI6MSxcbiAgICAvLyAgICAgICBcInNwZW50X3R4b19zdW1cIjoxMDAwMDAwLFxuICAgIC8vICAgICAgIFwidHhfY291bnRcIjozXG4gICAgLy8gICAgfSxcbiAgICAvLyAgICBcIm1lbXBvb2xfc3RhdHNcIjp7XG4gICAgLy8gICAgICAgXCJmdW5kZWRfdHhvX2NvdW50XCI6MCxcbiAgICAvLyAgICAgICBcImZ1bmRlZF90eG9fc3VtXCI6MCxcbiAgICAvLyAgICAgICBcInNwZW50X3R4b19jb3VudFwiOjAsXG4gICAgLy8gICAgICAgXCJzcGVudF90eG9fc3VtXCI6MCxcbiAgICAvLyAgICAgICBcInR4X2NvdW50XCI6MFxuICAgIC8vICAgIH1cbiAgICAvLyB9XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdC5nZXQodGhpcy5nZXRFeHBsb3JlclVybChgL2FkZHJlc3MvJHthZGRyZXNzfWApKTtcbiAgICAgIGNvbnN0IHRvdGFsQmFsYW5jZSA9IHJlc3BvbnNlLmJvZHkuY2hhaW5fc3RhdHMuZnVuZGVkX3R4b19zdW0gLSByZXNwb25zZS5ib2R5LmNoYWluX3N0YXRzLnNwZW50X3R4b19zdW07XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eENvdW50OiByZXNwb25zZS5ib2R5LmNoYWluX3N0YXRzLnR4X2NvdW50LFxuICAgICAgICB0b3RhbEJhbGFuY2UsXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSBgRmFpbGVkIHRvIGdldCBhZGRyZXNzIGluZm9ybWF0aW9uIGZvciAke2FkZHJlc3N9IGZyb20gJHt0aGlzLmdldEV4cGxvcmVyVXJsKCcnKX1gO1xuICAgICAgZXJyb3JNZXNzYWdlICs9IChlLnJlc3BvbnNlLnN0YXR1cykgPyBgIC0gJHtlLnJlc3BvbnNlLnN0YXR1c31gIDogJyc7XG4gICAgICBlcnJvck1lc3NhZ2UgKz0gKGUucmVzcG9uc2UudGV4dCkgPyBgOiAke2UucmVzcG9uc2UudGV4dH1gIDogJyc7XG4gICAgICB0aHJvdyBuZXcgQmxvY2tFeHBsb3JlclVuYXZhaWxhYmxlKGVycm9yTWVzc2FnZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqIEBpbmhlcml0RG9jICovXG4gIGFzeW5jIGdldFVuc3BlbnRzKGFkZHJlc3M6IHN0cmluZyk6IFByb21pc2U8UmVjb3ZlcnlVbnNwZW50W10+IHtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vQmxvY2tzdHJlYW0vZXNwbG9yYS9ibG9iL21hc3Rlci9BUEkubWQjZ2V0LWFkZHJlc3NhZGRyZXNzdXR4b1xuICAgIC8vIEV4YW1wbGUgcmVzcG9uc2U6XG4gICAgLy8gW1xuICAgIC8vICAgIHtcbiAgICAvLyAgICAgICBcInR4aWRcIjpcIjUzNTMxMDA1NjNkNmEwN2Q3ZDcwODUyODEyMjJjZWQwOWNmYjRkZmQ2ZTMyN2RhMzE2OGVhYzlkZTZiNTQxZmFcIixcbiAgICAvLyAgICAgICBcInZvdXRcIjowLFxuICAgIC8vICAgICAgIFwic3RhdHVzXCI6e1xuICAgIC8vICAgICAgICAgIFwiY29uZmlybWVkXCI6dHJ1ZSxcbiAgICAvLyAgICAgICAgICBcImJsb2NrX2hlaWdodFwiOjE0ODM1NzcsXG4gICAgLy8gICAgICAgICAgXCJibG9ja19oYXNoXCI6XCIwMDAwMDAwMDAwMDAwMGI5OTJiZmExMWUwNjIwNGMzNDA2NWVhMWU2NjZiNDQ3NjQ2ZjJiNTQ2YWMzZDFlNzlhXCIsXG4gICAgLy8gICAgICAgICAgXCJibG9ja190aW1lXCI6MTU1MTgyMzQxN1xuICAgIC8vICAgICAgIH0sXG4gICAgLy8gICAgICAgXCJ2YWx1ZVwiOjEwMDAwMDBcbiAgICAvLyAgICB9XG4gICAgLy8gXVxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QuZ2V0KHRoaXMuZ2V0RXhwbG9yZXJVcmwoYC9hZGRyZXNzLyR7YWRkcmVzc30vdXR4b2ApKTtcbiAgICAgIGNvbnN0IHJhd1Vuc3BlbnRzID0gcmVzcG9uc2UuYm9keTtcblxuICAgICAgcmV0dXJuIHJhd1Vuc3BlbnRzLm1hcCh1bnNwZW50ID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBhbW91bnQ6IHVuc3BlbnQudmFsdWUsXG4gICAgICAgICAgbjogdW5zcGVudC52b3V0LFxuICAgICAgICAgIHR4aWQ6IHVuc3BlbnQudHhpZCxcbiAgICAgICAgICBhZGRyZXNzLFxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IGBGYWlsZWQgdG8gZ2V0IHVuc3BlbnRzIGluZm9ybWF0aW9uIGZvciAke2FkZHJlc3N9IGZyb20gJHt0aGlzLmdldEV4cGxvcmVyVXJsKCcnKX1gO1xuICAgICAgZXJyb3JNZXNzYWdlICs9IChlLnJlc3BvbnNlLnN0YXR1cykgPyBgIC0gJHtlLnJlc3BvbnNlLnN0YXR1c31gIDogJyc7XG4gICAgICBlcnJvck1lc3NhZ2UgKz0gKGUucmVzcG9uc2UudGV4dCkgPyBgOiAke2UucmVzcG9uc2UudGV4dH1gIDogJyc7XG4gICAgICB0aHJvdyBuZXcgQmxvY2tFeHBsb3JlclVuYXZhaWxhYmxlKGVycm9yTWVzc2FnZSk7XG4gICAgfVxuICB9XG59XG4iXX0=