"use strict";
/**
 * @hidden
 */
/**
 */
var rippleKeypairs = require("ripple-keypairs");
var ripple = require("ripple-lib");
var utxo_lib_1 = require("@bitgo/utxo-lib");
var binary = require("ripple-binary-codec");
var hashes_1 = require("ripple-lib/dist/npm/common/hashes");
function computeSignature(tx, privateKey, signAs) {
    var signingData = signAs ?
        binary.encodeForMultisigning(tx, signAs) : binary.encodeForSigning(tx);
    return rippleKeypairs.sign(signingData, privateKey);
}
/**
 * Sign Ripple transaction with a secp256k1 private key
 * @param txHex
 * @param privateKey
 * @param options
 * @returns {{signedTransaction: *, id}}
 */
var signWithPrivateKey = function (txHex, privateKey, options) {
    var privateKeyBuffer = Buffer.from(privateKey, 'hex');
    if (privateKeyBuffer.length === 33 && privateKeyBuffer[0] === 0) {
        privateKeyBuffer = privateKeyBuffer.slice(1, 33);
    }
    var privateKeyObject = utxo_lib_1.ECPair.fromPrivateKeyBuffer(privateKeyBuffer);
    var publicKey = privateKeyObject.getPublicKeyBuffer().toString('hex').toUpperCase();
    var tx;
    try {
        tx = binary.decode(txHex);
    }
    catch (e) {
        try {
            tx = JSON.parse(txHex);
        }
        catch (e) {
            throw new Error('txHex needs to be either hex or JSON string for XRP');
        }
    }
    if (tx.TxnSignature || tx.Signers) {
        throw new Error('transaction must not contain "TxnSignature" or "Signers" properties');
    }
    tx.SigningPubKey = (options && options.signAs) ? '' : publicKey;
    if (options && options.signAs) {
        var expectedSigner = rippleKeypairs.deriveAddress(publicKey);
        if (options.signAs !== expectedSigner) {
            throw new Error('signAs does not match private key');
        }
        var signer = {
            Account: options.signAs,
            SigningPubKey: publicKey,
            TxnSignature: computeSignature(tx, privateKey, options.signAs),
        };
        tx.Signers = [{ Signer: signer }];
    }
    else {
        tx.TxnSignature = computeSignature(tx, privateKey, undefined);
    }
    var serialized = binary.encode(tx);
    return {
        signedTransaction: serialized,
        id: hashes_1.computeBinaryTransactionHash(serialized),
    };
};
module.exports = function (params) {
    var rippleLib = new ripple.RippleAPI(params);
    rippleLib.signWithPrivateKey = signWithPrivateKey;
    return rippleLib;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmlwcGxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3JpcHBsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7QUFFSDtHQUNHO0FBQ0gsZ0RBQWtEO0FBQ2xELG1DQUFxQztBQUNyQyw0Q0FBeUM7QUFFekMsNENBQThDO0FBQzlDLDREQUFpRjtBQUVqRixTQUFTLGdCQUFnQixDQUFDLEVBQUUsRUFBRSxVQUFVLEVBQUUsTUFBTTtJQUM5QyxJQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsQ0FBQztRQUMxQixNQUFNLENBQUMscUJBQXFCLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDekUsT0FBTyxjQUFjLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsSUFBTSxrQkFBa0IsR0FBRyxVQUFTLEtBQUssRUFBRSxVQUFVLEVBQUUsT0FBTztJQUM1RCxJQUFJLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3RELElBQUksZ0JBQWdCLENBQUMsTUFBTSxLQUFLLEVBQUUsSUFBSSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDL0QsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztLQUNsRDtJQUNELElBQU0sZ0JBQWdCLEdBQUcsaUJBQU0sQ0FBQyxvQkFBb0IsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3ZFLElBQU0sU0FBUyxHQUFHLGdCQUFnQixDQUFDLGtCQUFrQixFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBRXRGLElBQUksRUFBRSxDQUFDO0lBQ1AsSUFBSTtRQUNGLEVBQUUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQzNCO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVixJQUFJO1lBQ0YsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDeEI7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLE1BQU0sSUFBSSxLQUFLLENBQUMscURBQXFELENBQUMsQ0FBQztTQUN4RTtLQUNGO0lBQ0QsSUFBSSxFQUFFLENBQUMsWUFBWSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUU7UUFDakMsTUFBTSxJQUFJLEtBQUssQ0FBQyxxRUFBcUUsQ0FBQyxDQUFDO0tBQ3hGO0lBRUQsRUFBRSxDQUFDLGFBQWEsR0FBRyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0lBRWhFLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7UUFDN0IsSUFBTSxjQUFjLEdBQUcsY0FBYyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMvRCxJQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssY0FBYyxFQUFFO1lBQ3JDLE1BQU0sSUFBSSxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQztTQUN0RDtRQUNELElBQU0sTUFBTSxHQUFHO1lBQ2IsT0FBTyxFQUFFLE9BQU8sQ0FBQyxNQUFNO1lBQ3ZCLGFBQWEsRUFBRSxTQUFTO1lBQ3hCLFlBQVksRUFBRSxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUUsVUFBVSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUM7U0FDL0QsQ0FBQztRQUNGLEVBQUUsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0tBQ25DO1NBQU07UUFDTCxFQUFFLENBQUMsWUFBWSxHQUFHLGdCQUFnQixDQUFDLEVBQUUsRUFBRSxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7S0FDL0Q7SUFFRCxJQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3JDLE9BQU87UUFDTCxpQkFBaUIsRUFBRSxVQUFVO1FBQzdCLEVBQUUsRUFBRSxxQ0FBNEIsQ0FBQyxVQUFVLENBQUM7S0FDN0MsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLGlCQUFTLFVBQUMsTUFBTTtJQUNkLElBQU0sU0FBUyxHQUFHLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM5QyxTQUFpQixDQUFDLGtCQUFrQixHQUFHLGtCQUFrQixDQUFDO0lBQzNELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGhpZGRlblxuICovXG5cbi8qKlxuICovXG5pbXBvcnQgKiBhcyByaXBwbGVLZXlwYWlycyBmcm9tICdyaXBwbGUta2V5cGFpcnMnO1xuaW1wb3J0ICogYXMgcmlwcGxlIGZyb20gJ3JpcHBsZS1saWInO1xuaW1wb3J0IHsgRUNQYWlyIH0gZnJvbSAnQGJpdGdvL3V0eG8tbGliJztcblxuaW1wb3J0ICogYXMgYmluYXJ5IGZyb20gJ3JpcHBsZS1iaW5hcnktY29kZWMnO1xuaW1wb3J0IHsgY29tcHV0ZUJpbmFyeVRyYW5zYWN0aW9uSGFzaCB9IGZyb20gJ3JpcHBsZS1saWIvZGlzdC9ucG0vY29tbW9uL2hhc2hlcyc7XG5cbmZ1bmN0aW9uIGNvbXB1dGVTaWduYXR1cmUodHgsIHByaXZhdGVLZXksIHNpZ25Bcykge1xuICBjb25zdCBzaWduaW5nRGF0YSA9IHNpZ25BcyA/XG4gICAgYmluYXJ5LmVuY29kZUZvck11bHRpc2lnbmluZyh0eCwgc2lnbkFzKSA6IGJpbmFyeS5lbmNvZGVGb3JTaWduaW5nKHR4KTtcbiAgcmV0dXJuIHJpcHBsZUtleXBhaXJzLnNpZ24oc2lnbmluZ0RhdGEsIHByaXZhdGVLZXkpO1xufVxuXG4vKipcbiAqIFNpZ24gUmlwcGxlIHRyYW5zYWN0aW9uIHdpdGggYSBzZWNwMjU2azEgcHJpdmF0ZSBrZXlcbiAqIEBwYXJhbSB0eEhleFxuICogQHBhcmFtIHByaXZhdGVLZXlcbiAqIEBwYXJhbSBvcHRpb25zXG4gKiBAcmV0dXJucyB7e3NpZ25lZFRyYW5zYWN0aW9uOiAqLCBpZH19XG4gKi9cbmNvbnN0IHNpZ25XaXRoUHJpdmF0ZUtleSA9IGZ1bmN0aW9uKHR4SGV4LCBwcml2YXRlS2V5LCBvcHRpb25zKSB7XG4gIGxldCBwcml2YXRlS2V5QnVmZmVyID0gQnVmZmVyLmZyb20ocHJpdmF0ZUtleSwgJ2hleCcpO1xuICBpZiAocHJpdmF0ZUtleUJ1ZmZlci5sZW5ndGggPT09IDMzICYmIHByaXZhdGVLZXlCdWZmZXJbMF0gPT09IDApIHtcbiAgICBwcml2YXRlS2V5QnVmZmVyID0gcHJpdmF0ZUtleUJ1ZmZlci5zbGljZSgxLCAzMyk7XG4gIH1cbiAgY29uc3QgcHJpdmF0ZUtleU9iamVjdCA9IEVDUGFpci5mcm9tUHJpdmF0ZUtleUJ1ZmZlcihwcml2YXRlS2V5QnVmZmVyKTtcbiAgY29uc3QgcHVibGljS2V5ID0gcHJpdmF0ZUtleU9iamVjdC5nZXRQdWJsaWNLZXlCdWZmZXIoKS50b1N0cmluZygnaGV4JykudG9VcHBlckNhc2UoKTtcblxuICBsZXQgdHg7XG4gIHRyeSB7XG4gICAgdHggPSBiaW5hcnkuZGVjb2RlKHR4SGV4KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRyeSB7XG4gICAgICB0eCA9IEpTT04ucGFyc2UodHhIZXgpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigndHhIZXggbmVlZHMgdG8gYmUgZWl0aGVyIGhleCBvciBKU09OIHN0cmluZyBmb3IgWFJQJyk7XG4gICAgfVxuICB9XG4gIGlmICh0eC5UeG5TaWduYXR1cmUgfHwgdHguU2lnbmVycykge1xuICAgIHRocm93IG5ldyBFcnJvcigndHJhbnNhY3Rpb24gbXVzdCBub3QgY29udGFpbiBcIlR4blNpZ25hdHVyZVwiIG9yIFwiU2lnbmVyc1wiIHByb3BlcnRpZXMnKTtcbiAgfVxuXG4gIHR4LlNpZ25pbmdQdWJLZXkgPSAob3B0aW9ucyAmJiBvcHRpb25zLnNpZ25BcykgPyAnJyA6IHB1YmxpY0tleTtcblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnNpZ25Bcykge1xuICAgIGNvbnN0IGV4cGVjdGVkU2lnbmVyID0gcmlwcGxlS2V5cGFpcnMuZGVyaXZlQWRkcmVzcyhwdWJsaWNLZXkpO1xuICAgIGlmIChvcHRpb25zLnNpZ25BcyAhPT0gZXhwZWN0ZWRTaWduZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignc2lnbkFzIGRvZXMgbm90IG1hdGNoIHByaXZhdGUga2V5Jyk7XG4gICAgfVxuICAgIGNvbnN0IHNpZ25lciA9IHtcbiAgICAgIEFjY291bnQ6IG9wdGlvbnMuc2lnbkFzLFxuICAgICAgU2lnbmluZ1B1YktleTogcHVibGljS2V5LFxuICAgICAgVHhuU2lnbmF0dXJlOiBjb21wdXRlU2lnbmF0dXJlKHR4LCBwcml2YXRlS2V5LCBvcHRpb25zLnNpZ25BcyksXG4gICAgfTtcbiAgICB0eC5TaWduZXJzID0gW3sgU2lnbmVyOiBzaWduZXIgfV07XG4gIH0gZWxzZSB7XG4gICAgdHguVHhuU2lnbmF0dXJlID0gY29tcHV0ZVNpZ25hdHVyZSh0eCwgcHJpdmF0ZUtleSwgdW5kZWZpbmVkKTtcbiAgfVxuXG4gIGNvbnN0IHNlcmlhbGl6ZWQgPSBiaW5hcnkuZW5jb2RlKHR4KTtcbiAgcmV0dXJuIHtcbiAgICBzaWduZWRUcmFuc2FjdGlvbjogc2VyaWFsaXplZCxcbiAgICBpZDogY29tcHV0ZUJpbmFyeVRyYW5zYWN0aW9uSGFzaChzZXJpYWxpemVkKSxcbiAgfTtcbn07XG5cbmV4cG9ydCA9IChwYXJhbXMpOiByaXBwbGUuUmlwcGxlQVBJID0+IHtcbiAgY29uc3QgcmlwcGxlTGliID0gbmV3IHJpcHBsZS5SaXBwbGVBUEkocGFyYW1zKTtcbiAgKHJpcHBsZUxpYiBhcyBhbnkpLnNpZ25XaXRoUHJpdmF0ZUtleSA9IHNpZ25XaXRoUHJpdmF0ZUtleTtcbiAgcmV0dXJuIHJpcHBsZUxpYjtcbn07XG4iXX0=