import { BitGo } from '../../bitgo';
import { BaseCoin } from '../baseCoin';
import { AbstractUtxoCoin, UtxoNetwork } from './abstractUtxoCoin';
import * as Bluebird from 'bluebird';
import { RecoveryAccountData, RecoveryUnspent } from '../recovery/types';
export interface TransactionInfo {
    transactionHex: string;
}
export declare class Btc extends AbstractUtxoCoin {
    constructor(bitgo: BitGo, network?: UtxoNetwork);
    static createInstance(bitgo: BitGo): BaseCoin;
    getChain(): string;
    getFamily(): string;
    getFullName(): string;
    supportsBlockTarget(): boolean;
    supportsP2shP2wsh(): boolean;
    supportsP2wsh(): boolean;
    getRecoveryFeePerBytes(): Bluebird<number>;
    getRecoveryFeeRecommendationApiBaseUrl(): Bluebird<string>;
    recoveryBlockchainExplorerUrl(url: string): string;
    getAddressInfoFromExplorer(addressBase58: string, apiKey?: string): Bluebird<RecoveryAccountData>;
    getUnspentInfoFromExplorer(addressBase58: string, apiKey?: string): Bluebird<RecoveryUnspent[]>;
    /**
     * Verify that the txhex user signs correspond to the correct tx they intended
     * by 1) getting back the decoded transaction based on the txhex
     * and then 2) compute the txid (hash), h1 of the decoded transaction 3) compare h1
     * to the txid (hash) of the transaction (including unspent info) we constructed
     * @param {TransactionInfo} txInfo
     * @returns {Bluebird<any>}
     */
    verifyRecoveryTransaction(txInfo: TransactionInfo): Bluebird<any>;
}
//# sourceMappingURL=btc.d.ts.map