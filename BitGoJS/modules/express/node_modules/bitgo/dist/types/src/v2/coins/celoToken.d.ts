/**
 * @prettier
 */
import { BitGo } from '../../bitgo';
import { Celo } from './celo';
import { CoinConstructor } from '../coinFactory';
export interface CeloTokenConfig {
    name: string;
    type: string;
    coin: string;
    network: string;
    tokenContractAddress: string;
    decimalPlaces: number;
}
export declare class CeloToken extends Celo {
    readonly tokenConfig: CeloTokenConfig;
    constructor(bitgo: BitGo, tokenConfig: CeloTokenConfig);
    static createTokenConstructor(config: CeloTokenConfig): CoinConstructor;
    readonly type: string;
    readonly name: string;
    readonly coin: string;
    readonly network: string;
    readonly tokenContractAddress: string;
    readonly decimalPlaces: number;
    getChain(): string;
    getFullName(): string;
    getBaseFactor(): number;
    /**
     * Flag for sending value of 0
     * @returns {boolean} True if okay to send 0 value, false otherwise
     */
    valuelessTransferAllowed(): boolean;
    /**
     * Flag for sending data along with transactions
     * @returns {boolean} True if okay to send tx data (CELO), false otherwise
     */
    transactionDataAllowed(): boolean;
}
//# sourceMappingURL=celoToken.d.ts.map