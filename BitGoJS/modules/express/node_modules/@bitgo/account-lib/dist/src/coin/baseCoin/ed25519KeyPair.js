"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var nacl = __importStar(require("tweetnacl"));
var utils_1 = require("../hbar/utils");
var crypto_1 = require("../../utils/crypto");
var iface_1 = require("./iface");
var DEFAULT_SEED_SIZE_BYTES = 32;
var Ed25519KeyPair = /** @class */ (function () {
    /**
     * Public constructor. By default, creates a key pair with a random master seed.
     *
     * @param {KeyPairOptions} source Either a master seed, a private key, or a public key
     */
    function Ed25519KeyPair(source) {
        var naclKeyPair;
        if (!source) {
            var seed = nacl.randomBytes(DEFAULT_SEED_SIZE_BYTES);
            naclKeyPair = nacl.sign.keyPair.fromSeed(seed);
            this.setKeyPair(naclKeyPair);
        }
        else if (iface_1.isSeed(source)) {
            naclKeyPair = nacl.sign.keyPair.fromSeed(source.seed);
            this.setKeyPair(naclKeyPair);
        }
        else if (iface_1.isPrivateKey(source)) {
            this.recordKeysFromPrivateKey(source.prv);
        }
        else if (iface_1.isPublicKey(source)) {
            this.recordKeysFromPublicKey(source.pub);
        }
        else {
            throw new Error('Invalid key pair options');
        }
    }
    Ed25519KeyPair.prototype.setKeyPair = function (naclKeyPair) {
        this.keyPair = {
            prv: utils_1.toHex(naclKeyPair.secretKey.slice(0, 32)),
            pub: utils_1.toHex(naclKeyPair.publicKey),
        };
    };
    /** @inheritdoc */
    Ed25519KeyPair.prototype.recordKeysFromPrivateKey = function (prv) {
        if (crypto_1.isValidEd25519Seed(prv)) {
            var decodedPrv = utils_1.toUint8Array(prv);
            var naclKeyPair = nacl.sign.keyPair.fromSeed(decodedPrv);
            this.setKeyPair(naclKeyPair);
        }
        else if (crypto_1.isValidEd25519SecretKey(prv)) {
            var decodedPrv = utils_1.toUint8Array(prv);
            var naclKeyPair = nacl.sign.keyPair.fromSecretKey(decodedPrv);
            this.setKeyPair(naclKeyPair);
        }
        else {
            this.keyPair = this.recordKeysFromPrivateKeyInProtocolFormat(prv);
        }
    };
    /** @inheritdoc */
    Ed25519KeyPair.prototype.recordKeysFromPublicKey = function (pub) {
        if (crypto_1.isValidEd25519PublicKey(pub)) {
            this.keyPair = { pub: pub };
        }
        else {
            this.keyPair = this.recordKeysFromPublicKeyInProtocolFormat(pub);
        }
    };
    /**
     * Generates a signature for an arbitrary string with the current private key using the ed25519 public-key signature
     * system.
     *
     * @param {string} message to produce a signature for
     * @returns {Uint8Array} The signature produced for the message
     * @throws if there is no private key
     */
    Ed25519KeyPair.prototype.signMessage = function (message) {
        var messageToSign = utils_1.toUint8Array(Buffer.from(message).toString('hex'));
        var prv = this.keyPair.prv;
        if (!prv) {
            throw new Error('Missing private key');
        }
        return nacl.sign.detached(messageToSign, nacl.sign.keyPair.fromSeed(utils_1.toUint8Array(prv)).secretKey);
    };
    /**
     * Verifies a message signature using the current public key.
     *
     * @param {string} message signed
     * @param {Uint8Array} signature to verify
     * @returns {boolean} True if the message was signed with the current key pair
     */
    Ed25519KeyPair.prototype.verifySignature = function (message, signature) {
        var messageToVerify = utils_1.toUint8Array(Buffer.from(message).toString('hex'));
        var publicKey = utils_1.toUint8Array(this.keyPair.pub);
        return nacl.sign.detached.verify(messageToVerify, signature, publicKey);
    };
    return Ed25519KeyPair;
}());
exports.Ed25519KeyPair = Ed25519KeyPair;
//# sourceMappingURL=data:application/json;base64,