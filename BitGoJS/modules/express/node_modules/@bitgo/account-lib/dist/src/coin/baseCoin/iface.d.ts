/// <reference types="node" />
import { BaseTransactionBuilder } from './baseTransactionBuilder';
import { BaseTransactionBuilderFactory } from './baseTransactionBuilderFactory';
export interface BaseKey {
    key: any;
}
/**
 * A private key in extended or raw format
 */
export declare type PrivateKey = {
    prv: string;
};
/**
 * A public key in extended, compressed, or uncompressed format
 */
export declare type PublicKey = {
    pub: string;
};
/**
 * A seed to create key pairs. Must be between 16 and 64 Bytes long
 */
export declare type Seed = {
    seed: Buffer;
};
export declare type KeyPairOptions = Seed | PrivateKey | PublicKey;
export declare type BaseBuilder = BaseTransactionBuilder | BaseTransactionBuilderFactory;
/**
 * @param source
 */
export declare function isSeed(source: KeyPairOptions): source is Seed;
/**
 * @param source
 */
export declare function isPrivateKey(source: KeyPairOptions): source is PrivateKey;
/**
 * @param source
 */
export declare function isPublicKey(source: KeyPairOptions): source is PublicKey;
/**
 * Key pair in the protocol default format.
 */
export declare type DefaultKeys = {
    prv?: string;
    pub: string;
};
/**
 * Key pair in Uint8Array format.
 */
export declare type ByteKeys = {
    prv?: Uint8Array;
    pub: Uint8Array;
};
/**
 * Key pair in extended format. Used for coins supporting secp256k1 elliptic curve.
 */
export declare type ExtendedKeys = {
    xprv?: string;
    xpub: string;
};
export interface BaseAddress {
    address: string;
}
export interface Entry extends BaseAddress {
    coin?: string;
    value: string;
}
export interface BaseFee {
    fee: string;
}
//# sourceMappingURL=iface.d.ts.map