"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var sdk_1 = require("@hashgraph/sdk");
var ed25519KeyPair_1 = require("../baseCoin/ed25519KeyPair");
var errors_1 = require("../baseCoin/errors");
var utils_1 = require("./utils");
var PUBLIC_KEY_PREFIX = '302a300506032b6570032100';
var PRIVATE_KEY_PREFIX = '302e020100300506032b657004220420';
var KeyPair = /** @class */ (function (_super) {
    __extends(KeyPair, _super);
    /**
     * Public constructor. By default, creates a key pair with a random master seed.
     *
     * @param { KeyPairOptions } source Either a master seed, a private key, or a public key
     */
    function KeyPair(source) {
        return _super.call(this, source) || this;
    }
    /**
     * Hedera default keys format is a pair of Uint8Array keys
     *
     * @param {boolean} raw defines if the key is returned in raw or protocol default format
     * @returns { DefaultKeys } The keys in the defined format
     */
    KeyPair.prototype.getKeys = function (raw) {
        if (raw === void 0) { raw = false; }
        var result = {
            pub: sdk_1.Ed25519PublicKey.fromString(this.keyPair.pub).toString(raw),
        };
        if (this.keyPair.prv) {
            result.prv = sdk_1.Ed25519PrivateKey.fromString(this.keyPair.prv).toString(raw);
        }
        return result;
    };
    /** @inheritdoc */
    KeyPair.prototype.getAddress = function (format) {
        throw new errors_1.NotSupported('Address derivation is not supported in Hedera');
    };
    /** @inheritdoc */
    KeyPair.prototype.recordKeysFromPublicKeyInProtocolFormat = function (pub) {
        try {
            var hederaPub = sdk_1.Ed25519PublicKey.fromString(pub.toLowerCase()).toString();
            var ed25519Pub = utils_1.removePrefix(PUBLIC_KEY_PREFIX, hederaPub);
            return { pub: ed25519Pub };
        }
        catch (e) {
            throw new errors_1.InvalidKey('Invalid public key: ' + pub);
        }
    };
    /** @inheritdoc */
    KeyPair.prototype.recordKeysFromPrivateKeyInProtocolFormat = function (prv) {
        try {
            var hederaPrv = sdk_1.Ed25519PrivateKey.fromString(prv);
            var ed25519Prv = utils_1.removePrefix(PRIVATE_KEY_PREFIX, hederaPrv.toString());
            var ed25519Pub = utils_1.removePrefix(PUBLIC_KEY_PREFIX, hederaPrv.publicKey.toString());
            return {
                prv: ed25519Prv,
                pub: ed25519Pub,
            };
        }
        catch (e) {
            throw new errors_1.InvalidKey('Invalid private key');
        }
    };
    return KeyPair;
}(ed25519KeyPair_1.Ed25519KeyPair));
exports.KeyPair = KeyPair;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5UGFpci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb2luL2hiYXIva2V5UGFpci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQSxzQ0FBcUU7QUFDckUsNkRBQTREO0FBRTVELDZDQUE4RDtBQUM5RCxpQ0FBdUM7QUFFdkMsSUFBTSxpQkFBaUIsR0FBRywwQkFBMEIsQ0FBQztBQUNyRCxJQUFNLGtCQUFrQixHQUFHLGtDQUFrQyxDQUFDO0FBRTlEO0lBQTZCLDJCQUFjO0lBQ3pDOzs7O09BSUc7SUFDSCxpQkFBWSxNQUF1QjtlQUNqQyxrQkFBTSxNQUFNLENBQUM7SUFDZixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCx5QkFBTyxHQUFQLFVBQVEsR0FBVztRQUFYLG9CQUFBLEVBQUEsV0FBVztRQUNqQixJQUFNLE1BQU0sR0FBZ0I7WUFDMUIsR0FBRyxFQUFFLHNCQUFnQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUM7U0FDakUsQ0FBQztRQUVGLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUU7WUFDcEIsTUFBTSxDQUFDLEdBQUcsR0FBRyx1QkFBaUIsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDM0U7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQsa0JBQWtCO0lBQ2xCLDRCQUFVLEdBQVYsVUFBVyxNQUFlO1FBQ3hCLE1BQU0sSUFBSSxxQkFBWSxDQUFDLCtDQUErQyxDQUFDLENBQUM7SUFDMUUsQ0FBQztJQUVELGtCQUFrQjtJQUNsQix5REFBdUMsR0FBdkMsVUFBd0MsR0FBVztRQUNqRCxJQUFJO1lBQ0YsSUFBTSxTQUFTLEdBQUcsc0JBQWdCLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQzVFLElBQU0sVUFBVSxHQUFHLG9CQUFZLENBQUMsaUJBQWlCLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFDOUQsT0FBTyxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsQ0FBQztTQUM1QjtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsTUFBTSxJQUFJLG1CQUFVLENBQUMsc0JBQXNCLEdBQUcsR0FBRyxDQUFDLENBQUM7U0FDcEQ7SUFDSCxDQUFDO0lBRUQsa0JBQWtCO0lBQ2xCLDBEQUF3QyxHQUF4QyxVQUF5QyxHQUFXO1FBQ2xELElBQUk7WUFDRixJQUFNLFNBQVMsR0FBRyx1QkFBaUIsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDcEQsSUFBTSxVQUFVLEdBQUcsb0JBQVksQ0FBQyxrQkFBa0IsRUFBRSxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztZQUMxRSxJQUFNLFVBQVUsR0FBRyxvQkFBWSxDQUFDLGlCQUFpQixFQUFFLFNBQVMsQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztZQUNuRixPQUFPO2dCQUNMLEdBQUcsRUFBRSxVQUFVO2dCQUNmLEdBQUcsRUFBRSxVQUFVO2FBQ2hCLENBQUM7U0FDSDtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsTUFBTSxJQUFJLG1CQUFVLENBQUMscUJBQXFCLENBQUMsQ0FBQztTQUM3QztJQUNILENBQUM7SUFDSCxjQUFDO0FBQUQsQ0FBQyxBQXpERCxDQUE2QiwrQkFBYyxHQXlEMUM7QUF6RFksMEJBQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFZDI1NTE5UHJpdmF0ZUtleSwgRWQyNTUxOVB1YmxpY0tleSB9IGZyb20gJ0BoYXNoZ3JhcGgvc2RrJztcclxuaW1wb3J0IHsgRWQyNTUxOUtleVBhaXIgfSBmcm9tICcuLi9iYXNlQ29pbi9lZDI1NTE5S2V5UGFpcic7XHJcbmltcG9ydCB7IEtleVBhaXJPcHRpb25zLCBEZWZhdWx0S2V5cyB9IGZyb20gJy4uL2Jhc2VDb2luL2lmYWNlJztcclxuaW1wb3J0IHsgSW52YWxpZEtleSwgTm90U3VwcG9ydGVkIH0gZnJvbSAnLi4vYmFzZUNvaW4vZXJyb3JzJztcclxuaW1wb3J0IHsgcmVtb3ZlUHJlZml4IH0gZnJvbSAnLi91dGlscyc7XHJcblxyXG5jb25zdCBQVUJMSUNfS0VZX1BSRUZJWCA9ICczMDJhMzAwNTA2MDMyYjY1NzAwMzIxMDAnO1xyXG5jb25zdCBQUklWQVRFX0tFWV9QUkVGSVggPSAnMzAyZTAyMDEwMDMwMDUwNjAzMmI2NTcwMDQyMjA0MjAnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEtleVBhaXIgZXh0ZW5kcyBFZDI1NTE5S2V5UGFpciB7XHJcbiAgLyoqXHJcbiAgICogUHVibGljIGNvbnN0cnVjdG9yLiBCeSBkZWZhdWx0LCBjcmVhdGVzIGEga2V5IHBhaXIgd2l0aCBhIHJhbmRvbSBtYXN0ZXIgc2VlZC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7IEtleVBhaXJPcHRpb25zIH0gc291cmNlIEVpdGhlciBhIG1hc3RlciBzZWVkLCBhIHByaXZhdGUga2V5LCBvciBhIHB1YmxpYyBrZXlcclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihzb3VyY2U/OiBLZXlQYWlyT3B0aW9ucykge1xyXG4gICAgc3VwZXIoc291cmNlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEhlZGVyYSBkZWZhdWx0IGtleXMgZm9ybWF0IGlzIGEgcGFpciBvZiBVaW50OEFycmF5IGtleXNcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmF3IGRlZmluZXMgaWYgdGhlIGtleSBpcyByZXR1cm5lZCBpbiByYXcgb3IgcHJvdG9jb2wgZGVmYXVsdCBmb3JtYXRcclxuICAgKiBAcmV0dXJucyB7IERlZmF1bHRLZXlzIH0gVGhlIGtleXMgaW4gdGhlIGRlZmluZWQgZm9ybWF0XHJcbiAgICovXHJcbiAgZ2V0S2V5cyhyYXcgPSBmYWxzZSk6IERlZmF1bHRLZXlzIHtcclxuICAgIGNvbnN0IHJlc3VsdDogRGVmYXVsdEtleXMgPSB7XHJcbiAgICAgIHB1YjogRWQyNTUxOVB1YmxpY0tleS5mcm9tU3RyaW5nKHRoaXMua2V5UGFpci5wdWIpLnRvU3RyaW5nKHJhdyksXHJcbiAgICB9O1xyXG5cclxuICAgIGlmICh0aGlzLmtleVBhaXIucHJ2KSB7XHJcbiAgICAgIHJlc3VsdC5wcnYgPSBFZDI1NTE5UHJpdmF0ZUtleS5mcm9tU3RyaW5nKHRoaXMua2V5UGFpci5wcnYpLnRvU3RyaW5nKHJhdyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgLyoqIEBpbmhlcml0ZG9jICovXHJcbiAgZ2V0QWRkcmVzcyhmb3JtYXQ/OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgdGhyb3cgbmV3IE5vdFN1cHBvcnRlZCgnQWRkcmVzcyBkZXJpdmF0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgaW4gSGVkZXJhJyk7XHJcbiAgfVxyXG5cclxuICAvKiogQGluaGVyaXRkb2MgKi9cclxuICByZWNvcmRLZXlzRnJvbVB1YmxpY0tleUluUHJvdG9jb2xGb3JtYXQocHViOiBzdHJpbmcpOiBEZWZhdWx0S2V5cyB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBoZWRlcmFQdWIgPSBFZDI1NTE5UHVibGljS2V5LmZyb21TdHJpbmcocHViLnRvTG93ZXJDYXNlKCkpLnRvU3RyaW5nKCk7XHJcbiAgICAgIGNvbnN0IGVkMjU1MTlQdWIgPSByZW1vdmVQcmVmaXgoUFVCTElDX0tFWV9QUkVGSVgsIGhlZGVyYVB1Yik7XHJcbiAgICAgIHJldHVybiB7IHB1YjogZWQyNTUxOVB1YiB9O1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEtleSgnSW52YWxpZCBwdWJsaWMga2V5OiAnICsgcHViKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xyXG4gIHJlY29yZEtleXNGcm9tUHJpdmF0ZUtleUluUHJvdG9jb2xGb3JtYXQocHJ2OiBzdHJpbmcpOiBEZWZhdWx0S2V5cyB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBoZWRlcmFQcnYgPSBFZDI1NTE5UHJpdmF0ZUtleS5mcm9tU3RyaW5nKHBydik7XHJcbiAgICAgIGNvbnN0IGVkMjU1MTlQcnYgPSByZW1vdmVQcmVmaXgoUFJJVkFURV9LRVlfUFJFRklYLCBoZWRlcmFQcnYudG9TdHJpbmcoKSk7XHJcbiAgICAgIGNvbnN0IGVkMjU1MTlQdWIgPSByZW1vdmVQcmVmaXgoUFVCTElDX0tFWV9QUkVGSVgsIGhlZGVyYVBydi5wdWJsaWNLZXkudG9TdHJpbmcoKSk7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgcHJ2OiBlZDI1NTE5UHJ2LFxyXG4gICAgICAgIHB1YjogZWQyNTUxOVB1YixcclxuICAgICAgfTtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgdGhyb3cgbmV3IEludmFsaWRLZXkoJ0ludmFsaWQgcHJpdmF0ZSBrZXknKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19