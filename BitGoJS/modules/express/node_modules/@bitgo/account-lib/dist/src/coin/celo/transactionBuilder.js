"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ethereumjs_abi_1 = __importDefault(require("ethereumjs-abi"));
var Eth = __importStar(require("../eth"));
var baseCoin_1 = require("../baseCoin");
var errors_1 = require("../baseCoin/errors");
var walletUtil_1 = require("../eth/walletUtil");
var transaction_1 = require("./transaction");
var stakingBuilder_1 = require("./stakingBuilder");
var utils_1 = require("./utils");
var transferBuilder_1 = require("./transferBuilder");
var TransactionBuilder = /** @class */ (function (_super) {
    __extends(TransactionBuilder, _super);
    function TransactionBuilder(_coinConfig) {
        var _this = _super.call(this, _coinConfig) || this;
        _this._common = utils_1.getCommon(_this._coinConfig.network.type);
        _this.transaction = new transaction_1.Transaction(_this._coinConfig, _this._common);
        return _this;
    }
    /** @inheritdoc */
    TransactionBuilder.prototype.type = function (type) {
        _super.prototype.type.call(this, type);
        this._stakingBuilder = undefined;
    };
    TransactionBuilder.prototype.getTransactionData = function () {
        switch (this._type) {
            case baseCoin_1.TransactionType.StakingLock:
                return this.buildLockStakeTransaction();
            case baseCoin_1.TransactionType.StakingUnlock:
            case baseCoin_1.TransactionType.StakingVote:
            case baseCoin_1.TransactionType.StakingUnvote:
            case baseCoin_1.TransactionType.StakingActivate:
            case baseCoin_1.TransactionType.StakingWithdraw:
                return this.buildStakingTransaction();
        }
        return _super.prototype.getTransactionData.call(this);
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.fromImplementation = function (rawTransaction) {
        var tx;
        if (/^0x?[0-9a-f]{1,}$/.test(rawTransaction.toLowerCase())) {
            tx = transaction_1.Transaction.fromSerialized(this._coinConfig, this._common, rawTransaction);
            _super.prototype.loadBuilderInput.call(this, tx.toJson());
        }
        else {
            var txData = JSON.parse(rawTransaction);
            tx = new transaction_1.Transaction(this._coinConfig, this._common, txData);
        }
        return tx;
    };
    TransactionBuilder.prototype.setTransactionTypeFields = function (decodedType, transactionJson) {
        switch (decodedType) {
            case baseCoin_1.TransactionType.StakingLock:
                this._stakingBuilder = new stakingBuilder_1.StakingBuilder(this._coinConfig)
                    .type(baseCoin_1.StakingOperationTypes.LOCK)
                    .amount(transactionJson.value);
                break;
            case baseCoin_1.TransactionType.StakingUnlock:
            case baseCoin_1.TransactionType.StakingVote:
            case baseCoin_1.TransactionType.StakingUnvote:
            case baseCoin_1.TransactionType.StakingActivate:
            case baseCoin_1.TransactionType.StakingWithdraw:
                this._stakingBuilder = new stakingBuilder_1.StakingBuilder(this._coinConfig, transactionJson.data);
                break;
            default:
                _super.prototype.setTransactionTypeFields.call(this, decodedType, transactionJson);
                break;
        }
    };
    /**
     * Returns the smart contract encoded data
     *
     * @param {string[]} addresses - the contract signers
     * @returns {string} - the smart contract encoded data
     */
    TransactionBuilder.prototype.getContractData = function (addresses) {
        var params = [addresses];
        var resultEncodedParameters = ethereumjs_abi_1.default.rawEncode(walletUtil_1.walletSimpleConstructor, params)
            .toString('hex')
            .replace('0x', '');
        return utils_1.walletSimpleByteCode + resultEncodedParameters;
    };
    //region Stake methods
    /**
     * Gets the staking lock builder if exist, or creates a new one for this transaction and returns it
     * requires: amount
     *
     * @returns {StakingBuilder} the staking builder
     */
    TransactionBuilder.prototype.lock = function () {
        if (this._type !== baseCoin_1.TransactionType.StakingLock) {
            throw new errors_1.BuildTransactionError('Lock can only be set for Staking Lock transactions type');
        }
        return this.getBuilder(baseCoin_1.StakingOperationTypes.LOCK);
    };
    /**
     * Gets the staking vote builder if exist, or creates a new one for this transaction and returns it
     * requires: group, lesser, greater, amount
     *
     * @returns {StakingBuilder} the staking builder
     */
    TransactionBuilder.prototype.vote = function () {
        if (this._type !== baseCoin_1.TransactionType.StakingVote) {
            throw new errors_1.BuildTransactionError('Votes can only be set for a staking transaction');
        }
        return this.getBuilder(baseCoin_1.StakingOperationTypes.VOTE);
    };
    /**
     * Gets the staking activate builder if exist, or creates a new one for this transaction and returns it
     * requires: group
     *
     * @returns {StakingBuilder} the staking builder
     */
    TransactionBuilder.prototype.activate = function () {
        if (this._type !== baseCoin_1.TransactionType.StakingActivate) {
            throw new errors_1.BuildTransactionError('Activation can only be set for a staking transaction');
        }
        return this.getBuilder(baseCoin_1.StakingOperationTypes.ACTIVATE);
    };
    /**
     * Gets the staking unlock builder if exist, or creates a new one for this transaction and returns it
     * requires: amount
     *
     * @returns {StakingBuilder} the staking builder
     */
    TransactionBuilder.prototype.unlock = function () {
        if (this._type !== baseCoin_1.TransactionType.StakingUnlock) {
            throw new errors_1.BuildTransactionError('Unlock can only be set for Staking Unlock transactions type');
        }
        return this.getBuilder(baseCoin_1.StakingOperationTypes.UNLOCK);
    };
    /**
     * Gets the staking unvote builder if exist, or creates a new one for this transaction and returns it
     * requires: group, lesser, greater, amount, index
     *
     * @returns {StakingBuilder} the staking builder
     */
    TransactionBuilder.prototype.unvote = function () {
        if (this._type !== baseCoin_1.TransactionType.StakingUnvote) {
            throw new errors_1.BuildTransactionError('Unvote can only be set for a staking transaction');
        }
        return this.getBuilder(baseCoin_1.StakingOperationTypes.UNVOTE);
    };
    /**
     * Gets the staking withdraw builder if exist, or creates a new one for this transaction and returns it
     * requires: index (unlock list)
     *
     * @returns {StakingBuilder} the staking builder
     */
    TransactionBuilder.prototype.withdraw = function () {
        if (this._type !== baseCoin_1.TransactionType.StakingWithdraw) {
            throw new errors_1.BuildTransactionError('Withdraw can only be set for a staking transaction');
        }
        return this.getBuilder(baseCoin_1.StakingOperationTypes.WITHDRAW);
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.transfer = function (data) {
        if (this._type !== baseCoin_1.TransactionType.Send) {
            throw new errors_1.BuildTransactionError('Transfers can only be set for send transactions');
        }
        if (!this._transfer) {
            this._transfer = new transferBuilder_1.TransferBuilder(data);
        }
        return this._transfer;
    };
    /**
     * Get the appropriate builder for the selected type
     *
     * @param {StakingOperationTypes} type the selected type for the staking builder
     * @returns {StakingBuilder} the staking builder for the selected type
     */
    TransactionBuilder.prototype.getBuilder = function (type) {
        if (!this._stakingBuilder) {
            this._stakingBuilder = new stakingBuilder_1.StakingBuilder(this._coinConfig).type(type);
        }
        return this._stakingBuilder;
    };
    TransactionBuilder.prototype.getStaking = function () {
        if (!this._stakingBuilder) {
            throw new errors_1.BuildTransactionError('No staking information set');
        }
        return this._stakingBuilder.build();
    };
    TransactionBuilder.prototype.buildLockStakeTransaction = function () {
        var stake = this.getStaking();
        var data = this.buildBase(stake.serialize());
        data.to = stake.address;
        data.value = stake.amount;
        return data;
    };
    TransactionBuilder.prototype.buildStakingTransaction = function () {
        var stake = this.getStaking();
        var data = this.buildBase(stake.serialize());
        data.to = stake.address;
        return data;
    };
    return TransactionBuilder;
}(Eth.TransactionBuilder));
exports.TransactionBuilder = TransactionBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNhY3Rpb25CdWlsZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvaW4vY2Vsby90cmFuc2FjdGlvbkJ1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBLGtFQUF5QztBQUN6QywwQ0FBOEI7QUFDOUIsd0NBQXFFO0FBQ3JFLDZDQUEyRDtBQUUzRCxnREFBNEQ7QUFDNUQsNkNBQTRDO0FBQzVDLG1EQUFrRDtBQUVsRCxpQ0FBMEQ7QUFDMUQscURBQW9EO0FBRXBEO0lBQXdDLHNDQUFzQjtJQUs1RCw0QkFBWSxXQUFpQztRQUE3QyxZQUNFLGtCQUFNLFdBQVcsQ0FBQyxTQUduQjtRQUZDLEtBQUksQ0FBQyxPQUFPLEdBQUcsaUJBQVMsQ0FBQyxLQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4RCxLQUFJLENBQUMsV0FBVyxHQUFHLElBQUkseUJBQVcsQ0FBQyxLQUFJLENBQUMsV0FBVyxFQUFFLEtBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQzs7SUFDckUsQ0FBQztJQUVELGtCQUFrQjtJQUNsQixpQ0FBSSxHQUFKLFVBQUssSUFBcUI7UUFDeEIsaUJBQU0sSUFBSSxZQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDO0lBQ25DLENBQUM7SUFFUywrQ0FBa0IsR0FBNUI7UUFDRSxRQUFRLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDbEIsS0FBSywwQkFBZSxDQUFDLFdBQVc7Z0JBQzlCLE9BQU8sSUFBSSxDQUFDLHlCQUF5QixFQUFFLENBQUM7WUFDMUMsS0FBSywwQkFBZSxDQUFDLGFBQWEsQ0FBQztZQUNuQyxLQUFLLDBCQUFlLENBQUMsV0FBVyxDQUFDO1lBQ2pDLEtBQUssMEJBQWUsQ0FBQyxhQUFhLENBQUM7WUFDbkMsS0FBSywwQkFBZSxDQUFDLGVBQWUsQ0FB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VSxFQUFFLENBQUM7UUFDaEMsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7UUFFeEIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBR0gseUJBQUM7QUFBRCxDQUFDLEFBdE5ELENBQXdDLEdBQUcsQ0FBQyxrQkFBa0IsR0FzTjdEO0FBdE5ZLGdEQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VDb2luIGFzIENvaW5Db25maWcgfSBmcm9tICdAYml0Z28vc3RhdGljcy9kaXN0L3NyYy9iYXNlJztcclxuaW1wb3J0IEV0aGVyZXVtQWJpIGZyb20gJ2V0aGVyZXVtanMtYWJpJztcclxuaW1wb3J0ICogYXMgRXRoIGZyb20gJy4uL2V0aCc7XHJcbmltcG9ydCB7IFRyYW5zYWN0aW9uVHlwZSwgU3Rha2luZ09wZXJhdGlvblR5cGVzIH0gZnJvbSAnLi4vYmFzZUNvaW4nO1xyXG5pbXBvcnQgeyBCdWlsZFRyYW5zYWN0aW9uRXJyb3IgfSBmcm9tICcuLi9iYXNlQ29pbi9lcnJvcnMnO1xyXG5pbXBvcnQgeyBUeERhdGEgfSBmcm9tICcuLi9ldGgvaWZhY2UnO1xyXG5pbXBvcnQgeyB3YWxsZXRTaW1wbGVDb25zdHJ1Y3RvciB9IGZyb20gJy4uL2V0aC93YWxsZXRVdGlsJztcclxuaW1wb3J0IHsgVHJhbnNhY3Rpb24gfSBmcm9tICcuL3RyYW5zYWN0aW9uJztcclxuaW1wb3J0IHsgU3Rha2luZ0J1aWxkZXIgfSBmcm9tICcuL3N0YWtpbmdCdWlsZGVyJztcclxuaW1wb3J0IHsgU3Rha2luZ0NhbGwgfSBmcm9tICcuL3N0YWtpbmdDYWxsJztcclxuaW1wb3J0IHsgZ2V0Q29tbW9uLCB3YWxsZXRTaW1wbGVCeXRlQ29kZSB9IGZyb20gJy4vdXRpbHMnO1xyXG5pbXBvcnQgeyBUcmFuc2ZlckJ1aWxkZXIgfSBmcm9tICcuL3RyYW5zZmVyQnVpbGRlcic7XHJcblxyXG5leHBvcnQgY2xhc3MgVHJhbnNhY3Rpb25CdWlsZGVyIGV4dGVuZHMgRXRoLlRyYW5zYWN0aW9uQnVpbGRlciB7XHJcbiAgLy8gU3Rha2luZyBzcGVjaWZpYyBwYXJhbWV0ZXJzXHJcbiAgcHJpdmF0ZSBfc3Rha2luZ0J1aWxkZXI/OiBTdGFraW5nQnVpbGRlcjtcclxuICBwcm90ZWN0ZWQgX3RyYW5zZmVyOiBUcmFuc2ZlckJ1aWxkZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKF9jb2luQ29uZmlnOiBSZWFkb25seTxDb2luQ29uZmlnPikge1xyXG4gICAgc3VwZXIoX2NvaW5Db25maWcpO1xyXG4gICAgdGhpcy5fY29tbW9uID0gZ2V0Q29tbW9uKHRoaXMuX2NvaW5Db25maWcubmV0d29yay50eXBlKTtcclxuICAgIHRoaXMudHJhbnNhY3Rpb24gPSBuZXcgVHJhbnNhY3Rpb24odGhpcy5fY29pbkNvbmZpZywgdGhpcy5fY29tbW9uKTtcclxuICB9XHJcblxyXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xyXG4gIHR5cGUodHlwZTogVHJhbnNhY3Rpb25UeXBlKTogdm9pZCB7XHJcbiAgICBzdXBlci50eXBlKHR5cGUpO1xyXG4gICAgdGhpcy5fc3Rha2luZ0J1aWxkZXIgPSB1bmRlZmluZWQ7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgZ2V0VHJhbnNhY3Rpb25EYXRhKCk6IFR4RGF0YSB7XHJcbiAgICBzd2l0Y2ggKHRoaXMuX3R5cGUpIHtcclxuICAgICAgY2FzZSBUcmFuc2FjdGlvblR5cGUuU3Rha2luZ0xvY2s6XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVpbGRMb2NrU3Rha2VUcmFuc2FjdGlvbigpO1xyXG4gICAgICBjYXNlIFRyYW5zYWN0aW9uVHlwZS5TdGFraW5nVW5sb2NrOlxyXG4gICAgICBjYXNlIFRyYW5zYWN0aW9uVHlwZS5TdGFraW5nVm90ZTpcclxuICAgICAgY2FzZSBUcmFuc2FjdGlvblR5cGUuU3Rha2luZ1Vudm90ZTpcclxuICAgICAgY2FzZSBUcmFuc2FjdGlvblR5cGUuU3Rha2luZ0FjdGl2YXRlOlxyXG4gICAgICBjYXNlIFRyYW5zYWN0aW9uVHlwZS5TdGFraW5nV2l0aGRyYXc6XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVpbGRTdGFraW5nVHJhbnNhY3Rpb24oKTtcclxuICAgIH1cclxuICAgIHJldHVybiBzdXBlci5nZXRUcmFuc2FjdGlvbkRhdGEoKTtcclxuICB9XHJcblxyXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xyXG4gIHByb3RlY3RlZCBmcm9tSW1wbGVtZW50YXRpb24ocmF3VHJhbnNhY3Rpb246IHN0cmluZyk6IFRyYW5zYWN0aW9uIHtcclxuICAgIGxldCB0eDogVHJhbnNhY3Rpb247XHJcbiAgICBpZiAoL14weD9bMC05YS1mXXsxLH0kLy50ZXN0KHJhd1RyYW5zYWN0aW9uLnRvTG93ZXJDYXNlKCkpKSB7XHJcbiAgICAgIHR4ID0gVHJhbnNhY3Rpb24uZnJvbVNlcmlhbGl6ZWQodGhpcy5fY29pbkNvbmZpZywgdGhpcy5fY29tbW9uLCByYXdUcmFuc2FjdGlvbik7XHJcbiAgICAgIHN1cGVyLmxvYWRCdWlsZGVySW5wdXQodHgudG9Kc29uKCkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgdHhEYXRhID0gSlNPTi5wYXJzZShyYXdUcmFuc2FjdGlvbik7XHJcbiAgICAgIHR4ID0gbmV3IFRyYW5zYWN0aW9uKHRoaXMuX2NvaW5Db25maWcsIHRoaXMuX2NvbW1vbiwgdHhEYXRhKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0eDtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBzZXRUcmFuc2FjdGlvblR5cGVGaWVsZHMoZGVjb2RlZFR5cGU6IFRyYW5zYWN0aW9uVHlwZSwgdHJhbnNhY3Rpb25Kc29uOiBUeERhdGEpOiB2b2lkIHtcclxuICAgIHN3aXRjaCAoZGVjb2RlZFR5cGUpIHtcclxuICAgICAgY2FzZSBUcmFuc2FjdGlvblR5cGUuU3Rha2luZ0xvY2s6XHJcbiAgICAgICAgdGhpcy5fc3Rha2luZ0J1aWxkZXIgPSBuZXcgU3Rha2luZ0J1aWxkZXIodGhpcy5fY29pbkNvbmZpZylcclxuICAgICAgICAgIC50eXBlKFN0YWtpbmdPcGVyYXRpb25UeXBlcy5MT0NLKVxyXG4gICAgICAgICAgLmFtb3VudCh0cmFuc2FjdGlvbkpzb24udmFsdWUpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIFRyYW5zYWN0aW9uVHlwZS5TdGFraW5nVW5sb2NrOlxyXG4gICAgICBjYXNlIFRyYW5zYWN0aW9uVHlwZS5TdGFraW5nVm90ZTpcclxuICAgICAgY2FzZSBUcmFuc2FjdGlvblR5cGUuU3Rha2luZ1Vudm90ZTpcclxuICAgICAgY2FzZSBUcmFuc2FjdGlvblR5cGUuU3Rha2luZ0FjdGl2YXRlOlxyXG4gICAgICBjYXNlIFRyYW5zYWN0aW9uVHlwZS5TdGFraW5nV2l0aGRyYXc6XHJcbiAgICAgICAgdGhpcy5fc3Rha2luZ0J1aWxkZXIgPSBuZXcgU3Rha2luZ0J1aWxkZXIodGhpcy5fY29pbkNvbmZpZywgdHJhbnNhY3Rpb25Kc29uLmRhdGEpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHN1cGVyLnNldFRyYW5zYWN0aW9uVHlwZUZpZWxkcyhkZWNvZGVkVHlwZSwgdHJhbnNhY3Rpb25Kc29uKTtcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdGhlIHNtYXJ0IGNvbnRyYWN0IGVuY29kZWQgZGF0YVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gYWRkcmVzc2VzIC0gdGhlIGNvbnRyYWN0IHNpZ25lcnNcclxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSAtIHRoZSBzbWFydCBjb250cmFjdCBlbmNvZGVkIGRhdGFcclxuICAgKi9cclxuICBwcm90ZWN0ZWQgZ2V0Q29udHJhY3REYXRhKGFkZHJlc3Nlczogc3RyaW5nW10pOiBzdHJpbmcge1xyXG4gICAgY29uc3QgcGFyYW1zID0gW2FkZHJlc3Nlc107XHJcbiAgICBjb25zdCByZXN1bHRFbmNvZGVkUGFyYW1ldGVycyA9IEV0aGVyZXVtQWJpLnJhd0VuY29kZSh3YWxsZXRTaW1wbGVDb25zdHJ1Y3RvciwgcGFyYW1zKVxyXG4gICAgICAudG9TdHJpbmcoJ2hleCcpXHJcbiAgICAgIC5yZXBsYWNlKCcweCcsICcnKTtcclxuICAgIHJldHVybiB3YWxsZXRTaW1wbGVCeXRlQ29kZSArIHJlc3VsdEVuY29kZWRQYXJhbWV0ZXJzO1xyXG4gIH1cclxuXHJcbiAgLy9yZWdpb24gU3Rha2UgbWV0aG9kc1xyXG5cclxuICAvKipcclxuICAgKiBHZXRzIHRoZSBzdGFraW5nIGxvY2sgYnVpbGRlciBpZiBleGlzdCwgb3IgY3JlYXRlcyBhIG5ldyBvbmUgZm9yIHRoaXMgdHJhbnNhY3Rpb24gYW5kIHJldHVybnMgaXRcclxuICAgKiByZXF1aXJlczogYW1vdW50XHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7U3Rha2luZ0J1aWxkZXJ9IHRoZSBzdGFraW5nIGJ1aWxkZXJcclxuICAgKi9cclxuICBsb2NrKCk6IFN0YWtpbmdCdWlsZGVyIHtcclxuICAgIGlmICh0aGlzLl90eXBlICE9PSBUcmFuc2FjdGlvblR5cGUuU3Rha2luZ0xvY2spIHtcclxuICAgICAgdGhyb3cgbmV3IEJ1aWxkVHJhbnNhY3Rpb25FcnJvcignTG9jayBjYW4gb25seSBiZSBzZXQgZm9yIFN0YWtpbmcgTG9jayB0cmFuc2FjdGlvbnMgdHlwZScpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLmdldEJ1aWxkZXIoU3Rha2luZ09wZXJhdGlvblR5cGVzLkxPQ0spO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0cyB0aGUgc3Rha2luZyB2b3RlIGJ1aWxkZXIgaWYgZXhpc3QsIG9yIGNyZWF0ZXMgYSBuZXcgb25lIGZvciB0aGlzIHRyYW5zYWN0aW9uIGFuZCByZXR1cm5zIGl0XHJcbiAgICogcmVxdWlyZXM6IGdyb3VwLCBsZXNzZXIsIGdyZWF0ZXIsIGFtb3VudFxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1N0YWtpbmdCdWlsZGVyfSB0aGUgc3Rha2luZyBidWlsZGVyXHJcbiAgICovXHJcbiAgdm90ZSgpOiBTdGFraW5nQnVpbGRlciB7XHJcbiAgICBpZiAodGhpcy5fdHlwZSAhPT0gVHJhbnNhY3Rpb25UeXBlLlN0YWtpbmdWb3RlKSB7XHJcbiAgICAgIHRocm93IG5ldyBCdWlsZFRyYW5zYWN0aW9uRXJyb3IoJ1ZvdGVzIGNhbiBvbmx5IGJlIHNldCBmb3IgYSBzdGFraW5nIHRyYW5zYWN0aW9uJyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuZ2V0QnVpbGRlcihTdGFraW5nT3BlcmF0aW9uVHlwZXMuVk9URSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXRzIHRoZSBzdGFraW5nIGFjdGl2YXRlIGJ1aWxkZXIgaWYgZXhpc3QsIG9yIGNyZWF0ZXMgYSBuZXcgb25lIGZvciB0aGlzIHRyYW5zYWN0aW9uIGFuZCByZXR1cm5zIGl0XHJcbiAgICogcmVxdWlyZXM6IGdyb3VwXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7U3Rha2luZ0J1aWxkZXJ9IHRoZSBzdGFraW5nIGJ1aWxkZXJcclxuICAgKi9cclxuICBhY3RpdmF0ZSgpOiBTdGFraW5nQnVpbGRlciB7XHJcbiAgICBpZiAodGhpcy5fdHlwZSAhPT0gVHJhbnNhY3Rpb25UeXBlLlN0YWtpbmdBY3RpdmF0ZSkge1xyXG4gICAgICB0aHJvdyBuZXcgQnVpbGRUcmFuc2FjdGlvbkVycm9yKCdBY3RpdmF0aW9uIGNhbiBvbmx5IGJlIHNldCBmb3IgYSBzdGFraW5nIHRyYW5zYWN0aW9uJyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuZ2V0QnVpbGRlcihTdGFraW5nT3BlcmF0aW9uVHlwZXMuQUNUSVZBVEUpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0cyB0aGUgc3Rha2luZyB1bmxvY2sgYnVpbGRlciBpZiBleGlzdCwgb3IgY3JlYXRlcyBhIG5ldyBvbmUgZm9yIHRoaXMgdHJhbnNhY3Rpb24gYW5kIHJldHVybnMgaXRcclxuICAgKiByZXF1aXJlczogYW1vdW50XHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7U3Rha2luZ0J1aWxkZXJ9IHRoZSBzdGFraW5nIGJ1aWxkZXJcclxuICAgKi9cclxuICB1bmxvY2soKTogU3Rha2luZ0J1aWxkZXIge1xyXG4gICAgaWYgKHRoaXMuX3R5cGUgIT09IFRyYW5zYWN0aW9uVHlwZS5TdGFraW5nVW5sb2NrKSB7XHJcbiAgICAgIHRocm93IG5ldyBCdWlsZFRyYW5zYWN0aW9uRXJyb3IoJ1VubG9jayBjYW4gb25seSBiZSBzZXQgZm9yIFN0YWtpbmcgVW5sb2NrIHRyYW5zYWN0aW9ucyB0eXBlJyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuZ2V0QnVpbGRlcihTdGFraW5nT3BlcmF0aW9uVHlwZXMuVU5MT0NLKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldHMgdGhlIHN0YWtpbmcgdW52b3RlIGJ1aWxkZXIgaWYgZXhpc3QsIG9yIGNyZWF0ZXMgYSBuZXcgb25lIGZvciB0aGlzIHRyYW5zYWN0aW9uIGFuZCByZXR1cm5zIGl0XHJcbiAgICogcmVxdWlyZXM6IGdyb3VwLCBsZXNzZXIsIGdyZWF0ZXIsIGFtb3VudCwgaW5kZXhcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtTdGFraW5nQnVpbGRlcn0gdGhlIHN0YWtpbmcgYnVpbGRlclxyXG4gICAqL1xyXG4gIHVudm90ZSgpOiBTdGFraW5nQnVpbGRlciB7XHJcbiAgICBpZiAodGhpcy5fdHlwZSAhPT0gVHJhbnNhY3Rpb25UeXBlLlN0YWtpbmdVbnZvdGUpIHtcclxuICAgICAgdGhyb3cgbmV3IEJ1aWxkVHJhbnNhY3Rpb25FcnJvcignVW52b3RlIGNhbiBvbmx5IGJlIHNldCBmb3IgYSBzdGFraW5nIHRyYW5zYWN0aW9uJyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuZ2V0QnVpbGRlcihTdGFraW5nT3BlcmF0aW9uVHlwZXMuVU5WT1RFKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldHMgdGhlIHN0YWtpbmcgd2l0aGRyYXcgYnVpbGRlciBpZiBleGlzdCwgb3IgY3JlYXRlcyBhIG5ldyBvbmUgZm9yIHRoaXMgdHJhbnNhY3Rpb24gYW5kIHJldHVybnMgaXRcclxuICAgKiByZXF1aXJlczogaW5kZXggKHVubG9jayBsaXN0KVxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1N0YWtpbmdCdWlsZGVyfSB0aGUgc3Rha2luZyBidWlsZGVyXHJcbiAgICovXHJcbiAgd2l0aGRyYXcoKTogU3Rha2luZ0J1aWxkZXIge1xyXG4gICAgaWYgKHRoaXMuX3R5cGUgIT09IFRyYW5zYWN0aW9uVHlwZS5TdGFraW5nV2l0aGRyYXcpIHtcclxuICAgICAgdGhyb3cgbmV3IEJ1aWxkVHJhbnNhY3Rpb25FcnJvcignV2l0aGRyYXcgY2FuIG9ubHkgYmUgc2V0IGZvciBhIHN0YWtpbmcgdHJhbnNhY3Rpb24nKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5nZXRCdWlsZGVyKFN0YWtpbmdPcGVyYXRpb25UeXBlcy5XSVRIRFJBVyk7XHJcbiAgfVxyXG5cclxuICAvKiogQGluaGVyaXRkb2MgKi9cclxuICB0cmFuc2ZlcihkYXRhPzogc3RyaW5nKTogVHJhbnNmZXJCdWlsZGVyIHtcclxuICAgIGlmICh0aGlzLl90eXBlICE9PSBUcmFuc2FjdGlvblR5cGUuU2VuZCkge1xyXG4gICAgICB0aHJvdyBuZXcgQnVpbGRUcmFuc2FjdGlvbkVycm9yKCdUcmFuc2ZlcnMgY2FuIG9ubHkgYmUgc2V0IGZvciBzZW5kIHRyYW5zYWN0aW9ucycpO1xyXG4gICAgfVxyXG4gICAgaWYgKCF0aGlzLl90cmFuc2Zlcikge1xyXG4gICAgICB0aGlzLl90cmFuc2ZlciA9IG5ldyBUcmFuc2ZlckJ1aWxkZXIoZGF0YSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5fdHJhbnNmZXI7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgdGhlIGFwcHJvcHJpYXRlIGJ1aWxkZXIgZm9yIHRoZSBzZWxlY3RlZCB0eXBlXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge1N0YWtpbmdPcGVyYXRpb25UeXBlc30gdHlwZSB0aGUgc2VsZWN0ZWQgdHlwZSBmb3IgdGhlIHN0YWtpbmcgYnVpbGRlclxyXG4gICAqIEByZXR1cm5zIHtTdGFraW5nQnVpbGRlcn0gdGhlIHN0YWtpbmcgYnVpbGRlciBmb3IgdGhlIHNlbGVjdGVkIHR5cGVcclxuICAgKi9cclxuICBwcml2YXRlIGdldEJ1aWxkZXIodHlwZTogU3Rha2luZ09wZXJhdGlvblR5cGVzKTogU3Rha2luZ0J1aWxkZXIge1xyXG4gICAgaWYgKCF0aGlzLl9zdGFraW5nQnVpbGRlcikge1xyXG4gICAgICB0aGlzLl9zdGFraW5nQnVpbGRlciA9IG5ldyBTdGFraW5nQnVpbGRlcih0aGlzLl9jb2luQ29uZmlnKS50eXBlKHR5cGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLl9zdGFraW5nQnVpbGRlcjtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0U3Rha2luZygpOiBTdGFraW5nQ2FsbCB7XHJcbiAgICBpZiAoIXRoaXMuX3N0YWtpbmdCdWlsZGVyKSB7XHJcbiAgICAgIHRocm93IG5ldyBCdWlsZFRyYW5zYWN0aW9uRXJyb3IoJ05vIHN0YWtpbmcgaW5mb3JtYXRpb24gc2V0Jyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5fc3Rha2luZ0J1aWxkZXIuYnVpbGQoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYnVpbGRMb2NrU3Rha2VUcmFuc2FjdGlvbigpOiBUeERhdGEge1xyXG4gICAgY29uc3Qgc3Rha2UgPSB0aGlzLmdldFN0YWtpbmcoKTtcclxuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmJ1aWxkQmFzZShzdGFrZS5zZXJpYWxpemUoKSk7XHJcbiAgICBkYXRhLnRvID0gc3Rha2UuYWRkcmVzcztcclxuICAgIGRhdGEudmFsdWUgPSBzdGFrZS5hbW91bnQ7XHJcblxyXG4gICAgcmV0dXJuIGRhdGE7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGJ1aWxkU3Rha2luZ1RyYW5zYWN0aW9uKCk6IFR4RGF0YSB7XHJcbiAgICBjb25zdCBzdGFrZSA9IHRoaXMuZ2V0U3Rha2luZygpO1xyXG4gICAgY29uc3QgZGF0YSA9IHRoaXMuYnVpbGRCYXNlKHN0YWtlLnNlcmlhbGl6ZSgpKTtcclxuICAgIGRhdGEudG8gPSBzdGFrZS5hZGRyZXNzO1xyXG5cclxuICAgIHJldHVybiBkYXRhO1xyXG4gIH1cclxuXHJcbiAgLy9lbmRyZWdpb25cclxufVxyXG4iXX0=