"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var crypto_1 = require("crypto");
var utxo_lib_1 = require("@bitgo/utxo-lib");
var enum_1 = require("../baseCoin/enum");
var iface_1 = require("../baseCoin/iface");
var secp256k1ExtendedKeyPair_1 = require("../baseCoin/secp256k1ExtendedKeyPair");
var Utils = __importStar(require("./utils"));
var DEFAULT_SEED_SIZE_BYTES = 16;
/**
 * Tron keys and address management.
 */
var KeyPair = /** @class */ (function (_super) {
    __extends(KeyPair, _super);
    /**
     * Public constructor. By default, creates a key pair with a random master seed.
     *
     * @param {KeyPairOptions} source Either a master seed, a private key (extended or raw), or a public key
     *     (extended, compressed, or uncompressed)
     */
    function KeyPair(source) {
        var _this = _super.call(this, source) || this;
        if (!source) {
            var seed = crypto_1.randomBytes(DEFAULT_SEED_SIZE_BYTES);
            _this.hdNode = utxo_lib_1.HDNode.fromSeedBuffer(seed);
        }
        else if (iface_1.isSeed(source)) {
            _this.hdNode = utxo_lib_1.HDNode.fromSeedBuffer(source.seed);
        }
        else if (iface_1.isPrivateKey(source)) {
            _super.prototype.recordKeysFromPrivateKey.call(_this, source.prv);
        }
        else if (iface_1.isPublicKey(source)) {
            _super.prototype.recordKeysFromPublicKey.call(_this, source.pub);
        }
        else {
            throw new Error('Invalid key pair options');
        }
        if (_this.hdNode) {
            _this.keyPair = _this.hdNode.keyPair;
        }
        return _this;
    }
    /**
     * Tron default keys format is raw private and uncompressed public key
     *
     * @returns {DefaultKeys} The keys in the protocol default key format
     */
    KeyPair.prototype.getKeys = function () {
        var result = {
            pub: this.keyPair.Q.getEncoded(false)
                .toString('hex')
                .toUpperCase(),
        };
        if (this.keyPair.d) {
            result.prv = this.keyPair.d
                .toBuffer(32)
                .toString('hex')
                .toUpperCase();
        }
        return result;
    };
    /**
     * Get a public address in the specified format, or in base58 if none is provided.
     *
     * @param {AddressFormat} format The address specified format
     * @returns {string} The public address in the specified format
     */
    KeyPair.prototype.getAddress = function (format) {
        var pub = this.getKeys().pub;
        // These are custom Tron methods. They can probably be replaced with other methods or libraries
        var addressBytes = Utils.getRawAddressFromPubKey(Buffer.from(pub, 'hex'));
        if (!format || format === enum_1.AddressFormat.base58) {
            // Default address are in hex
            return Utils.getBase58AddressFromByteArray(addressBytes);
        }
        else if (format === enum_1.AddressFormat.hex) {
            return Utils.getHexAddressFromByteArray(addressBytes);
        }
        throw new Error('Unsupported address format');
    };
    /**
     * Generates a signature for an arbitrary string with the current private key using keccak256
     * hashing algorithm. Throws if there is no private key.
     *
     * @param {string} message to produce a signature for
     * @returns {Buffer} The signature as a buffer
     */
    KeyPair.prototype.signMessage = function (message) {
        var messageToSign = Buffer.from(message).toString('hex');
        var prv = this.getKeys().prv;
        if (!prv) {
            throw new Error('Missing private key');
        }
        var signature = Utils.signString(messageToSign, prv, true).replace(/^0x/, '');
        return Buffer.from(signature, 'hex');
    };
    /**
     * Verifies a message signature using the current public key.
     *
     * @param {string} message signed
     * @param {Buffer} signature to verify
     * @returns {boolean} True if the message was signed with the current key pair
     */
    KeyPair.prototype.verifySignature = function (message, signature) {
        var messageToVerify = Buffer.from(message).toString('hex');
        var address = this.getAddress(enum_1.AddressFormat.base58);
        return Utils.verifySignature(messageToVerify, address, signature.toString('hex'), true);
    };
    return KeyPair;
}(secp256k1ExtendedKeyPair_1.Secp256k1ExtendedKeyPair));
exports.KeyPair = KeyPair;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5UGFpci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb2luL3RyeC9rZXlQYWlyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxpQ0FBcUM7QUFDckMsNENBQXlDO0FBQ3pDLHlDQUFpRDtBQUNqRCwyQ0FBbUc7QUFDbkcsaUZBQWdGO0FBQ2hGLDZDQUFpQztBQUVqQyxJQUFNLHVCQUF1QixHQUFHLEVBQUUsQ0FBQztBQUVuQzs7R0FFRztBQUNIO0lBQTZCLDJCQUF3QjtJQUNuRDs7Ozs7T0FLRztJQUNILGlCQUFZLE1BQXVCO1FBQW5DLFlBQ0Usa0JBQU0sTUFBTSxDQUFDLFNBaUJkO1FBaEJDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWCxJQUFNLElBQUksR0FBRyxvQkFBVyxDQUFDLHVCQUF1QixDQUFDLENBQUM7WUFDbEQsS0FBSSxDQUFDLE1BQU0sR0FBRyxpQkFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMzQzthQUFNLElBQUksY0FBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3pCLEtBQUksQ0FBQyxNQUFNLEdBQUcsaUJBQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2xEO2FBQU0sSUFBSSxvQkFBWSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQy9CLGlCQUFNLHdCQUF3QixhQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUM1QzthQUFNLElBQUksbUJBQVcsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUM5QixpQkFBTSx1QkFBdUIsYUFBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDM0M7YUFBTTtZQUNMLE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztTQUM3QztRQUVELElBQUksS0FBSSxDQUFDLE1BQU0sRUFBRTtZQUNmLEtBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7U0FDcEM7O0lBQ0gsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCx5QkFBTyxHQUFQO1FBQ0UsSUFBTSxNQUFNLEdBQWdCO1lBQzFCLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDO2lCQUNsQyxRQUFRLENBQUMsS0FBSyxDQUFDO2lCQUNmLFdBQVcsRUFBRTtTQUNqQixDQUFDO1FBRUYsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRTtZQUNsQixNQUFNLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztpQkFDeEIsUUFBUSxDQUFDLEVBQUUsQ0FBQztpQkFDWixRQUFRLENBQUMsS0FBSyxDQUFDO2lCQUNmLFdBQVcsRUFBRSxDQUFDO1NBQ2xCO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsNEJBQVUsR0FBVixVQUFXLE1BQXNCO1FBQ3ZCLElBQUEsd0JBQUcsQ0FBb0I7UUFDL0IsK0ZBQStGO1FBQy9GLElBQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRTVFLElBQUksQ0FBQyxNQUFNLElBQUksTUFBTSxLQUFLLG9CQUFhLENBQUMsTUFBTSxFQUFFO1lBQzlDLDZCQUE2QjtZQUM3QixPQUFPLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUMxRDthQUFNLElBQUksTUFBTSxLQUFLLG9CQUFhLENBQUMsR0FBRyxFQUFFO1lBQ3ZDLE9BQU8sS0FBSyxDQUFDLDBCQUEwQixDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ3ZEO1FBQ0QsTUFBTSxJQUFJLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSCw2QkFBVyxHQUFYLFVBQVksT0FBZTtRQUN6QixJQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuRCxJQUFBLHdCQUFHLENBQW9CO1FBQy9CLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDUixNQUFNLElBQUksS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7U0FDeEM7UUFDRCxJQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNoRixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSCxpQ0FBZSxHQUFmLFVBQWdCLE9BQWUsRUFBRSxTQUFpQjtRQUNoRCxJQUFNLGVBQWUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM3RCxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLG9CQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEQsT0FBTyxLQUFLLENBQUMsZUFBZSxDQUFDLGVBQWUsRUFBRSxPQUFPLEVBQUUsU0FBUyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMxRixDQUFDO0lBQ0gsY0FBQztBQUFELENBQUMsQUFqR0QsQ0FBNkIsbURBQXdCLEdBaUdwRDtBQWpHWSwwQkFBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJhbmRvbUJ5dGVzIH0gZnJvbSAnY3J5cHRvJztcbmltcG9ydCB7IEhETm9kZSB9IGZyb20gJ0BiaXRnby91dHhvLWxpYic7XG5pbXBvcnQgeyBBZGRyZXNzRm9ybWF0IH0gZnJvbSAnLi4vYmFzZUNvaW4vZW51bSc7XG5pbXBvcnQgeyBEZWZhdWx0S2V5cywgaXNQcml2YXRlS2V5LCBpc1B1YmxpY0tleSwgaXNTZWVkLCBLZXlQYWlyT3B0aW9ucyB9IGZyb20gJy4uL2Jhc2VDb2luL2lmYWNlJztcbmltcG9ydCB7IFNlY3AyNTZrMUV4dGVuZGVkS2V5UGFpciB9IGZyb20gJy4uL2Jhc2VDb2luL3NlY3AyNTZrMUV4dGVuZGVkS2V5UGFpcic7XG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tICcuL3V0aWxzJztcblxuY29uc3QgREVGQVVMVF9TRUVEX1NJWkVfQllURVMgPSAxNjtcblxuLyoqXG4gKiBUcm9uIGtleXMgYW5kIGFkZHJlc3MgbWFuYWdlbWVudC5cbiAqL1xuZXhwb3J0IGNsYXNzIEtleVBhaXIgZXh0ZW5kcyBTZWNwMjU2azFFeHRlbmRlZEtleVBhaXIge1xuICAvKipcbiAgICogUHVibGljIGNvbnN0cnVjdG9yLiBCeSBkZWZhdWx0LCBjcmVhdGVzIGEga2V5IHBhaXIgd2l0aCBhIHJhbmRvbSBtYXN0ZXIgc2VlZC5cbiAgICpcbiAgICogQHBhcmFtIHtLZXlQYWlyT3B0aW9uc30gc291cmNlIEVpdGhlciBhIG1hc3RlciBzZWVkLCBhIHByaXZhdGUga2V5IChleHRlbmRlZCBvciByYXcpLCBvciBhIHB1YmxpYyBrZXlcbiAgICogICAgIChleHRlbmRlZCwgY29tcHJlc3NlZCwgb3IgdW5jb21wcmVzc2VkKVxuICAgKi9cbiAgY29uc3RydWN0b3Ioc291cmNlPzogS2V5UGFpck9wdGlvbnMpIHtcbiAgICBzdXBlcihzb3VyY2UpO1xuICAgIGlmICghc291cmNlKSB7XG4gICAgICBjb25zdCBzZWVkID0gcmFuZG9tQnl0ZXMoREVGQVVMVF9TRUVEX1NJWkVfQllURVMpO1xuICAgICAgdGhpcy5oZE5vZGUgPSBIRE5vZGUuZnJvbVNlZWRCdWZmZXIoc2VlZCk7XG4gICAgfSBlbHNlIGlmIChpc1NlZWQoc291cmNlKSkge1xuICAgICAgdGhpcy5oZE5vZGUgPSBIRE5vZGUuZnJvbVNlZWRCdWZmZXIoc291cmNlLnNlZWQpO1xuICAgIH0gZWxzZSBpZiAoaXNQcml2YXRlS2V5KHNvdXJjZSkpIHtcbiAgICAgIHN1cGVyLnJlY29yZEtleXNGcm9tUHJpdmF0ZUtleShzb3VyY2UucHJ2KTtcbiAgICB9IGVsc2UgaWYgKGlzUHVibGljS2V5KHNvdXJjZSkpIHtcbiAgICAgIHN1cGVyLnJlY29yZEtleXNGcm9tUHVibGljS2V5KHNvdXJjZS5wdWIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQga2V5IHBhaXIgb3B0aW9ucycpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmhkTm9kZSkge1xuICAgICAgdGhpcy5rZXlQYWlyID0gdGhpcy5oZE5vZGUua2V5UGFpcjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVHJvbiBkZWZhdWx0IGtleXMgZm9ybWF0IGlzIHJhdyBwcml2YXRlIGFuZCB1bmNvbXByZXNzZWQgcHVibGljIGtleVxuICAgKlxuICAgKiBAcmV0dXJucyB7RGVmYXVsdEtleXN9IFRoZSBrZXlzIGluIHRoZSBwcm90b2NvbCBkZWZhdWx0IGtleSBmb3JtYXRcbiAgICovXG4gIGdldEtleXMoKTogRGVmYXVsdEtleXMge1xuICAgIGNvbnN0IHJlc3VsdDogRGVmYXVsdEtleXMgPSB7XG4gICAgICBwdWI6IHRoaXMua2V5UGFpci5RLmdldEVuY29kZWQoZmFsc2UpXG4gICAgICAgIC50b1N0cmluZygnaGV4JylcbiAgICAgICAgLnRvVXBwZXJDYXNlKCksXG4gICAgfTtcblxuICAgIGlmICh0aGlzLmtleVBhaXIuZCkge1xuICAgICAgcmVzdWx0LnBydiA9IHRoaXMua2V5UGFpci5kXG4gICAgICAgIC50b0J1ZmZlcigzMilcbiAgICAgICAgLnRvU3RyaW5nKCdoZXgnKVxuICAgICAgICAudG9VcHBlckNhc2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYSBwdWJsaWMgYWRkcmVzcyBpbiB0aGUgc3BlY2lmaWVkIGZvcm1hdCwgb3IgaW4gYmFzZTU4IGlmIG5vbmUgaXMgcHJvdmlkZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7QWRkcmVzc0Zvcm1hdH0gZm9ybWF0IFRoZSBhZGRyZXNzIHNwZWNpZmllZCBmb3JtYXRcbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIHB1YmxpYyBhZGRyZXNzIGluIHRoZSBzcGVjaWZpZWQgZm9ybWF0XG4gICAqL1xuICBnZXRBZGRyZXNzKGZvcm1hdD86IEFkZHJlc3NGb3JtYXQpOiBzdHJpbmcge1xuICAgIGNvbnN0IHsgcHViIH0gPSB0aGlzLmdldEtleXMoKTtcbiAgICAvLyBUaGVzZSBhcmUgY3VzdG9tIFRyb24gbWV0aG9kcy4gVGhleSBjYW4gcHJvYmFibHkgYmUgcmVwbGFjZWQgd2l0aCBvdGhlciBtZXRob2RzIG9yIGxpYnJhcmllc1xuICAgIGNvbnN0IGFkZHJlc3NCeXRlcyA9IFV0aWxzLmdldFJhd0FkZHJlc3NGcm9tUHViS2V5KEJ1ZmZlci5mcm9tKHB1YiwgJ2hleCcpKTtcblxuICAgIGlmICghZm9ybWF0IHx8IGZvcm1hdCA9PT0gQWRkcmVzc0Zvcm1hdC5iYXNlNTgpIHtcbiAgICAgIC8vIERlZmF1bHQgYWRkcmVzcyBhcmUgaW4gaGV4XG4gICAgICByZXR1cm4gVXRpbHMuZ2V0QmFzZTU4QWRkcmVzc0Zyb21CeXRlQXJyYXkoYWRkcmVzc0J5dGVzKTtcbiAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gQWRkcmVzc0Zvcm1hdC5oZXgpIHtcbiAgICAgIHJldHVybiBVdGlscy5nZXRIZXhBZGRyZXNzRnJvbUJ5dGVBcnJheShhZGRyZXNzQnl0ZXMpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIGFkZHJlc3MgZm9ybWF0Jyk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgc2lnbmF0dXJlIGZvciBhbiBhcmJpdHJhcnkgc3RyaW5nIHdpdGggdGhlIGN1cnJlbnQgcHJpdmF0ZSBrZXkgdXNpbmcga2VjY2FrMjU2XG4gICAqIGhhc2hpbmcgYWxnb3JpdGhtLiBUaHJvd3MgaWYgdGhlcmUgaXMgbm8gcHJpdmF0ZSBrZXkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIHRvIHByb2R1Y2UgYSBzaWduYXR1cmUgZm9yXG4gICAqIEByZXR1cm5zIHtCdWZmZXJ9IFRoZSBzaWduYXR1cmUgYXMgYSBidWZmZXJcbiAgICovXG4gIHNpZ25NZXNzYWdlKG1lc3NhZ2U6IHN0cmluZyk6IEJ1ZmZlciB7XG4gICAgY29uc3QgbWVzc2FnZVRvU2lnbiA9IEJ1ZmZlci5mcm9tKG1lc3NhZ2UpLnRvU3RyaW5nKCdoZXgnKTtcbiAgICBjb25zdCB7IHBydiB9ID0gdGhpcy5nZXRLZXlzKCk7XG4gICAgaWYgKCFwcnYpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBwcml2YXRlIGtleScpO1xuICAgIH1cbiAgICBjb25zdCBzaWduYXR1cmUgPSBVdGlscy5zaWduU3RyaW5nKG1lc3NhZ2VUb1NpZ24sIHBydiwgdHJ1ZSkucmVwbGFjZSgvXjB4LywgJycpO1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShzaWduYXR1cmUsICdoZXgnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWZXJpZmllcyBhIG1lc3NhZ2Ugc2lnbmF0dXJlIHVzaW5nIHRoZSBjdXJyZW50IHB1YmxpYyBrZXkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIHNpZ25lZFxuICAgKiBAcGFyYW0ge0J1ZmZlcn0gc2lnbmF0dXJlIHRvIHZlcmlmeVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgbWVzc2FnZSB3YXMgc2lnbmVkIHdpdGggdGhlIGN1cnJlbnQga2V5IHBhaXJcbiAgICovXG4gIHZlcmlmeVNpZ25hdHVyZShtZXNzYWdlOiBzdHJpbmcsIHNpZ25hdHVyZTogQnVmZmVyKTogYm9vbGVhbiB7XG4gICAgY29uc3QgbWVzc2FnZVRvVmVyaWZ5ID0gQnVmZmVyLmZyb20obWVzc2FnZSkudG9TdHJpbmcoJ2hleCcpO1xuICAgIGNvbnN0IGFkZHJlc3MgPSB0aGlzLmdldEFkZHJlc3MoQWRkcmVzc0Zvcm1hdC5iYXNlNTgpO1xuICAgIHJldHVybiBVdGlscy52ZXJpZnlTaWduYXR1cmUobWVzc2FnZVRvVmVyaWZ5LCBhZGRyZXNzLCBzaWduYXR1cmUudG9TdHJpbmcoJ2hleCcpLCB0cnVlKTtcbiAgfVxufVxuIl19