"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var baseCoin_1 = require("../baseCoin");
var errors_1 = require("../baseCoin/errors");
var types_1 = require("./types");
var utils_1 = require("./utils");
var UNSUPPORTED_COIN_NAME = 'unsupported';
var Transaction = /** @class */ (function (_super) {
    __extends(Transaction, _super);
    /**
     * Public constructor.
     *
     * @param {Readonly<CoinConfig>} coinConfig
     * @param common the network commons
     * @param {TxData} txData The object transaction data or encoded transaction data
     */
    function Transaction(coinConfig, common, txData) {
        var _this = _super.call(this, coinConfig) || this;
        _this._common = common;
        if (txData) {
            _this.setTransactionData(txData);
        }
        return _this;
    }
    /**
     * return a new Transaction initialized with the serialized tx string
     *
     * @param coinConfig The coin configuration object
     * @param common network commons
     * @param serializedTx The serialized tx string with which to initialize the transaction
     * @returns a new transaction object
     */
    Transaction.fromSerialized = function (coinConfig, common, serializedTx) {
        return new Transaction(coinConfig, common, types_1.EthTransactionData.fromSerialized(serializedTx, common).toJson());
    };
    /**
     * Set the transaction data
     *
     * @param {TxData} txData The transaction data to set
     */
    Transaction.prototype.setTransactionData = function (txData) {
        this._transactionData = types_1.EthTransactionData.fromJson(txData, this._common);
        this.updateFields();
    };
    /**
     * Update the internal fields based on the currently set transaction data, if there is any
     */
    Transaction.prototype.updateFields = function () {
        if (!this._transactionData) {
            return;
        }
        var txData = this._transactionData.toJson();
        if (txData.id) {
            this._id = txData.id;
        }
        this._type = utils_1.classifyTransaction(txData.data);
        // reset arrays to empty to ensure that they are only set with one set of fresh values
        this._inputs = [];
        this._outputs = [];
        this._signatures = [];
        if (utils_1.hasSignature(txData)) {
            this._signatures.push(utils_1.toStringSig({ v: txData.v, r: txData.r, s: txData.s }));
        }
        // only send transactions have inputs / outputs / signatures to parse
        if (this._type === baseCoin_1.TransactionType.Send) {
            var _a = utils_1.decodeTransferData(txData.data), to = _a.to, amount = _a.amount, tokenContractAddress = _a.tokenContractAddress, signature = _a.signature;
            var coinName = void 0;
            if (tokenContractAddress) {
                var token = utils_1.getToken(tokenContractAddress);
                coinName = token ? token.name : UNSUPPORTED_COIN_NAME;
            }
            else {
                coinName = this._coinConfig.name;
            }
            this.outputs.push({
                address: to,
                value: amount,
                coin: coinName,
            });
            this.inputs.push({
                address: txData.to,
                value: amount,
                coin: coinName,
            });
            this._signatures.push(signature);
        }
    };
    /**
     * Set the transaction type
     *
     * @param {TransactionType} transactionType The transaction type to be set
     */
    Transaction.prototype.setTransactionType = function (transactionType) {
        this._type = transactionType;
    };
    /** @inheritdoc */
    Transaction.prototype.canSign = function (key) {
        // TODO: implement this validation for the ethereum network
        return true;
    };
    /**
     * Sign the transaction with the provided key. It does not check if the signer is allowed to sign
     * it or not.
     *
     * @param {KeyPair} keyPair The key to sign the transaction with
     */
    Transaction.prototype.sign = function (keyPair) {
        return __awaiter(this, void 0, void 0, function () {
            var txData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this._transactionData) {
                            throw new errors_1.InvalidTransactionError('No transaction data to sign');
                        }
                        if (!keyPair.getKeys().prv) {
                            throw new errors_1.SigningError('Missing private key');
                        }
                        return [4 /*yield*/, this._transactionData.sign(keyPair)];
                    case 1:
                        _a.sent();
                        txData = this._transactionData.toJson();
                        this._signatures.push(utils_1.toStringSig({ v: txData.v, r: txData.r, s: txData.s }));
                        return [2 /*return*/];
                }
            });
        });
    };
    /** @inheritdoc */
    Transaction.prototype.toBroadcastFormat = function () {
        if (this._transactionData) {
            return this._transactionData.toSerialized();
        }
        throw new errors_1.InvalidTransactionError('No transaction data to format');
    };
    /** @inheritdoc */
    Transaction.prototype.toJson = function () {
        if (this._transactionData) {
            return this._transactionData.toJson();
        }
        throw new errors_1.InvalidTransactionError('Empty transaction');
    };
    return Transaction;
}(baseCoin_1.BaseTransaction));
exports.Transaction = Transaction;
//# sourceMappingURL=data:application/json;base64,