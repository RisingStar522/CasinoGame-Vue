"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var ethereumjs_tx_1 = require("ethereumjs-tx");
var ethereumjs_util_1 = require("ethereumjs-util");
/**
 * An Ethereum transaction with helpers for serialization and deserialization.
 */
var EthTransactionData = /** @class */ (function () {
    function EthTransactionData(tx, args) {
        this.tx = tx;
        this.args = args;
    }
    /**
     * Build an ethereum transaction from its JSON representation
     *
     * @param tx The JSON representation of the transaction
     * @param common
     */
    EthTransactionData.fromJson = function (tx, common) {
        return new EthTransactionData(new ethereumjs_tx_1.Transaction({
            nonce: ethereumjs_util_1.addHexPrefix(new bignumber_js_1.default(tx.nonce).toString(16)),
            to: tx.to,
            gasPrice: ethereumjs_util_1.addHexPrefix(new bignumber_js_1.default(tx.gasPrice).toString(16)),
            gasLimit: ethereumjs_util_1.addHexPrefix(new bignumber_js_1.default(tx.gasLimit).toString(16)),
            value: ethereumjs_util_1.addHexPrefix(new bignumber_js_1.default(tx.value).toString(16)),
            data: tx.data,
            v: tx.v,
            r: tx.r,
            s: tx.s,
        }, { common: common }), { deployedAddress: tx.deployedAddress, chainId: ethereumjs_util_1.addHexPrefix(new bignumber_js_1.default(Number(tx.chainId)).toString(16)) });
    };
    /**
     * Build an ethereum transaction from its string serialization
     *
     * @param tx The string serialization of the ethereum transaction
     * @param common
     */
    EthTransactionData.fromSerialized = function (tx, common) {
        return new EthTransactionData(new ethereumjs_tx_1.Transaction(tx, { common: common }));
    };
    EthTransactionData.prototype.sign = function (keyPair) {
        var privateKey = Buffer.from(keyPair.getKeys().prv, 'hex');
        this.tx.sign(privateKey);
    };
    /** @inheritdoc */
    EthTransactionData.prototype.toJson = function () {
        var result = {
            nonce: ethereumjs_util_1.bufferToInt(this.tx.nonce),
            gasPrice: new bignumber_js_1.default(ethereumjs_util_1.bufferToHex(this.tx.gasPrice), 16).toString(10),
            gasLimit: new bignumber_js_1.default(ethereumjs_util_1.bufferToHex(this.tx.gasLimit), 16).toString(10),
            value: this.tx.value.length === 0 ? '0' : new bignumber_js_1.default(ethereumjs_util_1.bufferToHex(this.tx.value), 16).toString(10),
            data: ethereumjs_util_1.bufferToHex(this.tx.data),
            id: ethereumjs_util_1.addHexPrefix(ethereumjs_util_1.bufferToHex(this.tx.hash(true))),
        };
        if (this.tx.to && this.tx.to.length) {
            result.to = ethereumjs_util_1.bufferToHex(this.tx.to);
        }
        if (this.tx.verifySignature()) {
            result.from = ethereumjs_util_1.bufferToHex(this.tx.getSenderAddress());
            result.v = ethereumjs_util_1.bufferToHex(this.tx.v);
            result.r = ethereumjs_util_1.bufferToHex(this.tx.r);
            result.s = ethereumjs_util_1.bufferToHex(this.tx.s);
        }
        result.chainId = ethereumjs_util_1.addHexPrefix(this.tx.getChainId().toString(16));
        if (this.args && this.args.deployedAddress) {
            result.deployedAddress = this.args.deployedAddress;
        }
        return result;
    };
    /** @inheritdoc */
    EthTransactionData.prototype.toSerialized = function () {
        return ethereumjs_util_1.addHexPrefix(this.tx.serialize().toString('hex'));
    };
    return EthTransactionData;
}());
exports.EthTransactionData = EthTransactionData;
//# sourceMappingURL=data:application/json;base64,