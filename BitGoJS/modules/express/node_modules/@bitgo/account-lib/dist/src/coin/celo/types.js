"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var local_wallet_1 = require("@celo/contractkit/lib/wallets/local-wallet");
var ethereumjs_util_1 = require("ethereumjs-util");
var CeloTransaction = /** @class */ (function () {
    function CeloTransaction(tx) {
        this._feeCurrency = ethereumjs_util_1.toBuffer('0x');
        this._gatewayFeeRecipient = ethereumjs_util_1.toBuffer('0x');
        this._gatewayFee = ethereumjs_util_1.toBuffer('0x');
        this.to = ethereumjs_util_1.toBuffer([]);
        this.v = ethereumjs_util_1.toBuffer([]);
        this.r = ethereumjs_util_1.toBuffer([]);
        this.s = ethereumjs_util_1.toBuffer([]);
        this.nonce = ethereumjs_util_1.toBuffer(this.sanitizeHexString(tx.nonce));
        this.gasLimit = ethereumjs_util_1.toBuffer(this.sanitizeHexString(tx.gasLimit));
        this.gasPrice = ethereumjs_util_1.toBuffer(this.sanitizeHexString(tx.gasPrice));
        this.data = ethereumjs_util_1.toBuffer(tx.data);
        this.value = ethereumjs_util_1.toBuffer(this.sanitizeHexString(tx.value));
        if (tx.to) {
            this.to = ethereumjs_util_1.toBuffer(tx.to);
        }
        if (tx.v) {
            this.v = ethereumjs_util_1.toBuffer(tx.v);
        }
        if (tx.r) {
            this.r = ethereumjs_util_1.toBuffer(tx.r);
        }
        if (tx.s) {
            this.s = ethereumjs_util_1.toBuffer(tx.s);
        }
        if (tx.from) {
            this._from = ethereumjs_util_1.toBuffer(tx.from);
        }
        this.initRaw();
    }
    // TODO: validate if this needs to be moved to Utils class
    /**
     * Clean hex formatted values ensuring they have an even length
     *
     * @param numberValue Hex formatted number value. Example '0x01'
     * @returns sanitized value
     */
    CeloTransaction.prototype.sanitizeHexString = function (numberValue) {
        if (numberValue === '0x0') {
            return '0x';
        }
        else if (numberValue.length % 2 === 0) {
            return numberValue;
        }
        return '0x0' + numberValue.slice(2);
    };
    CeloTransaction.prototype.initRaw = function () {
        this.raw = [
            this.nonce,
            this.gasPrice,
            this.gasLimit,
            this._feeCurrency,
            this._gatewayFeeRecipient,
            this._gatewayFee,
            this.to,
            this.value,
            this.data,
            this.v,
            this.r,
            this.s,
        ];
    };
    CeloTransaction.prototype.hash = function (includeSignature) {
        var items;
        if (includeSignature) {
            items = this.raw;
        }
        else {
            items = this.raw
                .slice(0, 9)
                .concat([ethereumjs_util_1.toBuffer(this.getChainId()), ethereumjs_util_1.stripZeros(ethereumjs_util_1.toBuffer(0)), ethereumjs_util_1.stripZeros(ethereumjs_util_1.toBuffer(0))]);
        }
        return ethereumjs_util_1.rlphash(items);
    };
    CeloTransaction.prototype.getSenderAddress = function () {
        if (this._from) {
            return this._from;
        }
        var pubKey = this.getSenderPublicKey();
        this._from = ethereumjs_util_1.publicToAddress(pubKey);
        return this._from;
    };
    CeloTransaction.prototype.getSenderPublicKey = function () {
        if (this.verifySignature()) {
            // If the signature was verified successfully the _senderPubKey field is defined
            return this._senderPubKey;
        }
        throw new Error('Invalid Signature');
    };
    CeloTransaction.prototype.serialize = function () {
        return ethereumjs_util_1.rlp.encode(this.raw);
    };
    CeloTransaction.prototype.sign = function (privateKey) {
        this._signatures = [this.v, this.r, this.s, privateKey];
    };
    CeloTransaction.prototype.verifySignature = function () {
        var msgHash = this.hash(false);
        try {
            var chainId = this.getChainId();
            var v = ethereumjs_util_1.bufferToInt(this.v) - (2 * chainId + 35);
            this._senderPubKey = ethereumjs_util_1.ecrecover(msgHash, v + 27, this.r, this.s);
        }
        catch (e) {
            return false;
        }
        return !!this._senderPubKey;
    };
    CeloTransaction.prototype.getChainId = function () {
        var chainId = ethereumjs_util_1.bufferToInt(this.v);
        if (this.r.length && this.s.length) {
            chainId = (chainId - 35) >> 1;
        }
        return chainId;
    };
    return CeloTransaction;
}());
exports.CeloTransaction = CeloTransaction;
var CeloTransactionData = /** @class */ (function () {
    function CeloTransactionData(tx, deployedAddress) {
        this.tx = tx;
        this.deployedAddress = deployedAddress;
    }
    CeloTransactionData.fromJson = function (tx) {
        var chainId = ethereumjs_util_1.addHexPrefix(new bignumber_js_1.default(Number(tx.chainId)).toString(16));
        return new CeloTransactionData(new CeloTransaction({
            nonce: ethereumjs_util_1.addHexPrefix(new bignumber_js_1.default(tx.nonce).toString(16)),
            to: tx.to,
            gasPrice: ethereumjs_util_1.addHexPrefix(new bignumber_js_1.default(tx.gasPrice).toString(16)),
            gasLimit: ethereumjs_util_1.addHexPrefix(new bignumber_js_1.default(tx.gasLimit).toString(16)),
            value: ethereumjs_util_1.addHexPrefix(new bignumber_js_1.default(tx.value).toString(16)),
            data: tx.data === '0x' ? '' : tx.data,
            from: tx.from,
            s: tx.s,
            r: tx.r,
            v: tx.v || chainId,
        }), tx.deployedAddress);
    };
    CeloTransactionData.prototype.sign = function (keyPair) {
        return __awaiter(this, void 0, void 0, function () {
            var privateKey, data, celoLocalWallet, rawTransaction, nonceBigNumber;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        privateKey = ethereumjs_util_1.addHexPrefix(keyPair.getKeys().prv);
                        data = CeloTransactionData.txJsonToCeloTx(this.toJson(), keyPair.getAddress());
                        celoLocalWallet = new local_wallet_1.LocalWallet();
                        celoLocalWallet.addAccount(privateKey);
                        return [4 /*yield*/, celoLocalWallet.signTransaction(data)];
                    case 1:
                        rawTransaction = _a.sent();
                        nonceBigNumber = new bignumber_js_1.default(rawTransaction.tx.nonce);
                        rawTransaction.tx.nonce = ethereumjs_util_1.addHexPrefix(nonceBigNumber.toString(16));
                        rawTransaction.tx.data = data.data;
                        rawTransaction.tx.gasLimit = rawTransaction.tx.gas;
                        this.tx = new CeloTransaction(rawTransaction.tx);
                        this.tx.sign(ethereumjs_util_1.toBuffer(privateKey));
                        return [2 /*return*/];
                }
            });
        });
    };
    /** @inheritdoc */
    CeloTransactionData.prototype.toJson = function () {
        var result = {
            nonce: ethereumjs_util_1.bufferToInt(this.tx.nonce),
            gasPrice: new bignumber_js_1.default(ethereumjs_util_1.bufferToHex(this.tx.gasPrice), 16).toString(10),
            gasLimit: new bignumber_js_1.default(ethereumjs_util_1.bufferToHex(this.tx.gasLimit), 16).toString(10),
            value: this.tx.value.length === 0 ? '0' : new bignumber_js_1.default(ethereumjs_util_1.bufferToHex(this.tx.value), 16).toString(10),
            data: ethereumjs_util_1.bufferToHex(this.tx.data),
            id: ethereumjs_util_1.addHexPrefix(ethereumjs_util_1.bufferToHex(this.tx.hash(true))),
        };
        if (this.tx.to && this.tx.to.length) {
            result.to = ethereumjs_util_1.bufferToHex(this.tx.to);
        }
        if (this.tx.verifySignature()) {
            result.from = ethereumjs_util_1.bufferToHex(this.tx.getSenderAddress());
        }
        var chainId = this.tx.getChainId();
        if (chainId) {
            result.chainId = chainId.toString();
        }
        if (this.deployedAddress) {
            result.deployedAddress = this.deployedAddress;
        }
        this.setSignatureFields(result);
        return result;
    };
    CeloTransactionData.prototype.setSignatureFields = function (result) {
        if (this.tx.v && this.tx.v.length) {
            result.v = ethereumjs_util_1.bufferToHex(this.tx.v);
        }
        if (this.tx.r && this.tx.r.length) {
            result.r = ethereumjs_util_1.bufferToHex(this.tx.r);
        }
        if (this.tx.s && this.tx.s.length) {
            result.s = ethereumjs_util_1.bufferToHex(this.tx.s);
        }
    };
    /** @inheritdoc */
    CeloTransactionData.prototype.toSerialized = function () {
        return ethereumjs_util_1.addHexPrefix(this.tx.serialize().toString('hex'));
    };
    CeloTransactionData.txJsonToCeloTx = function (txJson, signer) {
        // the celo library requires you to specify the signer address with the from field
        return Object.assign({}, txJson, { gas: txJson.gasLimit, from: signer });
    };
    return CeloTransactionData;
}());
exports.CeloTransactionData = CeloTransactionData;
//# sourceMappingURL=data:application/json;base64,