"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var statics_1 = require("@bitgo/statics");
var errors_1 = require("./coin/baseCoin/errors");
var crypto = __importStar(require("./utils/crypto"));
exports.crypto = crypto;
// coins
var BaseCoin = __importStar(require("./coin/baseCoin"));
exports.BaseCoin = BaseCoin;
var Trx = __importStar(require("./coin/trx"));
exports.Trx = Trx;
var Xtz = __importStar(require("./coin/xtz"));
exports.Xtz = Xtz;
var Eth = __importStar(require("./coin/eth"));
exports.Eth = Eth;
var Etc = __importStar(require("./coin/etc"));
exports.Etc = Etc;
var Rbtc = __importStar(require("./coin/rbtc"));
exports.Rbtc = Rbtc;
var Celo = __importStar(require("./coin/celo"));
exports.Celo = Celo;
var Hbar = __importStar(require("./coin/hbar"));
exports.Hbar = Hbar;
var coinBuilderMap = {
    trx: Trx.TransactionBuilder,
    ttrx: Trx.TransactionBuilder,
    xtz: Xtz.TransactionBuilder,
    txtz: Xtz.TransactionBuilder,
    etc: Etc.TransactionBuilder,
    tetc: Etc.TransactionBuilder,
    eth: Eth.TransactionBuilder,
    teth: Eth.TransactionBuilder,
    gteth: Eth.TransactionBuilder,
    rbtc: Rbtc.TransactionBuilder,
    trbtc: Rbtc.TransactionBuilder,
    celo: Celo.TransactionBuilder,
    tcelo: Celo.TransactionBuilder,
    hbar: Hbar.TransactionBuilderFactory,
    thbar: Hbar.TransactionBuilderFactory,
};
/**
 * Get the list of coin tickers supported by this library.
 */
exports.supportedCoins = Object.keys(coinBuilderMap);
/**
 * Get a transaction builder for the given coin.
 *
 * @param coinName One of the {@code supportedCoins}
 * @returns An instance of a {@code TransactionBuilder}
 */
function getBuilder(coinName) {
    var builderClass = coinBuilderMap[coinName];
    if (!builderClass) {
        throw new errors_1.BuildTransactionError("Coin " + coinName + " not supported");
    }
    return new builderClass(statics_1.coins.get(coinName));
}
exports.getBuilder = getBuilder;
/**
 * Register a new coin instance with its builder factory
 *
 * @param {string} coinName coin name as it was registered in @bitgo/statics
 * @param {any} builderFactory the builder factory class for that coin
 * @returns {any} the factory instance for the registered coin
 */
function register(coinName, builderFactory) {
    var coinConfig = statics_1.coins.get(coinName);
    var factory = new builderFactory(coinConfig);
    // coinBuilderMap[coinName] = factory;
    coinBuilderMap[coinName] = builderFactory; // For now register the constructor function until reimplement getBuilder method
    return factory;
}
exports.register = register;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsMENBQStEO0FBQy9ELGlEQUErRDtBQUUvRCxxREFBeUM7QUFDaEMsd0JBQU07QUFDZixRQUFRO0FBQ1Isd0RBQTRDO0FBQ25DLDRCQUFRO0FBRWpCLDhDQUFrQztBQUN6QixrQkFBRztBQUVaLDhDQUFrQztBQUN6QixrQkFBRztBQUVaLDhDQUFrQztBQUN6QixrQkFBRztBQUVaLDhDQUFrQztBQUN6QixrQkFBRztBQUVaLGdEQUFvQztBQUMzQixvQkFBSTtBQUViLGdEQUFvQztBQUMzQixvQkFBSTtBQUViLGdEQUFvQztBQUMzQixvQkFBSTtBQUViLElBQU0sY0FBYyxHQUFHO0lBQ3JCLEdBQUcsRUFBRSxHQUFHLENBQUMsa0JBQWtCO0lBQzNCLElBQUksRUFBRSxHQUFHLENBQUMsa0JBQWtCO0lBQzVCLEdBQUcsRUFBRSxHQUFHLENBQUMsa0JBQWtCO0lBQzNCLElBQUksRUFBRSxHQUFHLENBQUMsa0JBQWtCO0lBQzVCLEdBQUcsRUFBRSxHQUFHLENBQUMsa0JBQWtCO0lBQzNCLElBQUksRUFBRSxHQUFHLENBQUMsa0JBQWtCO0lBQzVCLEdBQUcsRUFBRSxHQUFHLENBQUMsa0JBQWtCO0lBQzNCLElBQUksRUFBRSxHQUFHLENBQUMsa0JBQWtCO0lBQzVCLEtBQUssRUFBRSxHQUFHLENBQUMsa0JBQWtCO0lBQzdCLElBQUksRUFBRSxJQUFJLENBQUMsa0JBQWtCO0lBQzdCLEtBQUssRUFBRSxJQUFJLENBQUMsa0JBQWtCO0lBQzlCLElBQUksRUFBRSxJQUFJLENBQUMsa0JBQWtCO0lBQzdCLEtBQUssRUFBRSxJQUFJLENBQUMsa0JBQWtCO0lBQzlCLElBQUksRUFBRSxJQUFJLENBQUMseUJBQXlCO0lBQ3BDLEtBQUssRUFBRSxJQUFJLENBQUMseUJBQXlCO0NBQ3RDLENBQUM7QUFFRjs7R0FFRztBQUNVLFFBQUEsY0FBYyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7QUFFMUQ7Ozs7O0dBS0c7QUFDSCxTQUFnQixVQUFVLENBQUMsUUFBZ0I7SUFDekMsSUFBTSxZQUFZLEdBQUcsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzlDLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDakIsTUFBTSxJQUFJLDhCQUFxQixDQUFDLFVBQVEsUUFBUSxtQkFBZ0IsQ0FBQyxDQUFDO0tBQ25FO0lBRUQsT0FBTyxJQUFJLFlBQVksQ0FBQyxlQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDL0MsQ0FBQztBQVBELGdDQU9DO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsU0FBZ0IsUUFBUSxDQUN0QixRQUFnQixFQUNoQixjQUE4RDtJQUU5RCxJQUFNLFVBQVUsR0FBRyxlQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3ZDLElBQU0sT0FBTyxHQUFHLElBQUksY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQy9DLHNDQUFzQztJQUN0QyxjQUFjLENBQUMsUUFBUSxDQUFDLEdBQUcsY0FBYyxDQUFDLENBQUMsZ0ZBQWdGO0lBQzNILE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUM7QUFURCw0QkFTQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvaW5zLCBCYXNlQ29pbiBhcyBDb2luQ29uZmlnIH0gZnJvbSAnQGJpdGdvL3N0YXRpY3MnO1xuaW1wb3J0IHsgQnVpbGRUcmFuc2FjdGlvbkVycm9yIH0gZnJvbSAnLi9jb2luL2Jhc2VDb2luL2Vycm9ycyc7XG5cbmltcG9ydCAqIGFzIGNyeXB0byBmcm9tICcuL3V0aWxzL2NyeXB0byc7XG5leHBvcnQgeyBjcnlwdG8gfTtcbi8vIGNvaW5zXG5pbXBvcnQgKiBhcyBCYXNlQ29pbiBmcm9tICcuL2NvaW4vYmFzZUNvaW4nO1xuZXhwb3J0IHsgQmFzZUNvaW4gfTtcblxuaW1wb3J0ICogYXMgVHJ4IGZyb20gJy4vY29pbi90cngnO1xuZXhwb3J0IHsgVHJ4IH07XG5cbmltcG9ydCAqIGFzIFh0eiBmcm9tICcuL2NvaW4veHR6JztcbmV4cG9ydCB7IFh0eiB9O1xuXG5pbXBvcnQgKiBhcyBFdGggZnJvbSAnLi9jb2luL2V0aCc7XG5leHBvcnQgeyBFdGggfTtcblxuaW1wb3J0ICogYXMgRXRjIGZyb20gJy4vY29pbi9ldGMnO1xuZXhwb3J0IHsgRXRjIH07XG5cbmltcG9ydCAqIGFzIFJidGMgZnJvbSAnLi9jb2luL3JidGMnO1xuZXhwb3J0IHsgUmJ0YyB9O1xuXG5pbXBvcnQgKiBhcyBDZWxvIGZyb20gJy4vY29pbi9jZWxvJztcbmV4cG9ydCB7IENlbG8gfTtcblxuaW1wb3J0ICogYXMgSGJhciBmcm9tICcuL2NvaW4vaGJhcic7XG5leHBvcnQgeyBIYmFyIH07XG5cbmNvbnN0IGNvaW5CdWlsZGVyTWFwID0ge1xuICB0cng6IFRyeC5UcmFuc2FjdGlvbkJ1aWxkZXIsXG4gIHR0cng6IFRyeC5UcmFuc2FjdGlvbkJ1aWxkZXIsXG4gIHh0ejogWHR6LlRyYW5zYWN0aW9uQnVpbGRlcixcbiAgdHh0ejogWHR6LlRyYW5zYWN0aW9uQnVpbGRlcixcbiAgZXRjOiBFdGMuVHJhbnNhY3Rpb25CdWlsZGVyLFxuICB0ZXRjOiBFdGMuVHJhbnNhY3Rpb25CdWlsZGVyLFxuICBldGg6IEV0aC5UcmFuc2FjdGlvbkJ1aWxkZXIsXG4gIHRldGg6IEV0aC5UcmFuc2FjdGlvbkJ1aWxkZXIsXG4gIGd0ZXRoOiBFdGguVHJhbnNhY3Rpb25CdWlsZGVyLFxuICByYnRjOiBSYnRjLlRyYW5zYWN0aW9uQnVpbGRlcixcbiAgdHJidGM6IFJidGMuVHJhbnNhY3Rpb25CdWlsZGVyLFxuICBjZWxvOiBDZWxvLlRyYW5zYWN0aW9uQnVpbGRlcixcbiAgdGNlbG86IENlbG8uVHJhbnNhY3Rpb25CdWlsZGVyLFxuICBoYmFyOiBIYmFyLlRyYW5zYWN0aW9uQnVpbGRlckZhY3RvcnksXG4gIHRoYmFyOiBIYmFyLlRyYW5zYWN0aW9uQnVpbGRlckZhY3RvcnksXG59O1xuXG4vKipcbiAqIEdldCB0aGUgbGlzdCBvZiBjb2luIHRpY2tlcnMgc3VwcG9ydGVkIGJ5IHRoaXMgbGlicmFyeS5cbiAqL1xuZXhwb3J0IGNvbnN0IHN1cHBvcnRlZENvaW5zID0gT2JqZWN0LmtleXMoY29pbkJ1aWxkZXJNYXApO1xuXG4vKipcbiAqIEdldCBhIHRyYW5zYWN0aW9uIGJ1aWxkZXIgZm9yIHRoZSBnaXZlbiBjb2luLlxuICpcbiAqIEBwYXJhbSBjb2luTmFtZSBPbmUgb2YgdGhlIHtAY29kZSBzdXBwb3J0ZWRDb2luc31cbiAqIEByZXR1cm5zIEFuIGluc3RhbmNlIG9mIGEge0Bjb2RlIFRyYW5zYWN0aW9uQnVpbGRlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEJ1aWxkZXIoY29pbk5hbWU6IHN0cmluZyk6IEJhc2VDb2luLkludGVyZmFjZS5CYXNlQnVpbGRlciB7XG4gIGNvbnN0IGJ1aWxkZXJDbGFzcyA9IGNvaW5CdWlsZGVyTWFwW2NvaW5OYW1lXTtcbiAgaWYgKCFidWlsZGVyQ2xhc3MpIHtcbiAgICB0aHJvdyBuZXcgQnVpbGRUcmFuc2FjdGlvbkVycm9yKGBDb2luICR7Y29pbk5hbWV9IG5vdCBzdXBwb3J0ZWRgKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgYnVpbGRlckNsYXNzKGNvaW5zLmdldChjb2luTmFtZSkpO1xufVxuXG4vKipcbiAqIFJlZ2lzdGVyIGEgbmV3IGNvaW4gaW5zdGFuY2Ugd2l0aCBpdHMgYnVpbGRlciBmYWN0b3J5XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvaW5OYW1lIGNvaW4gbmFtZSBhcyBpdCB3YXMgcmVnaXN0ZXJlZCBpbiBAYml0Z28vc3RhdGljc1xuICogQHBhcmFtIHthbnl9IGJ1aWxkZXJGYWN0b3J5IHRoZSBidWlsZGVyIGZhY3RvcnkgY2xhc3MgZm9yIHRoYXQgY29pblxuICogQHJldHVybnMge2FueX0gdGhlIGZhY3RvcnkgaW5zdGFuY2UgZm9yIHRoZSByZWdpc3RlcmVkIGNvaW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyPFQgZXh0ZW5kcyBCYXNlQ29pbi5CYXNlVHJhbnNhY3Rpb25CdWlsZGVyRmFjdG9yeT4oXG4gIGNvaW5OYW1lOiBzdHJpbmcsXG4gIGJ1aWxkZXJGYWN0b3J5OiB7IG5ldyAoX2NvaW5Db25maWc6IFJlYWRvbmx5PENvaW5Db25maWc+KTogVCB9LFxuKTogVCB7XG4gIGNvbnN0IGNvaW5Db25maWcgPSBjb2lucy5nZXQoY29pbk5hbWUpO1xuICBjb25zdCBmYWN0b3J5ID0gbmV3IGJ1aWxkZXJGYWN0b3J5KGNvaW5Db25maWcpO1xuICAvLyBjb2luQnVpbGRlck1hcFtjb2luTmFtZV0gPSBmYWN0b3J5O1xuICBjb2luQnVpbGRlck1hcFtjb2luTmFtZV0gPSBidWlsZGVyRmFjdG9yeTsgLy8gRm9yIG5vdyByZWdpc3RlciB0aGUgY29uc3RydWN0b3IgZnVuY3Rpb24gdW50aWwgcmVpbXBsZW1lbnQgZ2V0QnVpbGRlciBtZXRob2RcbiAgcmV0dXJuIGZhY3Rvcnk7XG59XG4iXX0=