"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ethereumjs_util_1 = __importDefault(require("ethereumjs-util"));
var ethereumjs_abi_1 = __importDefault(require("ethereumjs-abi"));
var statics_1 = require("@bitgo/statics");
var errors_1 = require("../baseCoin/errors");
var utils_1 = require("./utils");
/** ETH transfer builder */
var TransferBuilder = /** @class */ (function () {
    function TransferBuilder(serializedData) {
        this._EMPTY_HEX_VALUE = '0x';
        if (serializedData) {
            this.decodeTransferData(serializedData);
        }
        else {
            // initialize with default values for non mandatory fields
            this._expirationTime = this.getExpirationTime();
            this._data = this._EMPTY_HEX_VALUE;
            this._signature = this._EMPTY_HEX_VALUE;
        }
    }
    /**
     * A method to set the ERC20 token to be transferred.
     * This ERC20 token may not be compatible with the network.
     *
     * @param {string} coin the ERC20 coin to be set
     * @returns {TransferBuilder} the transfer builder instance modified
     */
    TransferBuilder.prototype.coin = function (coin) {
        this._coin = statics_1.coins.get(coin);
        if (this._coin instanceof statics_1.ContractAddressDefinedToken) {
            this._tokenContractAddress = this._coin.contractAddress.toString();
        }
        return this;
    };
    TransferBuilder.prototype.data = function (additionalData) {
        this._signature = this._EMPTY_HEX_VALUE;
        this._data = additionalData;
        return this;
    };
    TransferBuilder.prototype.amount = function (amount) {
        if (!utils_1.isValidAmount(amount)) {
            throw new errors_1.InvalidParameterValueError('Invalid amount');
        }
        this._signature = this._EMPTY_HEX_VALUE;
        this._amount = amount;
        return this;
    };
    TransferBuilder.prototype.to = function (address) {
        if (utils_1.isValidEthAddress(address)) {
            this._signature = this._EMPTY_HEX_VALUE;
            this._toAddress = address;
            return this;
        }
        throw new errors_1.InvalidParameterValueError('Invalid address');
    };
    TransferBuilder.prototype.contractSequenceId = function (counter) {
        if (counter >= 0) {
            this._signature = this._EMPTY_HEX_VALUE;
            this._sequenceId = counter;
            return this;
        }
        throw new errors_1.InvalidParameterValueError('Invalid contract sequence id');
    };
    TransferBuilder.prototype.key = function (signKey) {
        this._signKey = signKey;
        return this;
    };
    TransferBuilder.prototype.expirationTime = function (date) {
        if (date > 0) {
            this._signature = this._EMPTY_HEX_VALUE;
            this._expirationTime = date;
            return this;
        }
        throw new errors_1.InvalidParameterValueError('Invalid expiration time');
    };
    TransferBuilder.prototype.signAndBuild = function () {
        if (this.hasMandatoryFields()) {
            if (this._tokenContractAddress !== undefined) {
                return utils_1.sendMultiSigTokenData(this._toAddress, this._amount, this._tokenContractAddress, this._expirationTime, this._sequenceId, this.getSignature());
            }
            else {
                return utils_1.sendMultiSigData(this._toAddress, this._amount, this._data, this._expirationTime, this._sequenceId, this.getSignature());
            }
        }
        throw new errors_1.BuildTransactionError('Missing transfer mandatory fields. Amount, destination (to) address and sequenceID are mandatory');
    };
    TransferBuilder.prototype.hasMandatoryFields = function () {
        return this._amount !== undefined && this._toAddress !== undefined && this._sequenceId !== undefined;
    };
    /**
     * Obtains the proper operation hash to sign either a sendMultiSig data
     * or a sendMultiSigToken data
     *
     * @returns {string} the operation hash
     */
    TransferBuilder.prototype.getOperationHash = function () {
        var operationData = this.getOperationData();
        return ethereumjs_util_1.default.bufferToHex(ethereumjs_abi_1.default.soliditySHA3.apply(ethereumjs_abi_1.default, operationData));
    };
    TransferBuilder.prototype.getOperationData = function () {
        var operationData;
        if (this._tokenContractAddress !== undefined) {
            operationData = [
                ['string', 'address', 'uint', 'address', 'uint', 'uint'],
                [
                    this.getTokenOperationHashPrefix(),
                    new ethereumjs_util_1.default.BN(ethereumjs_util_1.default.stripHexPrefix(this._toAddress), 16),
                    this._amount,
                    new ethereumjs_util_1.default.BN(ethereumjs_util_1.default.stripHexPrefix(this._tokenContractAddress), 16),
                    this._expirationTime,
                    this._sequenceId,
                ],
            ];
        }
        else {
            operationData = [
                ['string', 'address', 'uint', 'bytes', 'uint', 'uint'],
                [
                    this.getNativeOperationHashPrefix(),
                    new ethereumjs_util_1.default.BN(ethereumjs_util_1.default.stripHexPrefix(this._toAddress), 16),
                    this._amount,
                    Buffer.from(ethereumjs_util_1.default.stripHexPrefix(this._data) || '', 'hex'),
                    this._expirationTime,
                    this._sequenceId,
                ],
            ];
        }
        return operationData;
    };
    /**
     * Get the prefix used in generating an operation hash for sending tokens
     *
     * @returns the string prefix
     */
    TransferBuilder.prototype.getTokenOperationHashPrefix = function () {
        return 'ERC20';
    };
    /**
     * Get the prefix used in generating an operation hash for sending native coins
     *
     * @returns the string prefix
     */
    TransferBuilder.prototype.getNativeOperationHashPrefix = function () {
        return 'ETHER';
    };
    /** Return an expiration time, in seconds, set to one hour from now
     *
     * @returns {number} expiration time
     */
    TransferBuilder.prototype.getExpirationTime = function () {
        var currentDate = new Date();
        currentDate.setHours(currentDate.getHours() + 1);
        return currentDate.getTime() / 1000;
    };
    /**
     * If a signing key is set for this builder, recalculates the signature
     *
     * @returns {string} the signature value
     */
    TransferBuilder.prototype.getSignature = function () {
        if (this._signKey) {
            this._signature = this.ethSignMsgHash();
        }
        return this._signature;
    };
    TransferBuilder.prototype.ethSignMsgHash = function () {
        var data = this.getOperationHash();
        var signatureInParts = ethereumjs_util_1.default.ecsign(Buffer.from(ethereumjs_util_1.default.stripHexPrefix(data), 'hex'), Buffer.from(this._signKey, 'hex'));
        // Assemble strings from r, s and v
        var r = ethereumjs_util_1.default.setLengthLeft(signatureInParts.r, 32).toString('hex');
        var s = ethereumjs_util_1.default.setLengthLeft(signatureInParts.s, 32).toString('hex');
        var v = ethereumjs_util_1.default.stripHexPrefix(ethereumjs_util_1.default.intToHex(signatureInParts.v));
        // Concatenate the r, s and v parts to make the signature string
        return ethereumjs_util_1.default.addHexPrefix(r.concat(s, v));
    };
    TransferBuilder.prototype.decodeTransferData = function (data) {
        var transferData = utils_1.decodeTransferData(data);
        this._toAddress = transferData.to;
        this._amount = transferData.amount;
        this._expirationTime = transferData.expireTime;
        this._sequenceId = transferData.sequenceId;
        this._signature = transferData.signature;
        if (transferData.data) {
            this._data = transferData.data;
        }
        if (transferData.tokenContractAddress) {
            this._tokenContractAddress = transferData.tokenContractAddress;
        }
    };
    return TransferBuilder;
}());
exports.TransferBuilder = TransferBuilder;
//# sourceMappingURL=data:application/json;base64,