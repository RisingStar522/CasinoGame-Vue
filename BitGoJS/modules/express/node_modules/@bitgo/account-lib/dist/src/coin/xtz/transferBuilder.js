"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var errors_1 = require("../baseCoin/errors");
/** Tezos transfer builder. */
// TODO: implement BaseTransferBuilder
var TransferBuilder = /** @class */ (function () {
    function TransferBuilder() {
    }
    TransferBuilder.prototype.amount = function (amount) {
        this._amount = amount;
        return this;
    };
    TransferBuilder.prototype.coin = function (coin) {
        this._coin = coin;
        return this;
    };
    TransferBuilder.prototype.from = function (address) {
        this._fromAddress = address;
        return this;
    };
    TransferBuilder.prototype.to = function (address) {
        this._toAddress = address;
        return this;
    };
    TransferBuilder.prototype.fee = function (fee) {
        this._fee = fee;
        return this;
    };
    TransferBuilder.prototype.gasLimit = function (gasLimit) {
        this._gasLimit = gasLimit;
        return this;
    };
    TransferBuilder.prototype.storageLimit = function (storageLimit) {
        this._storageLimit = storageLimit;
        return this;
    };
    TransferBuilder.prototype.dataToSign = function (dataToSign) {
        this._dataToSign = dataToSign;
        return this;
    };
    TransferBuilder.prototype.counter = function (counter) {
        this._counter = counter;
        return this;
    };
    TransferBuilder.prototype.build = function () {
        if (!this._amount || !this._fromAddress || !this._toAddress || !this._fee) {
            throw new errors_1.BuildTransactionError('Missing transfer mandatory fields. Amount, from address, destination (to) address and fee are mandatory');
        }
        return {
            amount: this._amount,
            coin: this._coin,
            from: this._fromAddress,
            to: this._toAddress,
            fee: {
                fee: this._fee,
                gasLimit: this._gasLimit,
                storageLimit: this._storageLimit,
            },
            dataToSign: this._dataToSign,
            counter: this._counter,
        };
    };
    return TransferBuilder;
}());
exports.TransferBuilder = TransferBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmZXJCdWlsZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvaW4veHR6L3RyYW5zZmVyQnVpbGRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZDQUEyRDtBQUkzRCw4QkFBOEI7QUFDOUIsc0NBQXNDO0FBQ3RDO0lBQUE7SUE0RUEsQ0FBQztJQWpFQyxnQ0FBTSxHQUFOLFVBQU8sTUFBYztRQUNuQixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCw4QkFBSSxHQUFKLFVBQUssSUFBWTtRQUNmLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELDhCQUFJLEdBQUosVUFBSyxPQUFlO1FBQ2xCLElBQUksQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDO1FBQzVCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELDRCQUFFLEdBQUYsVUFBRyxPQUFlO1FBQ2hCLElBQUksQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFDO1FBQzFCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELDZCQUFHLEdBQUgsVUFBSSxHQUFXO1FBQ2IsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7UUFDaEIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsa0NBQVEsR0FBUixVQUFTLFFBQWdCO1FBQ3ZCLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO1FBQzFCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELHNDQUFZLEdBQVosVUFBYSxZQUFvQjtRQUMvQixJQUFJLENBQUMsYUFBYSxHQUFHLFlBQVksQ0FBQztRQUNsQyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxvQ0FBVSxHQUFWLFVBQVcsVUFBa0I7UUFDM0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUM7UUFDOUIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsaUNBQU8sR0FBUCxVQUFRLE9BQWU7UUFDckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7UUFDeEIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsK0JBQUssR0FBTDtRQUNFLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ3pFLE1BQU0sSUFBSSw4QkFBcUIsQ0FDN0IseUdBQXlHLENBQzFHLENBQUM7U0FDSDtRQUNELE9BQU87WUFDTCxNQUFNLEVBQUUsSUFBSSxDQUFDLE9BQU87WUFDcEIsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2hCLElBQUksRUFBRSxJQUFJLENBQUMsWUFBWTtZQUN2QixFQUFFLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDbkIsR0FBRyxFQUFFO2dCQUNILEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSTtnQkFDZCxRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVM7Z0JBQ3hCLFlBQVksRUFBRSxJQUFJLENBQUMsYUFBYTthQUNqQztZQUNELFVBQVUsRUFBRSxJQUFJLENBQUMsV0FBVztZQUM1QixPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVE7U0FDdkIsQ0FBQztJQUNKLENBQUM7SUFDSCxzQkFBQztBQUFELENBQUMsQUE1RUQsSUE0RUM7QUE1RVksMENBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCdWlsZFRyYW5zYWN0aW9uRXJyb3IgfSBmcm9tICcuLi9iYXNlQ29pbi9lcnJvcnMnO1xuaW1wb3J0IHsgaXNWYWxpZE9yaWdpbmF0ZWRBZGRyZXNzIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyBUcmFuc2ZlckRhdGEgfSBmcm9tICcuL2lmYWNlJztcblxuLyoqIFRlem9zIHRyYW5zZmVyIGJ1aWxkZXIuICovXG4vLyBUT0RPOiBpbXBsZW1lbnQgQmFzZVRyYW5zZmVyQnVpbGRlclxuZXhwb3J0IGNsYXNzIFRyYW5zZmVyQnVpbGRlciB7XG4gIHByaXZhdGUgX2Ftb3VudDogc3RyaW5nO1xuICBwcml2YXRlIF9jb2luOiBzdHJpbmc7XG4gIHByaXZhdGUgX3RvQWRkcmVzczogc3RyaW5nO1xuICBwcml2YXRlIF9mcm9tQWRkcmVzczogc3RyaW5nO1xuICBwcml2YXRlIF9mZWU6IHN0cmluZztcbiAgcHJpdmF0ZSBfZ2FzTGltaXQ6IHN0cmluZztcbiAgcHJpdmF0ZSBfc3RvcmFnZUxpbWl0OiBzdHJpbmc7XG4gIHByaXZhdGUgX2RhdGFUb1NpZ246IHN0cmluZztcbiAgcHJpdmF0ZSBfY291bnRlcjogc3RyaW5nO1xuXG4gIGFtb3VudChhbW91bnQ6IHN0cmluZyk6IFRyYW5zZmVyQnVpbGRlciB7XG4gICAgdGhpcy5fYW1vdW50ID0gYW1vdW50O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgY29pbihjb2luOiBzdHJpbmcpOiBUcmFuc2ZlckJ1aWxkZXIge1xuICAgIHRoaXMuX2NvaW4gPSBjb2luO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZnJvbShhZGRyZXNzOiBzdHJpbmcpOiBUcmFuc2ZlckJ1aWxkZXIge1xuICAgIHRoaXMuX2Zyb21BZGRyZXNzID0gYWRkcmVzcztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHRvKGFkZHJlc3M6IHN0cmluZyk6IFRyYW5zZmVyQnVpbGRlciB7XG4gICAgdGhpcy5fdG9BZGRyZXNzID0gYWRkcmVzcztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZlZShmZWU6IHN0cmluZyk6IFRyYW5zZmVyQnVpbGRlciB7XG4gICAgdGhpcy5fZmVlID0gZmVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZ2FzTGltaXQoZ2FzTGltaXQ6IHN0cmluZyk6IFRyYW5zZmVyQnVpbGRlciB7XG4gICAgdGhpcy5fZ2FzTGltaXQgPSBnYXNMaW1pdDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHN0b3JhZ2VMaW1pdChzdG9yYWdlTGltaXQ6IHN0cmluZyk6IFRyYW5zZmVyQnVpbGRlciB7XG4gICAgdGhpcy5fc3RvcmFnZUxpbWl0ID0gc3RvcmFnZUxpbWl0O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZGF0YVRvU2lnbihkYXRhVG9TaWduOiBzdHJpbmcpOiBUcmFuc2ZlckJ1aWxkZXIge1xuICAgIHRoaXMuX2RhdGFUb1NpZ24gPSBkYXRhVG9TaWduO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgY291bnRlcihjb3VudGVyOiBzdHJpbmcpOiBUcmFuc2ZlckJ1aWxkZXIge1xuICAgIHRoaXMuX2NvdW50ZXIgPSBjb3VudGVyO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgYnVpbGQoKTogVHJhbnNmZXJEYXRhIHtcbiAgICBpZiAoIXRoaXMuX2Ftb3VudCB8fCAhdGhpcy5fZnJvbUFkZHJlc3MgfHwgIXRoaXMuX3RvQWRkcmVzcyB8fCAhdGhpcy5fZmVlKSB7XG4gICAgICB0aHJvdyBuZXcgQnVpbGRUcmFuc2FjdGlvbkVycm9yKFxuICAgICAgICAnTWlzc2luZyB0cmFuc2ZlciBtYW5kYXRvcnkgZmllbGRzLiBBbW91bnQsIGZyb20gYWRkcmVzcywgZGVzdGluYXRpb24gKHRvKSBhZGRyZXNzIGFuZCBmZWUgYXJlIG1hbmRhdG9yeScsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgYW1vdW50OiB0aGlzLl9hbW91bnQsXG4gICAgICBjb2luOiB0aGlzLl9jb2luLFxuICAgICAgZnJvbTogdGhpcy5fZnJvbUFkZHJlc3MsXG4gICAgICB0bzogdGhpcy5fdG9BZGRyZXNzLFxuICAgICAgZmVlOiB7XG4gICAgICAgIGZlZTogdGhpcy5fZmVlLFxuICAgICAgICBnYXNMaW1pdDogdGhpcy5fZ2FzTGltaXQsXG4gICAgICAgIHN0b3JhZ2VMaW1pdDogdGhpcy5fc3RvcmFnZUxpbWl0LFxuICAgICAgfSxcbiAgICAgIGRhdGFUb1NpZ246IHRoaXMuX2RhdGFUb1NpZ24sXG4gICAgICBjb3VudGVyOiB0aGlzLl9jb3VudGVyLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==