"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var utxo_lib_1 = require("@bitgo/utxo-lib");
var nacl = __importStar(require("tweetnacl"));
var utils_1 = require("../coin/hbar/utils");
/**
 * @param {string} xpub - a base-58 encoded extended public key (BIP32)
 * @returns {string} the uncompressed public key in hexadecimal
 */
function xpubToUncompressedPub(xpub) {
    if (!isValidXpub(xpub)) {
        throw new Error('invalid xpub');
    }
    var hdNode = utxo_lib_1.HDNode.fromBase58(xpub, utxo_lib_1.networks.bitcoin);
    return hdNode.keyPair.__Q.getEncoded(false).toString('hex');
}
exports.xpubToUncompressedPub = xpubToUncompressedPub;
/**
 * @param {string} xprv - base58-encoded extended private key (BIP32)
 * @returns {string} the hex-encoded raw private key
 */
function xprvToRawPrv(xprv) {
    if (!isValidXprv(xprv)) {
        throw new Error('invalid xprv');
    }
    var hdNode = utxo_lib_1.HDNode.fromBase58(xprv, utxo_lib_1.networks.bitcoin);
    return hdNode.keyPair.d.toBuffer(32).toString('hex');
}
exports.xprvToRawPrv = xprvToRawPrv;
/**
 * @param {string} prv - Private key in hex format to get the extended keys for
 * @returns {ExtendedKeys} xprv and xpub in string format
 */
function rawPrvToExtendedKeys(prv) {
    var keyPair = utxo_lib_1.ECPair.fromPrivateKeyBuffer(Buffer.from(prv, 'hex'));
    var hd = new utxo_lib_1.HDNode(keyPair, Buffer.alloc(32));
    return {
        xprv: hd.toBase58(),
        xpub: hd.neutered().toBase58(),
    };
}
exports.rawPrvToExtendedKeys = rawPrvToExtendedKeys;
/**
 * Whether the input is a valid BIP32 xpub or not
 *
 * @param xpub
 */
function isValidXpub(xpub) {
    if (xpub.substr(0, 4) !== 'xpub') {
        // check for xpub formats we don't support, such as tpub
        return false;
    }
    try {
        utxo_lib_1.HDNode.fromBase58(xpub, utxo_lib_1.networks.bitcoin);
    }
    catch (err) {
        return false;
    }
    // if HD generation didn't throw, it is a valid xpub
    return true;
}
exports.isValidXpub = isValidXpub;
/**
 * Whether the input is a valid BIP32 xprv or not
 *
 * @param xprv
 */
function isValidXprv(xprv) {
    if (xprv.substr(0, 4) !== 'xprv') {
        // check for xprv formats we don't support
        return false;
    }
    try {
        utxo_lib_1.HDNode.fromBase58(xprv, utxo_lib_1.networks.bitcoin);
    }
    catch (err) {
        return false;
    }
    // if HD generation didn't throw, it is a valid xprv
    return true;
}
exports.isValidXprv = isValidXprv;
/**
 * Whether the input is a valid secp256k1 public key
 *
 * @param pub
 */
function isValidPub(pub) {
    try {
        utxo_lib_1.ECPair.fromPublicKeyBuffer(Buffer.from(pub, 'hex'));
    }
    catch (e) {
        return false;
    }
    return true;
}
exports.isValidPub = isValidPub;
/**
 * Whether the input is a valid secp256k1 private key
 *
 * @param prv
 */
function isValidPrv(prv) {
    try {
        utxo_lib_1.ECPair.fromPrivateKeyBuffer(Buffer.from(prv, 'hex'));
    }
    catch (e) {
        return false;
    }
    return true;
}
exports.isValidPrv = isValidPrv;
/**
 * Whether the input is a valid ed25519 private key
 *
 * @param {string} prv A hexadecimal private key to validate
 * @returns {boolean} Whether the input is a valid public key or not
 */
function isValidEd25519Seed(prv) {
    try {
        var decodedPrv = utils_1.toUint8Array(prv);
        return decodedPrv.length === nacl.sign.seedLength;
    }
    catch (e) {
        return false;
    }
}
exports.isValidEd25519Seed = isValidEd25519Seed;
/**
 * Whether the input is a valid ed25519 private key
 *
 * @param {string} prv A hexadecimal private key to validate
 * @returns {boolean} Whether the input is a valid public key or not
 */
function isValidEd25519SecretKey(prv) {
    try {
        var decodedPrv = utils_1.toUint8Array(prv);
        return decodedPrv.length === nacl.sign.secretKeyLength;
    }
    catch (e) {
        return false;
    }
}
exports.isValidEd25519SecretKey = isValidEd25519SecretKey;
/**
 * Whether the input is a valid ed25519 public key
 *
 * @param {string} pub A hexadecimal public key to validate
 * @returns {boolean} Whether the input is a valid public key or not
 */
function isValidEd25519PublicKey(pub) {
    try {
        var decodedPub = utils_1.toUint8Array(pub);
        return decodedPub.length === nacl.sign.publicKeyLength;
    }
    catch (e) {
        return false;
    }
}
exports.isValidEd25519PublicKey = isValidEd25519PublicKey;
//# sourceMappingURL=data:application/json;base64,