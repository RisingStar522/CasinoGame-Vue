"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var errors_1 = require("./errors");
/**
 * Generic transaction builder to be extended with coin specific logic.
 * Provide a set of default steps (i.e. from, sign, build) and enforces mandatory validations.
 */
var BaseTransactionBuilder = /** @class */ (function () {
    /**
     * Base constructor.
     *
     * @param _coinConfig BaseCoin from statics library
     */
    function BaseTransactionBuilder(_coinConfig) {
        this._coinConfig = _coinConfig;
    }
    /**
     * Parse a transaction based on existing data. The input format is determined by the coin
     * extending this class. Some examples are hex, base64, or JSON.
     *
     * @param rawTransaction A raw transaction to be parsed
     */
    BaseTransactionBuilder.prototype.from = function (rawTransaction) {
        this.validateRawTransaction(rawTransaction);
        this.transaction = this.fromImplementation(rawTransaction);
    };
    /**
     * Validate keys and sign the transaction.
     *
     * @param key One of the keys associated with this transaction
     */
    BaseTransactionBuilder.prototype.sign = function (key) {
        this.validateKey(key);
        if (!this.transaction.canSign(key)) {
            throw new errors_1.SigningError('Private key cannot sign the transaction');
        }
        this.transaction = this.signImplementation(key);
    };
    /**
     * Finalize the transaction by performing any extra step like calculating hashes, verifying
     * integrity, or adding default values.
     *
     * @returns valid coin specific transaction (signed or unsigned)
     */
    BaseTransactionBuilder.prototype.build = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.validateTransaction(this.transaction);
                return [2 /*return*/, this.buildImplementation()];
            });
        });
    };
    /**
     * Get the underlying coin full name as specified in the statics library.
     */
    BaseTransactionBuilder.prototype.displayName = function () {
        return this._coinConfig.fullName;
    };
    return BaseTransactionBuilder;
}());
exports.BaseTransactionBuilder = BaseTransactionBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZVRyYW5zYWN0aW9uQnVpbGRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb2luL2Jhc2VDb2luL2Jhc2VUcmFuc2FjdGlvbkJ1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUlBLG1DQUF3QztBQUV4Qzs7O0dBR0c7QUFDSDtJQUVFOzs7O09BSUc7SUFDSCxnQ0FBc0IsV0FBaUM7UUFDckQsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7SUFDakMsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gscUNBQUksR0FBSixVQUFLLGNBQW1CO1FBQ3RCLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBVUQ7Ozs7T0FJRztJQUNILHFDQUFJLEdBQUosVUFBSyxHQUFZO1FBQ2YsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDbEMsTUFBTSxJQUFJLHFCQUFZLENBQUMseUNBQXlDLENBQUMsQ0FBQztTQUNuRTtRQUNELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFVRDs7Ozs7T0FLRztJQUNHLHNDQUFLLEdBQVg7OztnQkFDRSxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUMzQyxzQkFBTyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsRUFBQzs7O0tBQ25DO0lBK0NEOztPQUVHO0lBQ0gsNENBQVcsR0FBWDtRQUNFLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUM7SUFDbkMsQ0FBQztJQVdILDZCQUFDO0FBQUQsQ0FBQyxBQTNIRCxJQTJIQztBQTNIcUIsd0RBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJpZ051bWJlciBmcm9tICdiaWdudW1iZXIuanMnO1xuaW1wb3J0IHsgQmFzZUNvaW4gYXMgQ29pbkNvbmZpZyB9IGZyb20gJ0BiaXRnby9zdGF0aWNzJztcbmltcG9ydCB7IEJhc2VBZGRyZXNzLCBCYXNlS2V5IH0gZnJvbSAnLi9pZmFjZSc7XG5pbXBvcnQgeyBCYXNlVHJhbnNhY3Rpb24gfSBmcm9tICcuL2Jhc2VUcmFuc2FjdGlvbic7XG5pbXBvcnQgeyBTaWduaW5nRXJyb3IgfSBmcm9tICcuL2Vycm9ycyc7XG5cbi8qKlxuICogR2VuZXJpYyB0cmFuc2FjdGlvbiBidWlsZGVyIHRvIGJlIGV4dGVuZGVkIHdpdGggY29pbiBzcGVjaWZpYyBsb2dpYy5cbiAqIFByb3ZpZGUgYSBzZXQgb2YgZGVmYXVsdCBzdGVwcyAoaS5lLiBmcm9tLCBzaWduLCBidWlsZCkgYW5kIGVuZm9yY2VzIG1hbmRhdG9yeSB2YWxpZGF0aW9ucy5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VUcmFuc2FjdGlvbkJ1aWxkZXIge1xuICBwcm90ZWN0ZWQgX2NvaW5Db25maWc6IFJlYWRvbmx5PENvaW5Db25maWc+O1xuICAvKipcbiAgICogQmFzZSBjb25zdHJ1Y3Rvci5cbiAgICpcbiAgICogQHBhcmFtIF9jb2luQ29uZmlnIEJhc2VDb2luIGZyb20gc3RhdGljcyBsaWJyYXJ5XG4gICAqL1xuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoX2NvaW5Db25maWc6IFJlYWRvbmx5PENvaW5Db25maWc+KSB7XG4gICAgdGhpcy5fY29pbkNvbmZpZyA9IF9jb2luQ29uZmlnO1xuICB9XG5cbiAgLyoqXG4gICAqIFBhcnNlIGEgdHJhbnNhY3Rpb24gYmFzZWQgb24gZXhpc3RpbmcgZGF0YS4gVGhlIGlucHV0IGZvcm1hdCBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBjb2luXG4gICAqIGV4dGVuZGluZyB0aGlzIGNsYXNzLiBTb21lIGV4YW1wbGVzIGFyZSBoZXgsIGJhc2U2NCwgb3IgSlNPTi5cbiAgICpcbiAgICogQHBhcmFtIHJhd1RyYW5zYWN0aW9uIEEgcmF3IHRyYW5zYWN0aW9uIHRvIGJlIHBhcnNlZFxuICAgKi9cbiAgZnJvbShyYXdUcmFuc2FjdGlvbjogYW55KTogdm9pZCB7XG4gICAgdGhpcy52YWxpZGF0ZVJhd1RyYW5zYWN0aW9uKHJhd1RyYW5zYWN0aW9uKTtcbiAgICB0aGlzLnRyYW5zYWN0aW9uID0gdGhpcy5mcm9tSW1wbGVtZW50YXRpb24ocmF3VHJhbnNhY3Rpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIENvaW4gc3BlY2lmaWMgaW1wbGVtZW50YXRpb24gb2Yge0Bjb2RlIGZyb219LlxuICAgKlxuICAgKiBAc2VlIHtAbGluayBmcm9tfVxuICAgKiBAcmV0dXJucyB0aGUgcGFyc2VkIGNvaW4gc3BlY2lmaWMgdHJhbnNhY3Rpb24gb2JqZWN0XG4gICAqL1xuICBwcm90ZWN0ZWQgYWJzdHJhY3QgZnJvbUltcGxlbWVudGF0aW9uKHJhd1RyYW5zYWN0aW9uOiBhbnkpOiBCYXNlVHJhbnNhY3Rpb247XG5cbiAgLyoqXG4gICAqIFZhbGlkYXRlIGtleXMgYW5kIHNpZ24gdGhlIHRyYW5zYWN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ga2V5IE9uZSBvZiB0aGUga2V5cyBhc3NvY2lhdGVkIHdpdGggdGhpcyB0cmFuc2FjdGlvblxuICAgKi9cbiAgc2lnbihrZXk6IEJhc2VLZXkpOiB2b2lkIHtcbiAgICB0aGlzLnZhbGlkYXRlS2V5KGtleSk7XG4gICAgaWYgKCF0aGlzLnRyYW5zYWN0aW9uLmNhblNpZ24oa2V5KSkge1xuICAgICAgdGhyb3cgbmV3IFNpZ25pbmdFcnJvcignUHJpdmF0ZSBrZXkgY2Fubm90IHNpZ24gdGhlIHRyYW5zYWN0aW9uJyk7XG4gICAgfVxuICAgIHRoaXMudHJhbnNhY3Rpb24gPSB0aGlzLnNpZ25JbXBsZW1lbnRhdGlvbihrZXkpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvaW4gc3BlY2lmaWMgaW1wbGVtZW50YXRpb24gb2Yge0Bjb2RlIHNpZ259LlxuICAgKlxuICAgKiBAc2VlIHtAbGluayBzaWdufVxuICAgKiBAcmV0dXJucyBjb2luIHNwZWNpZmljIHRyYW5zYWN0aW9uIHdpdGggc2lnbmF0dXJlIGRhdGFcbiAgICovXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBzaWduSW1wbGVtZW50YXRpb24oa2V5OiBCYXNlS2V5KTogQmFzZVRyYW5zYWN0aW9uO1xuXG4gIC8qKlxuICAgKiBGaW5hbGl6ZSB0aGUgdHJhbnNhY3Rpb24gYnkgcGVyZm9ybWluZyBhbnkgZXh0cmEgc3RlcCBsaWtlIGNhbGN1bGF0aW5nIGhhc2hlcywgdmVyaWZ5aW5nXG4gICAqIGludGVncml0eSwgb3IgYWRkaW5nIGRlZmF1bHQgdmFsdWVzLlxuICAgKlxuICAgKiBAcmV0dXJucyB2YWxpZCBjb2luIHNwZWNpZmljIHRyYW5zYWN0aW9uIChzaWduZWQgb3IgdW5zaWduZWQpXG4gICAqL1xuICBhc3luYyBidWlsZCgpOiBQcm9taXNlPEJhc2VUcmFuc2FjdGlvbj4ge1xuICAgIHRoaXMudmFsaWRhdGVUcmFuc2FjdGlvbih0aGlzLnRyYW5zYWN0aW9uKTtcbiAgICByZXR1cm4gdGhpcy5idWlsZEltcGxlbWVudGF0aW9uKCk7XG4gIH1cblxuICAvKipcbiAgICogQ29pbiBzcGVjaWZpYyBpbXBsZW1lbnRhdGlvbiBvZiB7QGNvZGUgYnVpbGR9LlxuICAgKlxuICAgKiBAc2VlIHtAbGluayBidWlsZH1cbiAgICogQHJldHVybnMgdmFsaWQgY29pbiBzcGVjaWZpYyB0cmFuc2FjdGlvbiAoc2lnbmVkIG9yIHVuc2lnbmVkKVxuICAgKi9cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGFzeW5jIGJ1aWxkSW1wbGVtZW50YXRpb24oKTogUHJvbWlzZTxCYXNlVHJhbnNhY3Rpb24+O1xuXG4gIC8qKlxuICAgKiBDaGVjayB0aGUgcHJpdmF0ZSBrZXkgaXMgcHJlc2VudCBhbmQgaXMgdmFsaWQgaW4gdGhlIGJsb2NrY2hhaW4gY29udGV4dCwgdGhyb3cgb3RoZXJ3aXNlLlxuICAgKlxuICAgKiBAcGFyYW0ge0Jhc2VLZXl9IGtleSBQcml2YXRlIGtleSB0byB2YWxpZGF0ZVxuICAgKi9cbiAgYWJzdHJhY3QgdmFsaWRhdGVLZXkoa2V5OiBCYXNlS2V5KTogdm9pZDtcblxuICAvKipcbiAgICogQ2hlY2sgdGhlIGFkZHJlc3MgcHJvdmlkZWQgaXMgdmFsaWQgaW4gdGhlIGJsb2NrY2hhaW4gY29udGV4dCwgdGhyb3cgb3RoZXJ3aXNlLlxuICAgKlxuICAgKiBAcGFyYW0gYWRkcmVzcyBBZGRyZXNzIGRhdGEgdG8gYmUgdmFsaWRhdGVkXG4gICAqIEBwYXJhbSBhZGRyZXNzRm9ybWF0IFRoZSBmb3JtYXQgdGhlIGFkZHJlc3Mgc2hvdWxkIGJlIGluIGlmIG1vcmUgdGhhbiBvbmUgaXMgc3VwcG9ydGVkXG4gICAqL1xuICBhYnN0cmFjdCB2YWxpZGF0ZUFkZHJlc3MoYWRkcmVzczogQmFzZUFkZHJlc3MsIGFkZHJlc3NGb3JtYXQ/OiBzdHJpbmcpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBDaGVjayB0aGUgYW1vdW50IHByb3ZpZGVkIGlzIHZhbGlkIGluIHRoZSBibG9ja2NoYWluIGNvbnRleHQsIHRocm93IG90aGVyd2lzZS5cbiAgICpcbiAgICogQHBhcmFtIHtCaWdOdW1iZXJ9IHZhbHVlIFRyYW5zYWN0aW9uIGFtb3VudFxuICAgKi9cbiAgYWJzdHJhY3QgdmFsaWRhdGVWYWx1ZSh2YWx1ZTogQmlnTnVtYmVyKTogdm9pZDtcblxuICAvKipcbiAgICogQ2hlY2sgdGhlIHJhdyB0cmFuc2FjdGlvbiBoYXMgYSB2YWxpZCBmb3JtYXQgaW4gdGhlIGJsb2NrY2hhaW4gY29udGV4dCwgdGhyb3cgb3RoZXJ3aXNlLlxuICAgKlxuICAgKiBAcGFyYW0gcmF3VHJhbnNhY3Rpb24gVHJhbnNhY3Rpb24gaW4gYW55IGZvcm1hdFxuICAgKi9cbiAgYWJzdHJhY3QgdmFsaWRhdGVSYXdUcmFuc2FjdGlvbihyYXdUcmFuc2FjdGlvbjogYW55KTogdm9pZDtcblxuICAvKipcbiAgICogQ2hlY2sgdGhlIHRyYW5zYWN0aW9uIG1hbmRhdG9yeSBmaWVsZHMgcGVyIHRyYW5zYWN0aW9uIHR5cGUgYW5kIGVuc3VyZXMgaXQgaXMgdmFsaWQsIHRocm93XG4gICAqIG90aGVyd2lzZS5cbiAgICpcbiAgICogQHBhcmFtIHtCYXNlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqL1xuICBhYnN0cmFjdCB2YWxpZGF0ZVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uPzogQmFzZVRyYW5zYWN0aW9uKTogdm9pZDtcblxuICAvKipcbiAgICogR2V0IHRoZSB1bmRlcmx5aW5nIGNvaW4gZnVsbCBuYW1lIGFzIHNwZWNpZmllZCBpbiB0aGUgc3RhdGljcyBsaWJyYXJ5LlxuICAgKi9cbiAgZGlzcGxheU5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fY29pbkNvbmZpZy5mdWxsTmFtZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHRyYW5zYWN0aW9uIGJlaW5nIGJ1aWx0LlxuICAgKi9cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGdldCB0cmFuc2FjdGlvbigpOiBCYXNlVHJhbnNhY3Rpb247XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgdHJhbnNhY3Rpb24gYmVpbmcgYnVpbHQuXG4gICAqL1xuICBwcm90ZWN0ZWQgYWJzdHJhY3Qgc2V0IHRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uOiBCYXNlVHJhbnNhY3Rpb24pO1xufVxuIl19