"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var base58check = __importStar(require("bs58check"));
var libsodium_wrappers_1 = __importDefault(require("libsodium-wrappers"));
var signer_1 = require("@taquito/signer");
var elliptic_1 = require("elliptic");
var errors_1 = require("../baseCoin/errors");
var multisigUtils_1 = require("./multisigUtils");
var Crypto = __importStar(require("./../../utils/crypto"));
// By default, use the transactions prefix
exports.DEFAULT_WATERMARK = new Uint8Array([3]);
/**
 * Encode the payload to base58 with a specific Tezos prefix.
 *
 * @param {Buffer} prefix to add to the encoded payload
 * @param {Buffer} payload to encode
 * @returns {any} base58 payload with a Tezos prefix
 */
function base58encode(prefix, payload) {
    var n = Buffer.alloc(prefix.length + payload.length);
    n.set(prefix);
    n.set(payload, prefix.length);
    return base58check.encode(n);
}
exports.base58encode = base58encode;
/**
 * Calculate the transaction id for a for a signed transaction.
 *
 * @param {string} encodedTransaction Signed transaction in hexadecimal
 * @returns {Promise<string>} The transaction id
 */
function calculateTransactionId(encodedTransaction) {
    return __awaiter(this, void 0, void 0, function () {
        var encodedTransactionBuffer, operationHashPayload;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, libsodium_wrappers_1.default.ready];
                case 1:
                    _a.sent();
                    encodedTransactionBuffer = Uint8Array.from(Buffer.from(encodedTransaction, 'hex'));
                    operationHashPayload = libsodium_wrappers_1.default.crypto_generichash(32, encodedTransactionBuffer);
                    return [2 /*return*/, base58encode(exports.hashTypes.o.prefix, Buffer.from(operationHashPayload))];
            }
        });
    });
}
exports.calculateTransactionId = calculateTransactionId;
/**
 * Calculate the address of a new originated account.
 *
 * @param {string} transactionId The transaction id
 * @param {number} index The index of the origination operation inside the transaction (starts at 0)
 * @returns {Promise<string>} An originated address with the KT prefix
 */
function calculateOriginatedAddress(transactionId, index) {
    return __awaiter(this, void 0, void 0, function () {
        var ob, tt, i, payload;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    ob = base58check.decode(transactionId).slice(exports.hashTypes.o.prefix.length);
                    tt = [];
                    for (i = 0; i < ob.length; i++) {
                        tt.push(ob[i]);
                    }
                    tt = tt.concat([
                        (index & 0xff000000) >> 24,
                        (index & 0x00ff0000) >> 16,
                        (index & 0x0000ff00) >> 8,
                        index & 0x000000ff,
                    ]);
                    return [4 /*yield*/, libsodium_wrappers_1.default.ready];
                case 1:
                    _a.sent();
                    payload = libsodium_wrappers_1.default.crypto_generichash(20, new Uint8Array(tt));
                    return [2 /*return*/, base58encode(exports.hashTypes.KT.prefix, Buffer.from(payload))];
            }
        });
    });
}
exports.calculateOriginatedAddress = calculateOriginatedAddress;
/**
 * Generic data signing using Tezos library.
 *
 * @param {KeyPair} keyPair A Key Pair with a private key set
 * @param {string} data The data in hexadecimal to sign
 * @param {Uint8Array} watermark Magic byte: 1 for block, 2 for endorsement, 3 for generic
 * @returns {Promise<SignResponse>}
 */
function sign(keyPair, data, watermark) {
    if (watermark === void 0) { watermark = exports.DEFAULT_WATERMARK; }
    return __awaiter(this, void 0, void 0, function () {
        var signer;
        return __generator(this, function (_a) {
            if (!keyPair.getKeys().prv) {
                throw new errors_1.SigningError('Missing private key');
            }
            signer = new signer_1.InMemorySigner(keyPair.getKeys().prv);
            return [2 /*return*/, signer.sign(data, watermark)];
        });
    });
}
exports.sign = sign;
/**
 * Verifies the signature produced for a given message belongs to a secp256k1 public key.
 *
 * @param {string} message Message in hex format to verify
 * @param {string} publicKey secp256k1 public key with "sppk" prefix to verify the signature with
 * @param {string} signature Tezos signature with "sig" prefix
 * @param {Uint8Array} watermark Optional watermark used to generate the signature
 * @returns {Promise<boolean>}
 */
function verifySignature(message, publicKey, signature, watermark) {
    if (watermark === void 0) { watermark = exports.DEFAULT_WATERMARK; }
    return __awaiter(this, void 0, void 0, function () {
        var rawPublicKey, ec, key, messageBuffer, messageWithWatermark, bytesHash, rawSignature;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    rawPublicKey = decodeKey(publicKey, exports.hashTypes.sppk);
                    ec = new elliptic_1.ec('secp256k1');
                    key = ec.keyFromPublic(rawPublicKey);
                    messageBuffer = Uint8Array.from(Buffer.from(message, 'hex'));
                    messageWithWatermark = new Uint8Array(watermark.length + messageBuffer.length);
                    messageWithWatermark.set(watermark);
                    messageWithWatermark.set(messageBuffer, watermark.length);
                    return [4 /*yield*/, libsodium_wrappers_1.default.ready];
                case 1:
                    _a.sent();
                    bytesHash = Buffer.from(libsodium_wrappers_1.default.crypto_generichash(32, messageWithWatermark));
                    rawSignature = decodeSignature(signature, exports.hashTypes.sig);
                    return [2 /*return*/, key.verify(bytesHash, { r: rawSignature.slice(0, 32), s: rawSignature.slice(32, 64) })];
            }
        });
    });
}
exports.verifySignature = verifySignature;
/**
 * Useful wrapper to create the generic multisig contract data to sign when moving funds.
 *
 * @param {string} contractAddress The wallet contract address with the funds to withdraw
 * @param {string} destinationAddress The address to transfer the funds to
 * @param {number} amount Number mutez to transfer
 * @param {string} contractCounter Wallet counter to use in the transaction
 * @returns {any} A JSON representation of the Michelson script to sign and approve a transfer
 */
function generateDataToSign(contractAddress, destinationAddress, amount, contractCounter) {
    if (!isValidOriginatedAddress(contractAddress)) {
        throw new Error('Invalid contract address ' + contractAddress + '. An originated account address was expected');
    }
    if (!isValidAddress(destinationAddress)) {
        throw new Error('Invalid destination address ' + destinationAddress);
    }
    return multisigUtils_1.genericMultisigDataToSign(contractAddress, destinationAddress, amount, contractCounter);
}
exports.generateDataToSign = generateDataToSign;
/**
 * Returns whether or not the string is a valid Tezos hash of the given type
 *
 * @param {string} hash - the string to validate
 * @param {HashType} hashType - the type of the provided hash
 * @returns {boolean}
 */
function isValidHash(hash, hashType) {
    // Validate encoding
    var decodedHash;
    try {
        decodedHash = base58check.decode(hash);
    }
    catch (e) {
        return false;
    }
    var hashPrefix = decodedHash.slice(0, hashType.prefix.length);
    // Check prefix
    if (!hashPrefix.equals(Buffer.from(hashType.prefix))) {
        return false;
    }
    // Check length
    var hashLength = decodedHash.length - hashPrefix.length;
    return hashLength === hashType.byteLength;
}
exports.isValidHash = isValidHash;
/**
 * Returns whether or not the string is a valid Tezos address
 *
 * @param {string} hash - the address to validate
 * @returns {boolean}
 */
function isValidAddress(hash) {
    return isValidImplicitAddress(hash) || isValidHash(hash, exports.hashTypes.KT);
}
exports.isValidAddress = isValidAddress;
/**
 * Returns whether or not the string is a valid Tezos implicit account address
 *
 * @param {string} hash - the address to validate
 * @returns {boolean}
 */
function isValidImplicitAddress(hash) {
    return isValidHash(hash, exports.hashTypes.tz1) || isValidHash(hash, exports.hashTypes.tz2) || isValidHash(hash, exports.hashTypes.tz3);
}
exports.isValidImplicitAddress = isValidImplicitAddress;
/**
 * Returns whether or not the string is a valid Tezos originated account address
 *
 * @param {string} hash - the address to validate
 * @returns {boolean}
 */
function isValidOriginatedAddress(hash) {
    return isValidHash(hash, exports.hashTypes.KT);
}
exports.isValidOriginatedAddress = isValidOriginatedAddress;
/**
 * Returns whether or not the string is a valid Tezos signature
 *
 * @param {string} hash - the signature to validate
 * @returns {boolean}
 */
function isValidSignature(hash) {
    return (isValidHash(hash, exports.hashTypes.edsig) ||
        isValidHash(hash, exports.hashTypes.spsig1) ||
        isValidHash(hash, exports.hashTypes.p2sig) ||
        isValidHash(hash, exports.hashTypes.sig));
}
exports.isValidSignature = isValidSignature;
/**
 * Returns whether or not the string is a valid Tezos public key
 *
 * @param {string} publicKey The public key to validate
 * @returns {boolean}
 */
function isValidPublicKey(publicKey) {
    return (isValidHash(publicKey, exports.hashTypes.sppk) ||
        isValidHash(publicKey, exports.hashTypes.p2pk) ||
        isValidHash(publicKey, exports.hashTypes.edpk) ||
        Crypto.isValidXpub(publicKey) // xpubs are valid too.
    );
}
exports.isValidPublicKey = isValidPublicKey;
/**
 * Returns whether or not the string is a valid Tezos private key
 *
 * @param {string} privateKey The private key to validate
 * @returns {boolean}
 */
function isValidPrivateKey(privateKey) {
    return (isValidHash(privateKey, exports.hashTypes.edesk) ||
        isValidHash(privateKey, exports.hashTypes.edsk) ||
        isValidHash(privateKey, exports.hashTypes.spsk) ||
        isValidHash(privateKey, exports.hashTypes.p2sk));
}
exports.isValidPrivateKey = isValidPrivateKey;
/**
 * Returns whether or not the string is a valid Tezos block hash
 *
 * @param {string} hash - the address to validate
 * @returns {boolean}
 */
function isValidBlockHash(hash) {
    return isValidHash(hash, exports.hashTypes.b);
}
exports.isValidBlockHash = isValidBlockHash;
/**
 * Returns whether or not the string is a valid Tezos transaction hash
 *
 * @param {string} hash - the address to validate
 * @returns {boolean}
 */
function isValidTransactionHash(hash) {
    return isValidHash(hash, exports.hashTypes.o);
}
exports.isValidTransactionHash = isValidTransactionHash;
/**
 * Returns whether or not the string is a valid Tezos key given a prefix
 *
 * @param {string} hash - the key to validate
 * @param {HashType} hashType - the type of the provided hash
 * @returns {boolean}
 */
function isValidKey(hash, hashType) {
    return isValidHash(hash, hashType);
}
exports.isValidKey = isValidKey;
/**
 * Get the original key form the text without the given prefix.
 *
 * @param {string} hash - base58 encoded key with a Tezos prefix
 * @param {HashType} hashType - the type of the provided hash
 * @returns {Buffer} the original decoded key
 */
function decodeKey(hash, hashType) {
    if (!isValidKey(hash, hashType)) {
        throw new Error('Unsupported private key');
    }
    var decodedPrv = base58check.decode(hash);
    return Buffer.from(decodedPrv.slice(hashType.prefix.length, decodedPrv.length));
}
exports.decodeKey = decodeKey;
/**
 * Get the raw signature from a Tezos encoded one.
 *
 * @param {string} signature Tezos signatures prefixed with sig, edsig, p2sig or spsig
 * @param {HashType} hashType The prefix of remove
 * @returns {Buffer} The decoded signature without prefix
 */
function decodeSignature(signature, hashType) {
    if (!isValidSignature(signature)) {
        throw new Error('Unsupported signature');
    }
    var decodedPrv = base58check.decode(signature);
    return Buffer.from(decodedPrv.slice(hashType.prefix.length, decodedPrv.length));
}
exports.decodeSignature = decodeSignature;
// Base58Check is used for encoding
// hashedTypes is used to validate hashes by type, by checking their prefix and
// the length of the Buffer obtained by decoding the hash (excluding the prefix)
exports.hashTypes = {
    /* 20 bytes long */
    // ed25519 public key hash
    tz1: {
        prefix: Buffer.from([6, 161, 159]),
        byteLength: 20,
    },
    // secp256k1 public key hash
    tz2: {
        prefix: Buffer.from([6, 161, 161]),
        byteLength: 20,
    },
    // p256 public key hash
    tz3: {
        prefix: Buffer.from([6, 161, 164]),
        byteLength: 20,
    },
    KT: {
        prefix: Buffer.from([2, 90, 121]),
        byteLength: 20,
    },
    /* 32 bytes long */
    // ed25519 public key
    edpk: {
        prefix: Buffer.from([13, 15, 37, 217]),
        byteLength: 32,
    },
    // ed25519 secret key
    edsk2: {
        prefix: Buffer.from([13, 15, 58, 7]),
        byteLength: 32,
    },
    // secp256k1 secret key
    spsk: {
        prefix: Buffer.from([17, 162, 224, 201]),
        byteLength: 32,
    },
    // p256 secret key
    p2sk: {
        prefix: Buffer.from([16, 81, 238, 189]),
        byteLength: 32,
    },
    // block hash
    b: {
        prefix: Buffer.from([1, 52]),
        byteLength: 32,
    },
    // operation hash
    o: {
        prefix: Buffer.from([5, 116]),
        byteLength: 32,
    },
    // operation list hash
    Lo: {
        prefix: Buffer.from([133, 233]),
        byteLength: 32,
    },
    // operation list list hash
    LLo: {
        prefix: Buffer.from([29, 159, 109]),
        byteLength: 32,
    },
    // protocol hash
    P: {
        prefix: Buffer.from([2, 170]),
        byteLength: 32,
    },
    // context hash
    Co: {
        prefix: Buffer.from([79, 179]),
        byteLength: 32,
    },
    /* 33 bytes long */
    // secp256k1 public key
    sppk: {
        prefix: Buffer.from([3, 254, 226, 86]),
        byteLength: 33,
    },
    // p256 public key
    p2pk: {
        prefix: Buffer.from([3, 178, 139, 127]),
        byteLength: 33,
    },
    /* 56 bytes long */
    // ed25519 encrypted seed
    edesk: {
        prefix: Buffer.from([7, 90, 60, 179, 41]),
        byteLength: 56,
    },
    /* 63 bytes long */
    // ed25519 secret key
    edsk: {
        prefix: Buffer.from([43, 246, 78, 7]),
        byteLength: 64,
    },
    // ed25519 signature
    edsig: {
        prefix: Buffer.from([9, 245, 205, 134, 18]),
        byteLength: 64,
    },
    // secp256k1 signature
    spsig1: {
        prefix: Buffer.from([13, 115, 101, 19, 63]),
        byteLength: 64,
    },
    // p256_signature
    p2sig: {
        prefix: Buffer.from([54, 240, 44, 52]),
        byteLength: 64,
    },
    // generic signature
    sig: {
        prefix: Buffer.from([4, 130, 43]),
        byteLength: 64,
    },
    /* 15 bytes long */
    // network hash
    Net: {
        prefix: Buffer.from([87, 82, 0]),
        byteLength: 15,
    },
    // nonce hash
    nce: {
        prefix: Buffer.from([69, 220, 169]),
        byteLength: 15,
    },
    /* 4 bytes long */
    // chain id
    id: {
        prefix: Buffer.from([153, 103]),
        byteLength: 4,
    },
};
// From https://github.com/ecadlabs/taquito/blob/master/packages/taquito/src/constants.ts
var DEFAULT_GAS_LIMIT;
(function (DEFAULT_GAS_LIMIT) {
    DEFAULT_GAS_LIMIT[DEFAULT_GAS_LIMIT["DELEGATION"] = 10600] = "DELEGATION";
    DEFAULT_GAS_LIMIT[DEFAULT_GAS_LIMIT["ORIGINATION"] = 10600] = "ORIGINATION";
    DEFAULT_GAS_LIMIT[DEFAULT_GAS_LIMIT["TRANSFER"] = 10600] = "TRANSFER";
    DEFAULT_GAS_LIMIT[DEFAULT_GAS_LIMIT["REVEAL"] = 10600] = "REVEAL";
})(DEFAULT_GAS_LIMIT = exports.DEFAULT_GAS_LIMIT || (exports.DEFAULT_GAS_LIMIT = {}));
var DEFAULT_FEE;
(function (DEFAULT_FEE) {
    DEFAULT_FEE[DEFAULT_FEE["DELEGATION"] = 1257] = "DELEGATION";
    DEFAULT_FEE[DEFAULT_FEE["ORIGINATION"] = 10000] = "ORIGINATION";
    DEFAULT_FEE[DEFAULT_FEE["TRANSFER"] = 10000] = "TRANSFER";
    DEFAULT_FEE[DEFAULT_FEE["REVEAL"] = 1420] = "REVEAL";
})(DEFAULT_FEE = exports.DEFAULT_FEE || (exports.DEFAULT_FEE = {}));
var DEFAULT_STORAGE_LIMIT;
(function (DEFAULT_STORAGE_LIMIT) {
    DEFAULT_STORAGE_LIMIT[DEFAULT_STORAGE_LIMIT["DELEGATION"] = 0] = "DELEGATION";
    DEFAULT_STORAGE_LIMIT[DEFAULT_STORAGE_LIMIT["ORIGINATION"] = 257] = "ORIGINATION";
    DEFAULT_STORAGE_LIMIT[DEFAULT_STORAGE_LIMIT["TRANSFER"] = 257] = "TRANSFER";
    DEFAULT_STORAGE_LIMIT[DEFAULT_STORAGE_LIMIT["REVEAL"] = 0] = "REVEAL";
})(DEFAULT_STORAGE_LIMIT = exports.DEFAULT_STORAGE_LIMIT || (exports.DEFAULT_STORAGE_LIMIT = {}));
//# sourceMappingURL=data:application/json;base64,