import { BaseCoin as CoinConfig } from '@bitgo/statics';
import * as crypto from './utils/crypto';
export { crypto };
import * as BaseCoin from './coin/baseCoin';
export { BaseCoin };
import * as Trx from './coin/trx';
export { Trx };
import * as Xtz from './coin/xtz';
export { Xtz };
import * as Eth from './coin/eth';
export { Eth };
import * as Etc from './coin/etc';
export { Etc };
import * as Rbtc from './coin/rbtc';
export { Rbtc };
import * as Celo from './coin/celo';
export { Celo };
import * as Hbar from './coin/hbar';
export { Hbar };
/**
 * Get the list of coin tickers supported by this library.
 */
export declare const supportedCoins: string[];
/**
 * Get a transaction builder for the given coin.
 *
 * @param coinName One of the {@code supportedCoins}
 * @returns An instance of a {@code TransactionBuilder}
 */
export declare function getBuilder(coinName: string): BaseCoin.Interface.BaseBuilder;
/**
 * Register a new coin instance with its builder factory
 *
 * @param {string} coinName coin name as it was registered in @bitgo/statics
 * @param {any} builderFactory the builder factory class for that coin
 * @returns {any} the factory instance for the registered coin
 */
export declare function register<T extends BaseCoin.BaseTransactionBuilderFactory>(coinName: string, builderFactory: {
    new (_coinConfig: Readonly<CoinConfig>): T;
}): T;
//# sourceMappingURL=index.d.ts.map