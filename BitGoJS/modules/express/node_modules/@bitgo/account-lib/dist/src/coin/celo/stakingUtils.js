"use strict";
var _a, _b, _c, _d, _e, _f, _g;
Object.defineProperty(exports, "__esModule", { value: true });
var statics_1 = require("@bitgo/statics");
var baseCoin_1 = require("../baseCoin");
exports.LockMethodId = '0xf83d08ba'; // lock()
exports.UnlockMethodId = '0x6198e339'; // unlock()
exports.VoteMethodId = '0x580d747a'; // vote()
exports.UnvoteMethodId = '0x6e198475'; // revokeActive()
exports.ActivateMethodId = '0x1c5a9d9c'; // activate()
exports.WithdrawMethodId = '0x2e1a7d4d'; // withdraw()
var LockedGoldTestnetAddress = '0x94c3e6675015d8479b648657e7ddfcd938489d0d';
var LockedGoldMainnetAddress = '0x6cc083aed9e3ebe302a6336dbc7c921c9f03349e';
var ElectionTestnetAddress = '0x11fe523f93cac185d12cb39cc3bd279d2de524f8';
var ElectionMainnetAddress = '0x8d6677192144292870907e3fa8a5527fe55a7ff6';
var operations = (_a = {},
    _a[baseCoin_1.StakingOperationTypes.LOCK] = (_b = {},
        _b[statics_1.NetworkType.TESTNET] = {
            contractAddress: LockedGoldTestnetAddress,
            methodId: exports.LockMethodId,
            types: [],
        },
        _b[statics_1.NetworkType.MAINNET] = {
            contractAddress: LockedGoldMainnetAddress,
            methodId: exports.LockMethodId,
            types: [],
        },
        _b),
    _a[baseCoin_1.StakingOperationTypes.UNLOCK] = (_c = {},
        _c[statics_1.NetworkType.TESTNET] = {
            contractAddress: LockedGoldTestnetAddress,
            methodId: exports.UnlockMethodId,
            types: ['uint256'],
        },
        _c[statics_1.NetworkType.MAINNET] = {
            contractAddress: LockedGoldMainnetAddress,
            methodId: exports.UnlockMethodId,
            types: ['uint256'],
        },
        _c),
    _a[baseCoin_1.StakingOperationTypes.VOTE] = (_d = {},
        _d[statics_1.NetworkType.TESTNET] = {
            contractAddress: ElectionTestnetAddress,
            methodId: exports.VoteMethodId,
            types: ['address', 'uint256', 'address', 'address'],
        },
        _d[statics_1.NetworkType.MAINNET] = {
            contractAddress: ElectionMainnetAddress,
            methodId: exports.VoteMethodId,
            types: ['address', 'uint256', 'address', 'address'],
        },
        _d),
    _a[baseCoin_1.StakingOperationTypes.UNVOTE] = (_e = {},
        _e[statics_1.NetworkType.TESTNET] = {
            contractAddress: ElectionTestnetAddress,
            methodId: exports.UnvoteMethodId,
            types: ['address', 'uint256', 'address', 'address', 'uint256'],
        },
        _e[statics_1.NetworkType.MAINNET] = {
            contractAddress: ElectionMainnetAddress,
            methodId: exports.UnvoteMethodId,
            types: ['address', 'uint256', 'address', 'address', 'uint256'],
        },
        _e),
    _a[baseCoin_1.StakingOperationTypes.ACTIVATE] = (_f = {},
        _f[statics_1.NetworkType.TESTNET] = {
            contractAddress: ElectionTestnetAddress,
            methodId: exports.ActivateMethodId,
            types: ['address'],
        },
        _f[statics_1.NetworkType.MAINNET] = {
            contractAddress: ElectionMainnetAddress,
            methodId: exports.ActivateMethodId,
            types: ['address'],
        },
        _f),
    _a[baseCoin_1.StakingOperationTypes.WITHDRAW] = (_g = {},
        _g[statics_1.NetworkType.TESTNET] = {
            contractAddress: LockedGoldTestnetAddress,
            methodId: exports.WithdrawMethodId,
            types: ['uint256'],
        },
        _g[statics_1.NetworkType.MAINNET] = {
            contractAddress: LockedGoldMainnetAddress,
            methodId: exports.WithdrawMethodId,
            types: ['uint256'],
        },
        _g),
    _a);
/**
 * @param type
 * @param network
 */
function getOperationConfig(type, network) {
    return operations[type][network];
}
exports.getOperationConfig = getOperationConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Rha2luZ1V0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvaW4vY2Vsby9zdGFraW5nVXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMENBQTZDO0FBQzdDLHdDQUFvRDtBQUd2QyxRQUFBLFlBQVksR0FBRyxZQUFZLENBQUMsQ0FBQyxTQUFTO0FBQ3RDLFFBQUEsY0FBYyxHQUFHLFlBQVksQ0FBQyxDQUFDLFdBQVc7QUFDMUMsUUFBQSxZQUFZLEdBQUcsWUFBWSxDQUFDLENBQUMsU0FBUztBQUN0QyxRQUFBLGNBQWMsR0FBRyxZQUFZLENBQUMsQ0FBQyxpQkFBaUI7QUFDaEQsUUFBQSxnQkFBZ0IsR0FBRyxZQUFZLENBQUMsQ0FBQyxhQUFhO0FBQzlDLFFBQUEsZ0JBQWdCLEdBQUcsWUFBWSxDQUFDLENBQUMsYUFBYTtBQUUzRCxJQUFNLHdCQUF3QixHQUFHLDRDQUE0QyxDQUFDO0FBQzlFLElBQU0sd0JBQXdCLEdBQUcsNENBQTRDLENBQUM7QUFDOUUsSUFBTSxzQkFBc0IsR0FBRyw0Q0FBNEMsQ0FBQztBQUM1RSxJQUFNLHNCQUFzQixHQUFHLDRDQUE0QyxDQUFDO0FBRTVFLElBQU0sVUFBVTtJQUNkLEdBQUMsZ0NBQXFCLENBQUMsSUFBSTtRQUN6QixHQUFDLHFCQUFXLENBQUMsT0FBTyxJQUFHO1lBQ3JCLGVBQWUsRUFBRSx3QkFBd0I7WUFDekMsUUFBUSxFQUFFLG9CQUFZO1lBQ3RCLEtBQUssRUFBRSxFQUFFO1NBQ1Y7UUFDRCxHQUFDLHFCQUFXLENBQUMsT0FBTyxJQUFHO1lBQ3JCLGVBQWUsRUFBRSx3QkFBd0I7WUFDekMsUUFBUSxFQUFFLG9CQUFZO1lBQ3RCLEtBQUssRUFBRSxFQUFFO1NBQ1Y7V0FDRjtJQUNELEdBQUMsZ0NBQXFCLENBQUMsTUFBTTtRQUMzQixHQUFDLHFCQUFXLENBQUMsT0FBTyxJQUFHO1lBQ3JCLGVBQWUsRUFBRSx3QkFBd0I7WUFDekMsUUFBUSxFQUFFLHNCQUFjO1lBQ3hCLEtBQUssRUFBRSxDQUFDLFNBQVMsQ0FBQztTQUNuQjtRQUNELEdBQUMscUJBQVcsQ0FBQyxPQUFPLElBQUc7WUFDckIsZUFBZSxFQUFFLHdCQUF3QjtZQUN6QyxRQUFRLEVBQUUsc0JBQWM7WUFDeEIsS0FBSyxFQUFFLENBQUMsU0FBUyxDQUFDO1NBQ25CO1dBQ0Y7SUFDRCxHQUFDLGdDQUFxQixDQUFDLElBQUk7UUFDekIsR0FBQyxxQkFBVyxDQUFDLE9BQU8sSUFBRztZQUNyQixlQUFlLEVBQUUsc0JBQXNCO1lBQ3ZDLFFBQVEsRUFBRSxvQkFBWTtZQUN0QixLQUFLLEVBQUUsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUM7U0FDcEQ7UUFDRCxHQUFDLHFCQUFXLENBQUMsT0FBTyxJQUFHO1lBQ3JCLGVBQWUsRUFBRSxzQkFBc0I7WUFDdkMsUUFBUSxFQUFFLG9CQUFZO1lBQ3RCLEtBQUssRUFBRSxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQztTQUNwRDtXQUNGO0lBQ0QsR0FBQyxnQ0FBcUIsQ0FBQyxNQUFNO1FBQzNCLEdBQUMscUJBQVcsQ0FBQyxPQUFPLElBQUc7WUFDckIsZUFBZSxFQUFFLHNCQUFzQjtZQUN2QyxRQUFRLEVBQUUsc0JBQWM7WUFDeEIsS0FBSyxFQUFFLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQztTQUMvRDtRQUNELEdBQUMscUJBQVcsQ0FBQyxPQUFPLElBQUc7WUFDckIsZUFBZSxFQUFFLHNCQUFzQjtZQUN2QyxRQUFRLEVBQUUsc0JBQWM7WUFDeEIsS0FBSyxFQUFFLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQztTQUMvRDtXQUNGO0lBQ0QsR0FBQyxnQ0FBcUIsQ0FBQyxRQUFRO1FBQzdCLEdBQUMscUJBQVcsQ0FBQyxPQUFPLElBQUc7WUFDckIsZUFBZSxFQUFFLHNCQUFzQjtZQUN2QyxRQUFRLEVBQUUsd0JBQWdCO1lBQzFCLEtBQUssRUFBRSxDQUFDLFNBQVMsQ0FBQztTQUNuQjtRQUNELEdBQUMscUJBQVcsQ0FBQyxPQUFPLElBQUc7WUFDckIsZUFBZSxFQUFFLHNCQUFzQjtZQUN2QyxRQUFRLEVBQUUsd0JBQWdCO1lBQzFCLEtBQUssRUFBRSxDQUFDLFNBQVMsQ0FBQztTQUNuQjtXQUNGO0lBQ0QsR0FBQyxnQ0FBcUIsQ0FBQyxRQUFRO1FBQzdCLEdBQUMscUJBQVcsQ0FBQyxPQUFPLElBQUc7WUFDckIsZUFBZSxFQUFFLHdCQUF3QjtZQUN6QyxRQUFRLEVBQUUsd0JBQWdCO1lBQzFCLEtBQUssRUFBRSxDQUFDLFNBQVMsQ0FBQztTQUNuQjtRQUNELEdBQUMscUJBQVcsQ0FBQyxPQUFPLElBQUc7WUFDckIsZUFBZSxFQUFFLHdCQUF3QjtZQUN6QyxRQUFRLEVBQUUsd0JBQWdCO1lBQzFCLEtBQUssRUFBRSxDQUFDLFNBQVMsQ0FBQztTQUNuQjtXQUNGO09BQ0YsQ0FBQztBQUVGOzs7R0FHRztBQUNILFNBQWdCLGtCQUFrQixDQUFDLElBQTJCLEVBQUUsT0FBb0I7SUFDbEYsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDbkMsQ0FBQztBQUZELGdEQUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV0d29ya1R5cGUgfSBmcm9tICdAYml0Z28vc3RhdGljcyc7XG5pbXBvcnQgeyBTdGFraW5nT3BlcmF0aW9uVHlwZXMgfSBmcm9tICcuLi9iYXNlQ29pbic7XG5pbXBvcnQgeyBDb250cmFjdE1ldGhvZENvbmZpZyB9IGZyb20gJy4uL2V0aC9pZmFjZSc7XG5cbmV4cG9ydCBjb25zdCBMb2NrTWV0aG9kSWQgPSAnMHhmODNkMDhiYSc7IC8vIGxvY2soKVxuZXhwb3J0IGNvbnN0IFVubG9ja01ldGhvZElkID0gJzB4NjE5OGUzMzknOyAvLyB1bmxvY2soKVxuZXhwb3J0IGNvbnN0IFZvdGVNZXRob2RJZCA9ICcweDU4MGQ3NDdhJzsgLy8gdm90ZSgpXG5leHBvcnQgY29uc3QgVW52b3RlTWV0aG9kSWQgPSAnMHg2ZTE5ODQ3NSc7IC8vIHJldm9rZUFjdGl2ZSgpXG5leHBvcnQgY29uc3QgQWN0aXZhdGVNZXRob2RJZCA9ICcweDFjNWE5ZDljJzsgLy8gYWN0aXZhdGUoKVxuZXhwb3J0IGNvbnN0IFdpdGhkcmF3TWV0aG9kSWQgPSAnMHgyZTFhN2Q0ZCc7IC8vIHdpdGhkcmF3KClcblxuY29uc3QgTG9ja2VkR29sZFRlc3RuZXRBZGRyZXNzID0gJzB4OTRjM2U2Njc1MDE1ZDg0NzliNjQ4NjU3ZTdkZGZjZDkzODQ4OWQwZCc7XG5jb25zdCBMb2NrZWRHb2xkTWFpbm5ldEFkZHJlc3MgPSAnMHg2Y2MwODNhZWQ5ZTNlYmUzMDJhNjMzNmRiYzdjOTIxYzlmMDMzNDllJztcbmNvbnN0IEVsZWN0aW9uVGVzdG5ldEFkZHJlc3MgPSAnMHgxMWZlNTIzZjkzY2FjMTg1ZDEyY2IzOWNjM2JkMjc5ZDJkZTUyNGY4JztcbmNvbnN0IEVsZWN0aW9uTWFpbm5ldEFkZHJlc3MgPSAnMHg4ZDY2NzcxOTIxNDQyOTI4NzA5MDdlM2ZhOGE1NTI3ZmU1NWE3ZmY2JztcblxuY29uc3Qgb3BlcmF0aW9ucyA9IHtcbiAgW1N0YWtpbmdPcGVyYXRpb25UeXBlcy5MT0NLXToge1xuICAgIFtOZXR3b3JrVHlwZS5URVNUTkVUXToge1xuICAgICAgY29udHJhY3RBZGRyZXNzOiBMb2NrZWRHb2xkVGVzdG5ldEFkZHJlc3MsXG4gICAgICBtZXRob2RJZDogTG9ja01ldGhvZElkLFxuICAgICAgdHlwZXM6IFtdLFxuICAgIH0sXG4gICAgW05ldHdvcmtUeXBlLk1BSU5ORVRdOiB7XG4gICAgICBjb250cmFjdEFkZHJlc3M6IExvY2tlZEdvbGRNYWlubmV0QWRkcmVzcyxcbiAgICAgIG1ldGhvZElkOiBMb2NrTWV0aG9kSWQsXG4gICAgICB0eXBlczogW10sXG4gICAgfSxcbiAgfSxcbiAgW1N0YWtpbmdPcGVyYXRpb25UeXBlcy5VTkxPQ0tdOiB7XG4gICAgW05ldHdvcmtUeXBlLlRFU1RORVRdOiB7XG4gICAgICBjb250cmFjdEFkZHJlc3M6IExvY2tlZEdvbGRUZXN0bmV0QWRkcmVzcyxcbiAgICAgIG1ldGhvZElkOiBVbmxvY2tNZXRob2RJZCxcbiAgICAgIHR5cGVzOiBbJ3VpbnQyNTYnXSxcbiAgICB9LFxuICAgIFtOZXR3b3JrVHlwZS5NQUlOTkVUXToge1xuICAgICAgY29udHJhY3RBZGRyZXNzOiBMb2NrZWRHb2xkTWFpbm5ldEFkZHJlc3MsXG4gICAgICBtZXRob2RJZDogVW5sb2NrTWV0aG9kSWQsXG4gICAgICB0eXBlczogWyd1aW50MjU2J10sXG4gICAgfSxcbiAgfSxcbiAgW1N0YWtpbmdPcGVyYXRpb25UeXBlcy5WT1RFXToge1xuICAgIFtOZXR3b3JrVHlwZS5URVNUTkVUXToge1xuICAgICAgY29udHJhY3RBZGRyZXNzOiBFbGVjdGlvblRlc3RuZXRBZGRyZXNzLFxuICAgICAgbWV0aG9kSWQ6IFZvdGVNZXRob2RJZCxcbiAgICAgIHR5cGVzOiBbJ2FkZHJlc3MnLCAndWludDI1NicsICdhZGRyZXNzJywgJ2FkZHJlc3MnXSxcbiAgICB9LFxuICAgIFtOZXR3b3JrVHlwZS5NQUlOTkVUXToge1xuICAgICAgY29udHJhY3RBZGRyZXNzOiBFbGVjdGlvbk1haW5uZXRBZGRyZXNzLFxuICAgICAgbWV0aG9kSWQ6IFZvdGVNZXRob2RJZCxcbiAgICAgIHR5cGVzOiBbJ2FkZHJlc3MnLCAndWludDI1NicsICdhZGRyZXNzJywgJ2FkZHJlc3MnXSxcbiAgICB9LFxuICB9LFxuICBbU3Rha2luZ09wZXJhdGlvblR5cGVzLlVOVk9URV06IHtcbiAgICBbTmV0d29ya1R5cGUuVEVTVE5FVF06IHtcbiAgICAgIGNvbnRyYWN0QWRkcmVzczogRWxlY3Rpb25UZXN0bmV0QWRkcmVzcyxcbiAgICAgIG1ldGhvZElkOiBVbnZvdGVNZXRob2RJZCxcbiAgICAgIHR5cGVzOiBbJ2FkZHJlc3MnLCAndWludDI1NicsICdhZGRyZXNzJywgJ2FkZHJlc3MnLCAndWludDI1NiddLFxuICAgIH0sXG4gICAgW05ldHdvcmtUeXBlLk1BSU5ORVRdOiB7XG4gICAgICBjb250cmFjdEFkZHJlc3M6IEVsZWN0aW9uTWFpbm5ldEFkZHJlc3MsXG4gICAgICBtZXRob2RJZDogVW52b3RlTWV0aG9kSWQsXG4gICAgICB0eXBlczogWydhZGRyZXNzJywgJ3VpbnQyNTYnLCAnYWRkcmVzcycsICdhZGRyZXNzJywgJ3VpbnQyNTYnXSxcbiAgICB9LFxuICB9LFxuICBbU3Rha2luZ09wZXJhdGlvblR5cGVzLkFDVElWQVRFXToge1xuICAgIFtOZXR3b3JrVHlwZS5URVNUTkVUXToge1xuICAgICAgY29udHJhY3RBZGRyZXNzOiBFbGVjdGlvblRlc3RuZXRBZGRyZXNzLFxuICAgICAgbWV0aG9kSWQ6IEFjdGl2YXRlTWV0aG9kSWQsXG4gICAgICB0eXBlczogWydhZGRyZXNzJ10sXG4gICAgfSxcbiAgICBbTmV0d29ya1R5cGUuTUFJTk5FVF06IHtcbiAgICAgIGNvbnRyYWN0QWRkcmVzczogRWxlY3Rpb25NYWlubmV0QWRkcmVzcyxcbiAgICAgIG1ldGhvZElkOiBBY3RpdmF0ZU1ldGhvZElkLFxuICAgICAgdHlwZXM6IFsnYWRkcmVzcyddLFxuICAgIH0sXG4gIH0sXG4gIFtTdGFraW5nT3BlcmF0aW9uVHlwZXMuV0lUSERSQVddOiB7XG4gICAgW05ldHdvcmtUeXBlLlRFU1RORVRdOiB7XG4gICAgICBjb250cmFjdEFkZHJlc3M6IExvY2tlZEdvbGRUZXN0bmV0QWRkcmVzcyxcbiAgICAgIG1ldGhvZElkOiBXaXRoZHJhd01ldGhvZElkLFxuICAgICAgdHlwZXM6IFsndWludDI1NiddLFxuICAgIH0sXG4gICAgW05ldHdvcmtUeXBlLk1BSU5ORVRdOiB7XG4gICAgICBjb250cmFjdEFkZHJlc3M6IExvY2tlZEdvbGRNYWlubmV0QWRkcmVzcyxcbiAgICAgIG1ldGhvZElkOiBXaXRoZHJhd01ldGhvZElkLFxuICAgICAgdHlwZXM6IFsndWludDI1NiddLFxuICAgIH0sXG4gIH0sXG59O1xuXG4vKipcbiAqIEBwYXJhbSB0eXBlXG4gKiBAcGFyYW0gbmV0d29ya1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3BlcmF0aW9uQ29uZmlnKHR5cGU6IFN0YWtpbmdPcGVyYXRpb25UeXBlcywgbmV0d29yazogTmV0d29ya1R5cGUpOiBDb250cmFjdE1ldGhvZENvbmZpZyB7XG4gIHJldHVybiBvcGVyYXRpb25zW3R5cGVdW25ldHdvcmtdO1xufVxuIl19