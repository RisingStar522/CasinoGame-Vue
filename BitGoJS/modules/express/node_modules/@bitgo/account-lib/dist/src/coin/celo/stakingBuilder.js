"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ethereumjs_util_1 = __importDefault(require("ethereumjs-util"));
var utils_1 = require("../eth/utils");
var errors_1 = require("../baseCoin/errors");
var baseCoin_1 = require("../baseCoin");
var stakingCall_1 = require("./stakingCall");
var stakingUtils_1 = require("./stakingUtils");
var StakingBuilder = /** @class */ (function () {
    function StakingBuilder(coinConfig, serializedData) {
        this.DEFAULT_ADDRESS = '0x0000000000000000000000000000000000000000';
        this._lesser = this.DEFAULT_ADDRESS;
        this._greater = this.DEFAULT_ADDRESS;
        this._coinConfig = coinConfig;
        if (serializedData) {
            this.decodeStakingData(serializedData);
        }
    }
    //region Staking properties
    StakingBuilder.prototype.type = function (type) {
        this._type = type;
        return this;
    };
    StakingBuilder.prototype.amount = function (value) {
        if (!utils_1.isValidAmount(value)) {
            throw new errors_1.InvalidParameterValueError('Invalid value for stake transaction');
        }
        this._amount = value;
        return this;
    };
    StakingBuilder.prototype.group = function (validatorGroup) {
        if (!utils_1.isValidEthAddress(validatorGroup)) {
            throw new errors_1.InvalidParameterValueError('Invalid validator group address');
        }
        this._validatorGroup = validatorGroup;
        return this;
    };
    StakingBuilder.prototype.lesser = function (lesser) {
        if (!utils_1.isValidEthAddress(lesser)) {
            throw new errors_1.InvalidParameterValueError('Invalid address for lesser');
        }
        this._lesser = lesser;
        return this;
    };
    StakingBuilder.prototype.greater = function (greater) {
        if (!utils_1.isValidEthAddress(greater)) {
            throw new errors_1.InvalidParameterValueError('Invalid address for greater');
        }
        this._greater = greater;
        return this;
    };
    StakingBuilder.prototype.index = function (index) {
        if (index < 0) {
            throw new errors_1.InvalidParameterValueError('Invalid index for staking transaction');
        }
        this._index = index;
        return this;
    };
    //endregion
    //region Staking building
    StakingBuilder.prototype.build = function () {
        this.validateMandatoryFields();
        switch (this._type) {
            case baseCoin_1.StakingOperationTypes.LOCK:
                this.validateAmount();
                return this.buildLockStaking();
            case baseCoin_1.StakingOperationTypes.VOTE:
                this.validateElectionFields();
                return this.buildVoteStaking();
            case baseCoin_1.StakingOperationTypes.ACTIVATE:
                this.validateGroup();
                return this.buildActivateStaking();
            case baseCoin_1.StakingOperationTypes.UNVOTE:
                this.validateUnvoteFields();
                return this.buildUnvoteStaking();
            case baseCoin_1.StakingOperationTypes.UNLOCK:
                this.validateAmount();
                return this.buildUnlockStaking();
            case baseCoin_1.StakingOperationTypes.WITHDRAW:
                this.validateIndex();
                return this.buildWithdrawStaking();
            default:
                throw new errors_1.InvalidTransactionError('Invalid staking operation: ' + this._type);
        }
    };
    /**
     * Builds a lock gold operation sending the amount on the transaction value field
     *
     * @returns {StakingCall} a lock gold operation using the LockedGold contract
     */
    StakingBuilder.prototype.buildLockStaking = function () {
        var operation = stakingUtils_1.getOperationConfig(this._type, this._coinConfig.network.type);
        return new stakingCall_1.StakingCall(this._amount, operation.contractAddress, operation.methodId, operation.types, []);
    };
    /**
     * Builds an unlock gold operation sending the amount encoded on the data field
     *
     * params
     * amount: amount of locked gold to be unlocked
     *
     * @returns {StakingCall} an unlock gold operation using the LockedGold contract
     */
    StakingBuilder.prototype.buildUnlockStaking = function () {
        var operation = stakingUtils_1.getOperationConfig(this._type, this._coinConfig.network.type);
        var params = [this._amount];
        return new stakingCall_1.StakingCall('0', operation.contractAddress, operation.methodId, operation.types, params);
    };
    /**
     * Builds a vote operation that uses locked gold to add pending votes for a validator group.
     *
     * params
     * validatorGroup: group to vote for
     * amount: amount of votes (locked gold) for the group
     * lesser: validator group that has less votes than the validatorGroup
     * greater: validator group that has more vots than the validatorGroup
     *
     * @returns {StakingCall} an vote operation using the Election contract
     */
    StakingBuilder.prototype.buildVoteStaking = function () {
        var operation = stakingUtils_1.getOperationConfig(this._type, this._coinConfig.network.type);
        var params = [this._validatorGroup, this._amount, this._lesser, this._greater];
        return new stakingCall_1.StakingCall('0', operation.contractAddress, operation.methodId, operation.types, params);
    };
    /**
     * Builds an unvote operation to revoke active votes for a validator group.
     *
     * params
     * validatorGroup: group whose votes will be revoked
     * amount: amount of votes (locked gold) that will be revoked
     * lesser: validator group that has less votes than the validatorGroup
     * greater: validator group that has more vots than the validatorGroup
     * index: index of the validatorGroup on the list of groups the address has voted for
     *
     * @returns {StakingCall} an vote operation using the Election contract
     */
    StakingBuilder.prototype.buildUnvoteStaking = function () {
        var operation = stakingUtils_1.getOperationConfig(this._type, this._coinConfig.network.type);
        var params = [this._validatorGroup, this._amount, this._lesser, this._greater, this._index.toString()];
        return new stakingCall_1.StakingCall('0', operation.contractAddress, operation.methodId, operation.types, params);
    };
    /**
     * Builds an activate vote operation to change all the votes casted for a validator
     * from 'pending' to 'active'
     *
     * params
     * validatorGroup: group whose votes will be activated
     *
     * @returns {StakingCall} an activate votes operation
     */
    StakingBuilder.prototype.buildActivateStaking = function () {
        var operation = stakingUtils_1.getOperationConfig(this._type, this._coinConfig.network.type);
        var params = [this._validatorGroup];
        return new stakingCall_1.StakingCall('0', operation.contractAddress, operation.methodId, operation.types, params);
    };
    /**
     * Builds a withdraw operation for locked gold that has been unlocked
     * after the unlocking period has passed.
     *
     * params
     * index: index of the unlock operation whose unlocking period has passed.
     *
     * @returns {StakingCall} an activate votes operation
     */
    StakingBuilder.prototype.buildWithdrawStaking = function () {
        var operation = stakingUtils_1.getOperationConfig(this._type, this._coinConfig.network.type);
        var params = [this._index.toString()];
        return new stakingCall_1.StakingCall('0', operation.contractAddress, operation.methodId, operation.types, params);
    };
    //endregion
    //region Validation methods
    StakingBuilder.prototype.validateMandatoryFields = function () {
        if (!(this._type !== undefined && this._coinConfig)) {
            throw new errors_1.BuildTransactionError('Missing staking mandatory fields. Type and coin are required');
        }
    };
    StakingBuilder.prototype.validateElectionFields = function () {
        this.validateGroup();
        this.validateAmount();
        if (this._lesser === this._greater) {
            throw new errors_1.BuildTransactionError('Greater and lesser values should not be the same');
        }
    };
    StakingBuilder.prototype.validateIndex = function () {
        if (this._index === undefined) {
            throw new errors_1.BuildTransactionError('Missing index for staking transaction');
        }
    };
    StakingBuilder.prototype.validateAmount = function () {
        if (this._amount === undefined) {
            throw new errors_1.BuildTransactionError('Missing amount for staking transaction');
        }
    };
    StakingBuilder.prototype.validateUnvoteFields = function () {
        this.validateElectionFields();
        this.validateIndex();
    };
    StakingBuilder.prototype.validateGroup = function () {
        if (!this._validatorGroup) {
            throw new errors_1.BuildTransactionError('Missing validator group for staking transaction');
        }
    };
    //endregion
    //region Deserialization methods
    StakingBuilder.prototype.decodeStakingData = function (data) {
        this.classifyStakingType(data);
        var operation = stakingUtils_1.getOperationConfig(this._type, this._coinConfig.network.type);
        var decoded = utils_1.getRawDecoded(operation.types, utils_1.getBufferedByteCode(operation.methodId, data));
        switch (this._type) {
            case baseCoin_1.StakingOperationTypes.VOTE:
                this.validateDecodedDataLength(decoded.length, 4, data);
                var groupToVote = decoded[0], amount = decoded[1], lesser = decoded[2], greater = decoded[3];
                this._amount = ethereumjs_util_1.default.bufferToHex(amount);
                this._validatorGroup = ethereumjs_util_1.default.addHexPrefix(groupToVote);
                this._lesser = ethereumjs_util_1.default.addHexPrefix(lesser);
                this._greater = ethereumjs_util_1.default.addHexPrefix(greater);
                break;
            case baseCoin_1.StakingOperationTypes.UNVOTE:
                this.validateDecodedDataLength(decoded.length, 5, data);
                var groupToUnvote = decoded[0], amountUnvote = decoded[1], lesserUnvote = decoded[2], greaterUnvote = decoded[3], indexUnvote = decoded[4];
                this._validatorGroup = ethereumjs_util_1.default.addHexPrefix(groupToUnvote);
                this._amount = ethereumjs_util_1.default.bufferToHex(amountUnvote);
                this._lesser = ethereumjs_util_1.default.addHexPrefix(lesserUnvote);
                this._greater = ethereumjs_util_1.default.addHexPrefix(greaterUnvote);
                this._index = utils_1.hexStringToNumber(ethereumjs_util_1.default.bufferToHex(indexUnvote));
                break;
            case baseCoin_1.StakingOperationTypes.ACTIVATE:
                this.validateDecodedDataLength(decoded.length, 1, data);
                var groupToActivate = decoded[0];
                this._validatorGroup = ethereumjs_util_1.default.addHexPrefix(groupToActivate);
                break;
            case baseCoin_1.StakingOperationTypes.UNLOCK:
                if (decoded.length !== 1) {
                    throw new errors_1.BuildTransactionError("Invalid unlock decoded data: " + data);
                }
                var decodedAmount = decoded[0];
                this._amount = ethereumjs_util_1.default.bufferToHex(decodedAmount);
                break;
            case baseCoin_1.StakingOperationTypes.WITHDRAW:
                this.validateDecodedDataLength(decoded.length, 1, data);
                var index = decoded[0];
                this._index = utils_1.hexStringToNumber(ethereumjs_util_1.default.bufferToHex(index));
                break;
            default:
                throw new errors_1.BuildTransactionError("Invalid staking data: " + this._type);
        }
    };
    StakingBuilder.prototype.validateDecodedDataLength = function (actual, expected, data) {
        if (actual !== expected) {
            throw new errors_1.BuildTransactionError("Invalid staking decoded data: " + data);
        }
    };
    StakingBuilder.prototype.classifyStakingType = function (data) {
        if (data.startsWith(stakingUtils_1.VoteMethodId)) {
            this._type = baseCoin_1.StakingOperationTypes.VOTE;
        }
        else if (data.startsWith(stakingUtils_1.UnvoteMethodId)) {
            this._type = baseCoin_1.StakingOperationTypes.UNVOTE;
        }
        else if (data.startsWith(stakingUtils_1.ActivateMethodId)) {
            this._type = baseCoin_1.StakingOperationTypes.ACTIVATE;
        }
        else if (data.startsWith(stakingUtils_1.UnlockMethodId)) {
            this._type = baseCoin_1.StakingOperationTypes.UNLOCK;
        }
        else if (data.startsWith(stakingUtils_1.WithdrawMethodId)) {
            this._type = baseCoin_1.StakingOperationTypes.WITHDRAW;
        }
        else {
            throw new errors_1.BuildTransactionError("Invalid staking bytecode: " + data);
        }
    };
    return StakingBuilder;
}());
exports.StakingBuilder = StakingBuilder;
//# sourceMappingURL=data:application/json;base64,