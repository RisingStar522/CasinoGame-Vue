"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Internal metadata. Defines the type of transaction.
 */
var TransactionType;
(function (TransactionType) {
    TransactionType[TransactionType["Send"] = 0] = "Send";
    // Initialize a wallet on-chain (e.g. Multi-sig contract deployment)
    TransactionType[TransactionType["WalletInitialization"] = 1] = "WalletInitialization";
    // Initialize an address on-chain(e.g. Forwarder contract deployment)
    TransactionType[TransactionType["AddressInitialization"] = 2] = "AddressInitialization";
    // Flush tokens from a forwarder address to its base address
    TransactionType[TransactionType["FlushTokens"] = 3] = "FlushTokens";
    // Send a raw single-sig transaction
    TransactionType[TransactionType["SingleSigSend"] = 4] = "SingleSigSend";
    // Update an account on-chain (e.g. Public key revelation operation for Tezos)
    TransactionType[TransactionType["AccountUpdate"] = 5] = "AccountUpdate";
    // Lock
    TransactionType[TransactionType["StakingLock"] = 6] = "StakingLock";
    // Vote
    TransactionType[TransactionType["StakingVote"] = 7] = "StakingVote";
    // Unvote
    TransactionType[TransactionType["StakingUnvote"] = 8] = "StakingUnvote";
    // Activate
    TransactionType[TransactionType["StakingActivate"] = 9] = "StakingActivate";
    // Unlock
    TransactionType[TransactionType["StakingUnlock"] = 10] = "StakingUnlock";
    // Withdraw
    TransactionType[TransactionType["StakingWithdraw"] = 11] = "StakingWithdraw";
})(TransactionType = exports.TransactionType || (exports.TransactionType = {}));
/**
 * Generic list of encoding formats. Can be used as arguments for methods inputs.
 */
var AddressFormat;
(function (AddressFormat) {
    AddressFormat["hex"] = "hex";
    AddressFormat["base58"] = "base58";
})(AddressFormat = exports.AddressFormat || (exports.AddressFormat = {}));
var StakingOperationTypes;
(function (StakingOperationTypes) {
    StakingOperationTypes[StakingOperationTypes["LOCK"] = 0] = "LOCK";
    StakingOperationTypes[StakingOperationTypes["VOTE"] = 1] = "VOTE";
    StakingOperationTypes[StakingOperationTypes["UNVOTE"] = 2] = "UNVOTE";
    StakingOperationTypes[StakingOperationTypes["ACTIVATE"] = 3] = "ACTIVATE";
    StakingOperationTypes[StakingOperationTypes["UNLOCK"] = 4] = "UNLOCK";
    StakingOperationTypes[StakingOperationTypes["WITHDRAW"] = 5] = "WITHDRAW";
})(StakingOperationTypes = exports.StakingOperationTypes || (exports.StakingOperationTypes = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW51bS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb2luL2Jhc2VDb2luL2VudW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7R0FFRztBQUNILElBQVksZUF3Qlg7QUF4QkQsV0FBWSxlQUFlO0lBQ3pCLHFEQUFJLENBQUE7SUFDSixvRUFBb0U7SUFDcEUscUZBQW9CLENBQUE7SUFDcEIscUVBQXFFO0lBQ3JFLHVGQUFxQixDQUFBO0lBQ3JCLDREQUE0RDtJQUM1RCxtRUFBVyxDQUFBO0lBQ1gsb0NBQW9DO0lBQ3BDLHVFQUFhLENBQUE7SUFDYiw4RUFBOEU7SUFDOUUsdUVBQWEsQ0FBQTtJQUNiLE9BQU87SUFDUCxtRUFBVyxDQUFBO0lBQ1gsT0FBTztJQUNQLG1FQUFXLENBQUE7SUFDWCxTQUFTO0lBQ1QsdUVBQWEsQ0FBQTtJQUNiLFdBQVc7SUFDWCwyRUFBZSxDQUFBO0lBQ2YsU0FBUztJQUNULHdFQUFhLENBQUE7SUFDYixXQUFXO0lBQ1gsNEVBQWUsQ0FBQTtBQUNqQixDQUFDLEVBeEJXLGVBQWUsR0FBZix1QkFBZSxLQUFmLHVCQUFlLFFBd0IxQjtBQUVEOztHQUVHO0FBQ0gsSUFBWSxhQUdYO0FBSEQsV0FBWSxhQUFhO0lBQ3ZCLDRCQUFXLENBQUE7SUFDWCxrQ0FBaUIsQ0FBQTtBQUNuQixDQUFDLEVBSFcsYUFBYSxHQUFiLHFCQUFhLEtBQWIscUJBQWEsUUFHeEI7QUFFRCxJQUFZLHFCQU9YO0FBUEQsV0FBWSxxQkFBcUI7SUFDL0IsaUVBQUksQ0FBQTtJQUNKLGlFQUFJLENBQUE7SUFDSixxRUFBTSxDQUFBO0lBQ04seUVBQVEsQ0FBQTtJQUNSLHFFQUFNLENBQUE7SUFDTix5RUFBUSxDQUFBO0FBQ1YsQ0FBQyxFQVBXLHFCQUFxQixHQUFyQiw2QkFBcUIsS0FBckIsNkJBQXFCLFFBT2hDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBJbnRlcm5hbCBtZXRhZGF0YS4gRGVmaW5lcyB0aGUgdHlwZSBvZiB0cmFuc2FjdGlvbi5cbiAqL1xuZXhwb3J0IGVudW0gVHJhbnNhY3Rpb25UeXBlIHtcbiAgU2VuZCxcbiAgLy8gSW5pdGlhbGl6ZSBhIHdhbGxldCBvbi1jaGFpbiAoZS5nLiBNdWx0aS1zaWcgY29udHJhY3QgZGVwbG95bWVudClcbiAgV2FsbGV0SW5pdGlhbGl6YXRpb24sXG4gIC8vIEluaXRpYWxpemUgYW4gYWRkcmVzcyBvbi1jaGFpbihlLmcuIEZvcndhcmRlciBjb250cmFjdCBkZXBsb3ltZW50KVxuICBBZGRyZXNzSW5pdGlhbGl6YXRpb24sXG4gIC8vIEZsdXNoIHRva2VucyBmcm9tIGEgZm9yd2FyZGVyIGFkZHJlc3MgdG8gaXRzIGJhc2UgYWRkcmVzc1xuICBGbHVzaFRva2VucyxcbiAgLy8gU2VuZCBhIHJhdyBzaW5nbGUtc2lnIHRyYW5zYWN0aW9uXG4gIFNpbmdsZVNpZ1NlbmQsXG4gIC8vIFVwZGF0ZSBhbiBhY2NvdW50IG9uLWNoYWluIChlLmcuIFB1YmxpYyBrZXkgcmV2ZWxhdGlvbiBvcGVyYXRpb24gZm9yIFRlem9zKVxuICBBY2NvdW50VXBkYXRlLFxuICAvLyBMb2NrXG4gIFN0YWtpbmdMb2NrLFxuICAvLyBWb3RlXG4gIFN0YWtpbmdWb3RlLFxuICAvLyBVbnZvdGVcbiAgU3Rha2luZ1Vudm90ZSxcbiAgLy8gQWN0aXZhdGVcbiAgU3Rha2luZ0FjdGl2YXRlLFxuICAvLyBVbmxvY2tcbiAgU3Rha2luZ1VubG9jayxcbiAgLy8gV2l0aGRyYXdcbiAgU3Rha2luZ1dpdGhkcmF3LFxufVxuXG4vKipcbiAqIEdlbmVyaWMgbGlzdCBvZiBlbmNvZGluZyBmb3JtYXRzLiBDYW4gYmUgdXNlZCBhcyBhcmd1bWVudHMgZm9yIG1ldGhvZHMgaW5wdXRzLlxuICovXG5leHBvcnQgZW51bSBBZGRyZXNzRm9ybWF0IHtcbiAgaGV4ID0gJ2hleCcsXG4gIGJhc2U1OCA9ICdiYXNlNTgnLFxufVxuXG5leHBvcnQgZW51bSBTdGFraW5nT3BlcmF0aW9uVHlwZXMge1xuICBMT0NLLFxuICBWT1RFLFxuICBVTlZPVEUsXG4gIEFDVElWQVRFLFxuICBVTkxPQ0ssXG4gIFdJVEhEUkFXLFxufVxuIl19