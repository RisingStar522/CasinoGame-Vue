"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var sha384_1 = require("@stablelib/sha384");
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var nacl = __importStar(require("tweetnacl"));
var long_1 = __importDefault(require("long"));
var hedera_1 = require("../../../resources/hbar/protobuf/hedera");
var baseCoin_1 = require("../baseCoin");
var errors_1 = require("../baseCoin/errors");
var utils_1 = require("./utils");
var Transaction = /** @class */ (function (_super) {
    __extends(Transaction, _super);
    function Transaction(_coinConfig) {
        return _super.call(this, _coinConfig) || this;
    }
    /** @inheritdoc */
    Transaction.prototype.canSign = function (key) {
        return true;
    };
    Transaction.prototype.sign = function (keyPair) {
        return __awaiter(this, void 0, void 0, function () {
            var keys, secretKey, signature;
            return __generator(this, function (_a) {
                keys = keyPair.getKeys(true);
                if (!keys.prv) {
                    throw new errors_1.SigningError('Missing private key');
                }
                secretKey = utils_1.toUint8Array(keys.prv + keys.pub);
                signature = nacl.sign.detached(this._hederaTx.bodyBytes, secretKey);
                this.addSignature(utils_1.toHex(signature), keyPair);
                return [2 /*return*/];
            });
        });
    };
    /**
     * Add a signature to this transaction
     * @param signature The signature to add, in string hex format
     * @param key The key of the key that created the signature
     */
    Transaction.prototype.addSignature = function (signature, key) {
        var sigPair = new hedera_1.proto.SignaturePair();
        sigPair.pubKeyPrefix = utils_1.toUint8Array(key.getKeys(true).pub);
        sigPair.ed25519 = utils_1.toUint8Array(signature);
        var sigMap = this._hederaTx.sigMap || new hedera_1.proto.SignatureMap();
        sigMap.sigPair.push(sigPair);
        this._hederaTx.sigMap = sigMap;
        this._signatures.push(signature);
    };
    /** @inheritdoc */
    Transaction.prototype.toBroadcastFormat = function () {
        return utils_1.toHex(this.encode(this._hederaTx));
    };
    /** @inheritdoc */
    Transaction.prototype.toJson = function () {
        var _a = this.getTxIdParts(), acc = _a[0], time = _a[1];
        var result = {
            id: acc + '@' + time,
            hash: this.getTxHash(),
            data: utils_1.toHex(this._hederaTx.bodyBytes),
            fee: new bignumber_js_1.default(this._txBody.transactionFee.toString()).toNumber(),
            from: acc,
            startTime: time,
            validDuration: this._txBody.transactionValidDuration.seconds.toString(),
            node: utils_1.stringifyAccountId(this._txBody.nodeAccountID),
            memo: this._txBody.memo,
        };
        if (this._txBody.data === 'cryptoTransfer') {
            var _b = this.getTransferData(), recipient = _b[0], amount = _b[1];
            result.amount = amount;
            result.to = recipient;
        }
        return result;
    };
    /**
     * Get the recipient account and the amount
     * transferred on this transaction
     *
     * @returns {[string, string]} first element is the recipient, second element is the amount
     */
    Transaction.prototype.getTransferData = function () {
        var transferData;
        this._txBody.cryptoTransfer.transfers.accountAmounts.forEach(function (transfer) {
            var amount = long_1.default.fromValue(transfer.amount);
            if (amount.isPositive()) {
                transferData = [utils_1.stringifyAccountId(transfer.accountID), amount.toString()];
            }
        });
        return transferData;
    };
    Object.defineProperty(Transaction.prototype, "txBody", {
        //region getters & setters
        get: function () {
            return this._txBody;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Transaction.prototype, "hederaTx", {
        get: function () {
            return this._hederaTx;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets this transaction body components
     *
     * @param {proto.Transaction} tx body transaction
     */
    Transaction.prototype.body = function (tx) {
        this._txBody = hedera_1.proto.TransactionBody.decode(tx.bodyBytes);
        this._hederaTx = tx;
        // this.loadPreviousSignatures();
        this.loadInputsAndOutputs();
    };
    /**
     * Set the transaction type
     *
     * @param {TransactionType} transactionType The transaction type to be set
     */
    Transaction.prototype.setTransactionType = function (transactionType) {
        this._type = transactionType;
    };
    /**
     * Decode previous signatures from the inner hedera transaction
     * and save them into the base transaction signature list.
     */
    Transaction.prototype.loadPreviousSignatures = function () {
        var _this = this;
        if (this._hederaTx.sigMap && this._hederaTx.sigMap.sigPair) {
            var sigPairs = this._hederaTx.sigMap.sigPair;
            sigPairs.forEach(function (sigPair) {
                var signature = sigPair.ed25519;
                if (signature) {
                    _this._signatures.push(utils_1.toHex(signature));
                }
            });
        }
    };
    /**
     * Load the input and output data on this transaction using the transaction json
     * if there are outputs. For transactions without outputs (e.g. wallet initializations),
     * this function will not do anything
     */
    Transaction.prototype.loadInputsAndOutputs = function () {
        var txJson = this.toJson();
        if (txJson.to && txJson.amount) {
            this._outputs = [{
                    address: txJson.to,
                    value: txJson.amount,
                    coin: this._coinConfig.name,
                }];
            this._inputs = [{
                    address: txJson.from,
                    value: txJson.amount,
                    coin: this._coinConfig.name,
                }];
        }
    };
    /**
     * Sets this transaction body components
     *
     * @param {Uint8Array} bytes encoded body transaction
     */
    Transaction.prototype.bodyBytes = function (bytes) {
        this.body(hedera_1.proto.Transaction.decode(bytes));
    };
    //endregion
    //region helpers
    /**
     * Returns this hedera transaction id components in a readable format
     *
     * @returns {[string, string]} - transaction id parts [<account id>, <startTime in seconds>]
     */
    Transaction.prototype.getTxIdParts = function () {
        if (this._txBody &&
            this._txBody.transactionID &&
            this._txBody.transactionID.accountID &&
            this._txBody.transactionID.transactionValidStart) {
            return [
                utils_1.stringifyAccountId(this._txBody.transactionID.accountID),
                utils_1.stringifyTxTime(this._txBody.transactionID.transactionValidStart),
            ];
        }
        throw new Error('Missing transaction id information');
    };
    /**
     * Returns this transaction hash
     *
     * @returns {string} - The transaction hash
     */
    Transaction.prototype.getTxHash = function () {
        if (!this._txBody.nodeAccountID) {
            throw new Error('Missing transaction node id');
        }
        return this.getHashOf(this._hederaTx);
    };
    /**
     * Encode an object using the given encoder class
     *
     * @param obj - the object to be encoded, it must be an proto namespace object
     * @param encoder - Object encoder
     * @returns {Uint8Array} - encoded object byte array
     */
    Transaction.prototype.encode = function (obj, encoder) {
        if (encoder) {
            return encoder.encode(obj).finish();
        }
        return this.encode(obj, hedera_1.proto[obj.constructor.name]);
    };
    /**
     * Returns an sha-384 hash
     *
     * @param {Uint8Array} bytes - bytes to be hashed
     * @returns {string} - the resulting hash string
     */
    Transaction.prototype.sha = function (bytes) {
        return utils_1.toHex(sha384_1.hash(bytes));
    };
    /**
     * Returns a hash of the given proto object.
     *
     * @param obj - The object to be hashed, it must be an proto namespace object
     * @returns {string} - the resulting hash string
     */
    Transaction.prototype.getHashOf = function (obj) {
        return this.sha(this.encode(obj));
    };
    return Transaction;
}(baseCoin_1.BaseTransaction));
exports.Transaction = Transaction;
//# sourceMappingURL=data:application/json;base64,