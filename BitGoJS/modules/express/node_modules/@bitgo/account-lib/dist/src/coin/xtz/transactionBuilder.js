"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var errors_1 = require("../baseCoin/errors");
var baseCoin_1 = require("../baseCoin");
var multisigUtils_1 = require("./multisigUtils");
var transaction_1 = require("./transaction");
var keyPair_1 = require("./keyPair");
var utils_1 = require("./utils");
var transferBuilder_1 = require("./transferBuilder");
var DEFAULT_M = 3;
/**
 * Tezos transaction builder.
 */
var TransactionBuilder = /** @class */ (function (_super) {
    __extends(TransactionBuilder, _super);
    /**
     * Public constructor.
     *
     * @param {CoinConfig} _coinConfig - coin configuration
     */
    function TransactionBuilder(_coinConfig) {
        var _this = _super.call(this, _coinConfig) || this;
        _this._type = baseCoin_1.TransactionType.Send;
        _this._counter = new bignumber_js_1.default(0);
        _this._transfers = [];
        _this._walletOwnerPublicKeys = [];
        _this._multisigSignerKeyPairs = [];
        _this._dataToSignOverride = [];
        _this.transaction = new transaction_1.Transaction(_coinConfig);
        return _this;
    }
    //region Base Builder
    /** @inheritdoc */
    TransactionBuilder.prototype.fromImplementation = function (rawTransaction) {
        // Decoding the transaction is an async operation, so save it and leave the decoding for the
        // build step
        this._serializedTransaction = rawTransaction;
        return new transaction_1.Transaction(this._coinConfig);
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.signImplementation = function (key) {
        var signer = new keyPair_1.KeyPair({ prv: key.key });
        // Currently public key revelation is the only type of account update tx supported in Tezos
        if (this._type === baseCoin_1.TransactionType.AccountUpdate && !this._publicKeyToReveal) {
            throw new errors_1.SigningError('Cannot sign a public key revelation transaction without public key');
        }
        if (this._type === baseCoin_1.TransactionType.WalletInitialization && this._walletOwnerPublicKeys.length === 0) {
            throw new errors_1.SigningError('Cannot sign an wallet initialization transaction without owners');
        }
        if (this._type === baseCoin_1.TransactionType.Send &&
            this._transfers.length === 0 &&
            this._serializedTransaction === undefined) {
            throw new errors_1.SigningError('Cannot sign an empty send transaction');
        }
        if (this._type === baseCoin_1.TransactionType.Send && (!this._sourceAddress || this._sourceAddress !== signer.getAddress())) {
            // If the signer is not the source and it is a send transaction, add it to the list of
            // multisig wallet signers
            // TODO: support a combination of keys with and without custom index
            if (key.index && key.index >= DEFAULT_M) {
                throw new errors_1.BuildTransactionError('Custom index cannot be greater than the wallet total number of signers (owners)');
            }
            // Make sure either all keys passed have a custom index or none of them have
            var shouldHaveCustomIndex = key.hasOwnProperty('index');
            for (var i = 0; i < this._multisigSignerKeyPairs.length; i++) {
                if (shouldHaveCustomIndex !== (this._multisigSignerKeyPairs[i].index !== undefined)) {
                    throw new errors_1.BuildTransactionError('Custom index has to be set for all multisig contract signing keys or none');
                }
            }
            var multisigSignerKey = shouldHaveCustomIndex ? { key: signer, index: key.index } : { key: signer };
            this._multisigSignerKeyPairs.push(multisigSignerKey);
        }
        else {
            if (this._sourceKeyPair) {
                throw new errors_1.SigningError('Cannot sign multiple times a non send-type transaction');
            }
            this._sourceKeyPair = signer;
        }
        // Signing the transaction is an async operation, so save the source and leave the actual
        // signing for the build step
        return this.transaction;
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.buildImplementation = function () {
        return __awaiter(this, void 0, void 0, function () {
            var i, signatures, contents, _a, _b, _c, _d, _e, parsedTransaction;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        if (!this._serializedTransaction) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.transaction.initFromSerializedTransaction(this._serializedTransaction)];
                    case 1:
                        _f.sent();
                        i = 0;
                        _f.label = 2;
                    case 2:
                        if (!(i < this._dataToSignOverride.length)) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.getSignatures(this._dataToSignOverride[i].dataToSign)];
                    case 3:
                        signatures = _f.sent();
                        return [4 /*yield*/, this.transaction.addTransferSignature(signatures, this._dataToSignOverride[i].index || i)];
                    case 4:
                        _f.sent();
                        _f.label = 5;
                    case 5:
                        i++;
                        return [3 /*break*/, 2];
                    case 6: return [3 /*break*/, 18];
                    case 7:
                        contents = [];
                        _a = this._type;
                        switch (_a) {
                            case baseCoin_1.TransactionType.AccountUpdate: return [3 /*break*/, 8];
                            case baseCoin_1.TransactionType.WalletInitialization: return [3 /*break*/, 9];
                            case baseCoin_1.TransactionType.Send: return [3 /*break*/, 10];
                            case baseCoin_1.TransactionType.AddressInitialization: return [3 /*break*/, 12];
                            case baseCoin_1.TransactionType.SingleSigSend: return [3 /*break*/, 13];
                        }
                        return [3 /*break*/, 15];
                    case 8:
                        if (this._publicKeyToReveal) {
                            contents.push(this.buildPublicKeyRevelationOperation());
                        }
                        return [3 /*break*/, 16];
                    case 9:
                        if (this._publicKeyToReveal) {
                            contents.push(this.buildPublicKeyRevelationOperation());
                        }
                        contents.push(this.buildWalletInitializationOperations());
                        return [3 /*break*/, 16];
                    case 10:
                        if (this._publicKeyToReveal) {
                            contents.push(this.buildPublicKeyRevelationOperation());
                        }
                        _c = (_b = contents).concat;
                        return [4 /*yield*/, this.buildSendTransactionContent()];
                    case 11:
                        contents = _c.apply(_b, [_f.sent()]);
                        return [3 /*break*/, 16];
                    case 12:
                        if (this._publicKeyToReveal) {
                            contents.push(this.buildPublicKeyRevelationOperation());
                        }
                        contents = contents.concat(this.buildForwarderDeploymentContent());
                        return [3 /*break*/, 16];
                    case 13:
                        _e = (_d = contents).concat;
                        return [4 /*yield*/, this.buildSendTransactionContent()];
                    case 14:
                        // No support for revelation txns as primary use case is to send from fee address
                        contents = _e.apply(_d, [_f.sent()]);
                        return [3 /*break*/, 16];
                    case 15: throw new errors_1.BuildTransactionError('Unsupported transaction type');
                    case 16:
                        if (contents.length === 0) {
                            throw new errors_1.BuildTransactionError('Empty transaction');
                        }
                        parsedTransaction = {
                            branch: this._blockHeader,
                            contents: contents,
                        };
                        this.transaction = new transaction_1.Transaction(this._coinConfig);
                        // Build and sign a new transaction based on the latest changes
                        return [4 /*yield*/, this.transaction.initFromParsedTransaction(parsedTransaction)];
                    case 17:
                        // Build and sign a new transaction based on the latest changes
                        _f.sent();
                        _f.label = 18;
                    case 18:
                        if (!(this._sourceKeyPair && this._sourceKeyPair.getKeys().prv)) return [3 /*break*/, 20];
                        // TODO: check if there are more signers than needed for a singlesig or multisig transaction
                        return [4 /*yield*/, this.transaction.sign(this._sourceKeyPair)];
                    case 19:
                        // TODO: check if there are more signers than needed for a singlesig or multisig transaction
                        _f.sent();
                        _f.label = 20;
                    case 20: return [2 /*return*/, this.transaction];
                }
            });
        });
    };
    //endregion
    // region Common builder methods
    /**
     * Set the transaction branch id.
     *
     * @param {string} blockId A block hash to use as branch reference
     */
    TransactionBuilder.prototype.branch = function (blockId) {
        if (!utils_1.isValidBlockHash(blockId)) {
            throw new errors_1.BuildTransactionError('Invalid block hash ' + blockId);
        }
        this._blockHeader = blockId;
    };
    /**
     * The type of transaction being built.
     *
     * @param {TransactionType} type - type of the transaction
     */
    TransactionBuilder.prototype.type = function (type) {
        if (type === baseCoin_1.TransactionType.Send && this._walletOwnerPublicKeys.length > 0) {
            throw new errors_1.BuildTransactionError('Transaction cannot be labeled as Send when owners have already been set');
        }
        if (type !== baseCoin_1.TransactionType.Send && this._transfers.length > 0) {
            throw new errors_1.BuildTransactionError('Transaction contains transfers and can only be labeled as Send');
        }
        this._type = type;
    };
    /**
     * Set the transaction fees. Low fees may get a transaction rejected or never picked up by bakers.
     *
     * @param {Fee} fee Baker fees. May also include the maximum gas and storage fees to pay
     */
    TransactionBuilder.prototype.fee = function (fee) {
        this.validateValue(new bignumber_js_1.default(fee.fee));
        if (fee.gasLimit) {
            this.validateValue(new bignumber_js_1.default(fee.gasLimit));
        }
        if (fee.storageLimit) {
            this.validateValue(new bignumber_js_1.default(fee.storageLimit));
        }
        this._fee = fee;
    };
    /**
     * Set the transaction initiator. This account will pay for the transaction fees, but it will not
     * be added as an owner of a wallet in a init transaction, unless manually set as one of the
     * owners.
     *
     * @param {string} source A Tezos address
     */
    TransactionBuilder.prototype.source = function (source) {
        this.validateAddress({ address: source });
        this._sourceAddress = source;
    };
    /**
     * Set an amount of mutez to transfer in this transaction this transaction. This is different than
     * the amount to transfer from a multisig wallet.
     *
     * @param {string} amount Amount in mutez (1/1000000 Tezies)
     */
    TransactionBuilder.prototype.initialBalance = function (amount) {
        if (this._type !== baseCoin_1.TransactionType.WalletInitialization) {
            throw new errors_1.BuildTransactionError('Initial balance can only be set for wallet initialization transactions');
        }
        this.validateValue(new bignumber_js_1.default(amount));
        this._initialBalance = amount;
    };
    /**
     * Set the transaction counter to prevent submitting repeated transactions.
     *
     * @param {string} counter The counter to use
     */
    TransactionBuilder.prototype.counter = function (counter) {
        this._counter = new bignumber_js_1.default(counter);
    };
    /**
     * Set the destination address of a forwarder contract
     * Used in forwarder contract deployment as destination address
     *
     * @param {string} contractAddress - contract address to use
     */
    TransactionBuilder.prototype.forwarderDestination = function (contractAddress) {
        if (this._type !== baseCoin_1.TransactionType.AddressInitialization) {
            throw new errors_1.BuildTransactionError('Forwarder destination can only be set for address initialization transactions');
        }
        if (!utils_1.isValidOriginatedAddress(contractAddress)) {
            throw new errors_1.BuildTransactionError('Forwarder destination can only be an originated address');
        }
        this._forwarderDestination = contractAddress;
    };
    //endregion
    //region PublicKeyRevelation builder methods
    /**
     * The public key to reveal.
     *
     * @param {string} publicKey A Tezos public key
     */
    TransactionBuilder.prototype.publicKeyToReveal = function (publicKey) {
        if (this._publicKeyToReveal) {
            throw new errors_1.BuildTransactionError('Public key to reveal already set: ' + this._publicKeyToReveal);
        }
        var keyPair = new keyPair_1.KeyPair({ pub: publicKey });
        if (keyPair.getAddress() !== this._sourceAddress) {
            throw new errors_1.BuildTransactionError('Public key does not match the source address: ' + this._sourceAddress);
        }
        this._publicKeyToReveal = keyPair.getKeys().pub;
    };
    /**
     * Build a reveal operation for the source account with default fees.
     *
     * @returns {RevealOp} A Tezos reveal operation
     */
    TransactionBuilder.prototype.buildPublicKeyRevelationOperation = function () {
        var operation = multisigUtils_1.revealOperation(this._counter.toString(), this._sourceAddress, this._publicKeyToReveal);
        this._counter = this._counter.plus(1);
        return operation;
    };
    //endregion
    //region WalletInitialization builder methods
    /**
     * Set one of the owners of the multisig wallet.
     *
     * @param {string} publicKey A Tezos public key
     */
    TransactionBuilder.prototype.owner = function (publicKey) {
        if (this._type !== baseCoin_1.TransactionType.WalletInitialization) {
            throw new errors_1.BuildTransactionError('Multisig wallet owner can only be set for initialization transactions');
        }
        if (this._walletOwnerPublicKeys.length >= DEFAULT_M) {
            throw new errors_1.BuildTransactionError('A maximum of ' + DEFAULT_M + ' owners can be set for a multisig wallet');
        }
        if (!utils_1.isValidPublicKey(publicKey)) {
            throw new errors_1.BuildTransactionError('Invalid public key: ' + publicKey);
        }
        if (this._walletOwnerPublicKeys.includes(publicKey)) {
            throw new errors_1.BuildTransactionError('Repeated owner public key: ' + publicKey);
        }
        this._walletOwnerPublicKeys.push(publicKey);
    };
    /**
     * Set an initial delegate to initialize this wallet to. This is different than the delegation to
     * set while doing a separate delegation transaction.
     *
     * @param {string} delegate The address to delegate the funds to
     */
    TransactionBuilder.prototype.initialDelegate = function (delegate) {
        if (this._type !== baseCoin_1.TransactionType.WalletInitialization) {
            throw new errors_1.BuildTransactionError('Initial delegation can only be set for wallet initialization transactions');
        }
        this.validateAddress({ address: delegate });
        this._initialDelegate = delegate;
    };
    /**
     * Build an origination operation for a generic multisig contract.
     *
     * @returns {Operation} A Tezos origination operation
     */
    TransactionBuilder.prototype.buildWalletInitializationOperations = function () {
        var originationOp = multisigUtils_1.genericMultisigOriginationOperation(this._counter.toString(), this._sourceAddress, this._fee.fee, this._fee.gasLimit || utils_1.DEFAULT_GAS_LIMIT.ORIGINATION.toString(), this._fee.storageLimit || utils_1.DEFAULT_STORAGE_LIMIT.ORIGINATION.toString(), this._initialBalance || '0', this._walletOwnerPublicKeys, this._initialDelegate);
        this._counter = this._counter.plus(1);
        return originationOp;
    };
    // endregion
    //region Send builder methods
    /**
     * Initialize a new TransferBuilder to for a singlesig or multisig transaction.
     *
     * @param {string} amount Amount in mutez to be transferred
     * @returns {TransferBuilder} A transfer builder
     */
    TransactionBuilder.prototype.transfer = function (amount) {
        if (this._type !== baseCoin_1.TransactionType.Send && this._type !== baseCoin_1.TransactionType.SingleSigSend) {
            throw new errors_1.BuildTransactionError('Transfers can only be set for send transactions');
        }
        var transferBuilder = new transferBuilder_1.TransferBuilder();
        // If source was set, use it as default for
        if (this._sourceAddress) {
            transferBuilder = transferBuilder.from(this._sourceAddress);
        }
        if (this._fee) {
            transferBuilder = transferBuilder.fee(this._fee.fee);
            transferBuilder = this._fee.gasLimit ? transferBuilder.gasLimit(this._fee.gasLimit) : transferBuilder;
            transferBuilder = this._fee.storageLimit ? transferBuilder.storageLimit(this._fee.storageLimit) : transferBuilder;
        }
        this._transfers.push(transferBuilder);
        return transferBuilder.amount(amount);
    };
    /**
     * Calculate the signatures for the multisig transaction.
     *
     * @param {string} packedData The string in hexadecimal to sign
     * @returns {Promise<string[]>} List of signatures for packedData
     */
    TransactionBuilder.prototype.getSignatures = function (packedData) {
        return __awaiter(this, void 0, void 0, function () {
            var signatures, i, signature, index;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        signatures = [];
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < this._multisigSignerKeyPairs.length)) return [3 /*break*/, 4];
                        return [4 /*yield*/, utils_1.sign(this._multisigSignerKeyPairs[i].key, packedData, new Uint8Array(0))];
                    case 2:
                        signature = _a.sent();
                        index = this._multisigSignerKeyPairs[i].index;
                        signatures.push(index ? { signature: signature.sig, index: index } : { signature: signature.sig });
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, signatures];
                }
            });
        });
    };
    /**
     * Override the data to sign for a specific transfer. Used for offline signing to pass the
     * respective dataToSign for transfer at a particular index.
     *
     * @param {DataToSignOverride} data - data to override
     */
    TransactionBuilder.prototype.overrideDataToSign = function (data) {
        if (!data.index) {
            data.index = this._dataToSignOverride.length;
        }
        this._dataToSignOverride.push(data);
    };
    /**
     * Build a transaction operation for a generic multisig contract.
     *
     * @returns {Promise<TransactionOp[]>} A Tezos transaction operation
     */
    TransactionBuilder.prototype.buildSendTransactionContent = function () {
        return __awaiter(this, void 0, void 0, function () {
            var contents, i, transfer, transactionOp, signatures, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        contents = [];
                        i = 0;
                        _b.label = 1;
                    case 1:
                        if (!(i < this._transfers.length)) return [3 /*break*/, 8];
                        transfer = this._transfers[i].build();
                        transactionOp = void 0;
                        if (!utils_1.isValidOriginatedAddress(transfer.from)) return [3 /*break*/, 5];
                        if (!transfer.dataToSign) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.getSignatures(transfer.dataToSign)];
                    case 2:
                        _a = _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        _a = [];
                        _b.label = 4;
                    case 4:
                        signatures = _a;
                        transactionOp = multisigUtils_1.multisigTransactionOperation(this._counter.toString(), this._sourceAddress, transfer.amount, transfer.from, transfer.counter || '0', transfer.to, signatures, transfer.fee.fee, transfer.fee.gasLimit, transfer.fee.storageLimit);
                        return [3 /*break*/, 6];
                    case 5:
                        transactionOp = multisigUtils_1.singlesigTransactionOperation(this._counter.toString(), this._sourceAddress, transfer.amount, transfer.to, transfer.fee.fee, transfer.fee.gasLimit, transfer.fee.storageLimit);
                        _b.label = 6;
                    case 6:
                        contents.push(transactionOp);
                        this._counter = this._counter.plus(1);
                        _b.label = 7;
                    case 7:
                        i++;
                        return [3 /*break*/, 1];
                    case 8: return [2 /*return*/, contents];
                }
            });
        });
    };
    // endregion
    // region ForwarderAddressDeployment
    /**
     * Build a transaction operation for a forwarder contract
     *
     * @returns {OriginationOp} a Tezos transaction operation
     */
    TransactionBuilder.prototype.buildForwarderDeploymentContent = function () {
        var operation = multisigUtils_1.forwarderOriginationOperation(this._forwarderDestination, this._counter.toString(), this._sourceAddress, this._fee.fee, this._fee.gasLimit || utils_1.DEFAULT_GAS_LIMIT.ORIGINATION.toString(), this._fee.storageLimit || utils_1.DEFAULT_STORAGE_LIMIT.ORIGINATION.toString(), this._initialBalance || '0');
        this._counter = this._counter.plus(1);
        return operation;
    };
    // endregion
    //region Validators
    /** @inheritdoc */
    TransactionBuilder.prototype.validateValue = function (value) {
        if (value.isLessThan(0)) {
            throw new errors_1.BuildTransactionError('Value cannot be below less than zero');
        }
        // TODO: validate the amount is not bigger than the max amount in Tezos
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateAddress = function (address) {
        if (!utils_1.isValidAddress(address.address)) {
            throw new errors_1.BuildTransactionError('Invalid address ' + address.address);
        }
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateKey = function (key) {
        var keyPair = new keyPair_1.KeyPair({ prv: key.key });
        if (!keyPair.getKeys().prv) {
            throw new errors_1.BuildTransactionError('Invalid key');
        }
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateRawTransaction = function (rawTransaction) {
        // TODO: validate the transaction is either a JSON or a hex
    };
    /** @inheritdoc */
    TransactionBuilder.prototype.validateTransaction = function (transaction) {
        // TODO: validate all required fields are present in the builder before buildImplementation
        switch (this._type) {
            case baseCoin_1.TransactionType.AccountUpdate:
                break;
            case baseCoin_1.TransactionType.WalletInitialization:
                break;
            case baseCoin_1.TransactionType.Send:
                break;
            case baseCoin_1.TransactionType.AddressInitialization:
                break;
            case baseCoin_1.TransactionType.SingleSigSend:
                break;
            default:
                throw new errors_1.BuildTransactionError('Transaction type not supported');
        }
    };
    //endregion
    /** @inheritdoc */
    TransactionBuilder.prototype.displayName = function () {
        return this._coinConfig.fullName;
    };
    Object.defineProperty(TransactionBuilder.prototype, "transaction", {
        /** @inheritdoc */
        get: function () {
            return this._transaction;
        },
        /** @inheritdoc */
        set: function (transaction) {
            this._transaction = transaction;
        },
        enumerable: true,
        configurable: true
    });
    return TransactionBuilder;
}(baseCoin_1.BaseTransactionBuilder));
exports.TransactionBuilder = TransactionBuilder;
//# sourceMappingURL=data:application/json;base64,