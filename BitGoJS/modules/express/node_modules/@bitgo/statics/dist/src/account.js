"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hederaCoin = exports.tstellarToken = exports.stellarToken = exports.tceloToken = exports.celoToken = exports.erc20CompatibleAccountCoin = exports.terc20 = exports.erc20 = exports.account = exports.HederaCoin = exports.StellarCoin = exports.CeloCoin = exports.Erc20CompatibleAccountCoin = exports.Erc20Coin = exports.ContractAddressDefinedToken = exports.AccountCoinToken = exports.AccountCoin = void 0;
var base_1 = require("./base");
var errors_1 = require("./errors");
var networks_1 = require("./networks");
/**
 * Account based coins, such as Ethereum, Stellar, or XRP.
 *
 * These types of coins maintain an "account balance" for each address on the network,
 * as opposed to the unspent transaction output model which maintains a record of all
 * "pieces" of coin which belong to an address.
 */
var AccountCoin = /** @class */ (function (_super) {
    __extends(AccountCoin, _super);
    function AccountCoin(options) {
        var _this = _super.call(this, __assign(__assign({}, options), { kind: base_1.CoinKind.CRYPTO })) || this;
        _this.network = options.network;
        return _this;
    }
    AccountCoin.prototype.requiredFeatures = function () {
        return new Set([base_1.CoinFeature.ACCOUNT_MODEL]);
    };
    AccountCoin.prototype.disallowedFeatures = function () {
        return new Set([base_1.CoinFeature.UNSPENT_MODEL]);
    };
    AccountCoin.DEFAULT_FEATURES = [
        base_1.CoinFeature.ACCOUNT_MODEL,
        base_1.CoinFeature.REQUIRES_BIG_NUMBER,
        base_1.CoinFeature.VALUELESS_TRANSFER,
        base_1.CoinFeature.TRANSACTION_DATA,
    ];
    return AccountCoin;
}(base_1.BaseCoin));
exports.AccountCoin = AccountCoin;
var AccountCoinToken = /** @class */ (function (_super) {
    __extends(AccountCoinToken, _super);
    function AccountCoinToken(options) {
        return _super.call(this, __assign({}, options)) || this;
    }
    return AccountCoinToken;
}(AccountCoin));
exports.AccountCoinToken = AccountCoinToken;
/**
 * Some blockchains support tokens which are defined by an address at which they have a smart contract deployed.
 * Examples are ERC20 tokens, and the equivalent on other chains.
 */
var ContractAddressDefinedToken = /** @class */ (function (_super) {
    __extends(ContractAddressDefinedToken, _super);
    function ContractAddressDefinedToken(options) {
        var _this = _super.call(this, __assign({}, options)) || this;
        // valid ERC 20 contract addresses are "0x" followed by 40 lowercase hex characters
        if (!options.contractAddress.match(/^0x[a-f0-9]{40}$/)) {
            throw new errors_1.InvalidContractAddressError(options.name, options.contractAddress);
        }
        _this.contractAddress = options.contractAddress;
        return _this;
    }
    return ContractAddressDefinedToken;
}(AccountCoinToken));
exports.ContractAddressDefinedToken = ContractAddressDefinedToken;
/**
 * ERC 20 is a token standard for the Ethereum blockchain. They are similar to other account coins, but have a
 * contract address property which identifies the smart contract which defines the token.
 */
var Erc20Coin = /** @class */ (function (_super) {
    __extends(Erc20Coin, _super);
    function Erc20Coin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Erc20Coin;
}(ContractAddressDefinedToken));
exports.Erc20Coin = Erc20Coin;
/**
 * Some blockchains have native coins which also support the ERC20 interface such as CELO.
 */
var Erc20CompatibleAccountCoin = /** @class */ (function (_super) {
    __extends(Erc20CompatibleAccountCoin, _super);
    function Erc20CompatibleAccountCoin(options) {
        return _super.call(this, __assign(__assign({}, options), { 
            // These coins should not be classified as tokens as they are not children of other coins
            isToken: false })) || this;
    }
    return Erc20CompatibleAccountCoin;
}(ContractAddressDefinedToken));
exports.Erc20CompatibleAccountCoin = Erc20CompatibleAccountCoin;
/**
 * The CELO blockchain supports tokens of the ERC20 standard similar to ETH ERC20 tokens.
 */
var CeloCoin = /** @class */ (function (_super) {
    __extends(CeloCoin, _super);
    function CeloCoin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return CeloCoin;
}(ContractAddressDefinedToken));
exports.CeloCoin = CeloCoin;
/**
 * The Stellar network supports tokens (non-native assets)
 * XLM is also known as the native asset.
 * Stellar tokens work similar to XLM, but the token name is determined by the chain,
 * the token code and the issuer account in the form: (t)xlm:<token>-<issuer>
 */
var StellarCoin = /** @class */ (function (_super) {
    __extends(StellarCoin, _super);
    function StellarCoin(options) {
        var _this = _super.call(this, __assign({}, options)) || this;
        var domainPattern = /^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$/;
        if (options.domain !== '' && !options.domain.match(domainPattern)) {
            throw new errors_1.InvalidDomainError(options.name, options.domain);
        }
        _this.domain = options.domain;
        return _this;
    }
    return StellarCoin;
}(AccountCoinToken));
exports.StellarCoin = StellarCoin;
/**
 * The Hedera coin needs a client set with the node account Id.
 * It's an account based coin that needs the node account ID
 * where the transaction will be sent.
 */
var HederaCoin = /** @class */ (function (_super) {
    __extends(HederaCoin, _super);
    function HederaCoin(options) {
        var _this = _super.call(this, __assign({}, options)) || this;
        _this.nodeAccountId = options.nodeAccountId;
        return _this;
    }
    return HederaCoin;
}(AccountCoinToken));
exports.HederaCoin = HederaCoin;
/**
 * Factory function for account coin instances.
 *
 * @param name unique identifier of the coin
 * @param fullName Complete human-readable name of the coin
 * @param network Network object for this coin
 * @param decimalPlaces Number of decimal places this coin supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional coin prefix. Defaults to empty string
 * @param suffix? Optional coin suffix. Defaults to coin name.
 * @param isToken? Whether or not this account coin is a token of another coin
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
function account(name, fullName, network, decimalPlaces, asset, features, primaryKeyCurve, prefix, suffix, isToken) {
    if (features === void 0) { features = AccountCoin.DEFAULT_FEATURES; }
    if (primaryKeyCurve === void 0) { primaryKeyCurve = base_1.KeyCurve.Secp256k1; }
    if (prefix === void 0) { prefix = ''; }
    if (suffix === void 0) { suffix = name.toUpperCase(); }
    if (isToken === void 0) { isToken = false; }
    return Object.freeze(new AccountCoin({
        name: name,
        fullName: fullName,
        network: network,
        prefix: prefix,
        suffix: suffix,
        features: features,
        decimalPlaces: decimalPlaces,
        isToken: isToken,
        asset: asset,
        primaryKeyCurve: primaryKeyCurve,
    }));
}
exports.account = account;
/**
 * Factory function for erc20 token instances.
 *
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to Ethereum main network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
function erc20(name, fullName, decimalPlaces, contractAddress, asset, features, prefix, suffix, network, primaryKeyCurve) {
    if (features === void 0) { features = AccountCoin.DEFAULT_FEATURES; }
    if (prefix === void 0) { prefix = ''; }
    if (suffix === void 0) { suffix = name.toUpperCase(); }
    if (network === void 0) { network = networks_1.Networks.main.ethereum; }
    if (primaryKeyCurve === void 0) { primaryKeyCurve = base_1.KeyCurve.Secp256k1; }
    return Object.freeze(new Erc20Coin({
        name: name,
        fullName: fullName,
        network: network,
        contractAddress: contractAddress,
        prefix: prefix,
        suffix: suffix,
        features: features,
        decimalPlaces: decimalPlaces,
        asset: asset,
        isToken: true,
        primaryKeyCurve: primaryKeyCurve,
    }));
}
exports.erc20 = erc20;
/**
 * Factory function for testnet erc20 token instances.
 *
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to the Kovan test network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 */
function terc20(name, fullName, decimalPlaces, contractAddress, asset, features, prefix, suffix, network) {
    if (features === void 0) { features = AccountCoin.DEFAULT_FEATURES; }
    if (prefix === void 0) { prefix = ''; }
    if (suffix === void 0) { suffix = name.toUpperCase(); }
    if (network === void 0) { network = networks_1.Networks.test.kovan; }
    return erc20(name, fullName, decimalPlaces, contractAddress, asset, features, prefix, suffix, network);
}
exports.terc20 = terc20;
/**
 * Factory function for ERC20-compatible account coin instances.
 *
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param network Network object for this coin
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
function erc20CompatibleAccountCoin(name, fullName, network, decimalPlaces, contractAddress, asset, features, prefix, suffix, primaryKeyCurve) {
    if (features === void 0) { features = AccountCoin.DEFAULT_FEATURES; }
    if (prefix === void 0) { prefix = ''; }
    if (suffix === void 0) { suffix = name.toUpperCase(); }
    if (primaryKeyCurve === void 0) { primaryKeyCurve = base_1.KeyCurve.Secp256k1; }
    return Object.freeze(new Erc20CompatibleAccountCoin({
        name: name,
        fullName: fullName,
        network: network,
        contractAddress: contractAddress,
        prefix: prefix,
        suffix: suffix,
        features: features,
        decimalPlaces: decimalPlaces,
        asset: asset,
        isToken: false,
        primaryKeyCurve: primaryKeyCurve,
    }));
}
exports.erc20CompatibleAccountCoin = erc20CompatibleAccountCoin;
/**
 * Factory function for celo token instances.
 *
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to CELO main network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
function celoToken(name, fullName, decimalPlaces, contractAddress, asset, features, prefix, suffix, network, primaryKeyCurve) {
    if (features === void 0) { features = AccountCoin.DEFAULT_FEATURES; }
    if (prefix === void 0) { prefix = ''; }
    if (suffix === void 0) { suffix = name.toUpperCase(); }
    if (network === void 0) { network = networks_1.Networks.main.celo; }
    if (primaryKeyCurve === void 0) { primaryKeyCurve = base_1.KeyCurve.Secp256k1; }
    return Object.freeze(new CeloCoin({
        name: name,
        fullName: fullName,
        network: network,
        contractAddress: contractAddress,
        prefix: prefix,
        suffix: suffix,
        features: features,
        decimalPlaces: decimalPlaces,
        asset: asset,
        isToken: true,
        primaryKeyCurve: primaryKeyCurve,
    }));
}
exports.celoToken = celoToken;
/**
 * Factory function for testnet celo token instances.
 *
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param contractAddress Contract address of this token
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to the testnet CELO network.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 */
function tceloToken(name, fullName, decimalPlaces, contractAddress, asset, features, prefix, suffix, network) {
    if (features === void 0) { features = AccountCoin.DEFAULT_FEATURES; }
    if (prefix === void 0) { prefix = ''; }
    if (suffix === void 0) { suffix = name.toUpperCase(); }
    if (network === void 0) { network = networks_1.Networks.test.celo; }
    return celoToken(name, fullName, decimalPlaces, contractAddress, asset, features, prefix, suffix, network);
}
exports.tceloToken = tceloToken;
/**
 * Factory function for Stellar token instances.
 *
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param domain Domain of the token issuer (used to access token information from the issuer's stellar.toml file)
 * See https://www.stellar.org/developers/guides/concepts/stellar-toml.html
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to Stellar mainnet.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
function stellarToken(name, fullName, decimalPlaces, asset, domain, features, prefix, suffix, network, primaryKeyCurve) {
    if (domain === void 0) { domain = ''; }
    if (features === void 0) { features = AccountCoin.DEFAULT_FEATURES; }
    if (prefix === void 0) { prefix = ''; }
    if (suffix === void 0) { suffix = name.toUpperCase(); }
    if (network === void 0) { network = networks_1.Networks.main.stellar; }
    if (primaryKeyCurve === void 0) { primaryKeyCurve = base_1.KeyCurve.Ed25519; }
    return Object.freeze(new StellarCoin({
        name: name,
        fullName: fullName,
        decimalPlaces: decimalPlaces,
        asset: asset,
        domain: domain,
        features: features,
        prefix: prefix,
        suffix: suffix,
        network: network,
        isToken: true,
        primaryKeyCurve: primaryKeyCurve,
    }));
}
exports.stellarToken = stellarToken;
/**
 * Factory function for testnet Stellar token instances.
 *
 * @param name unique identifier of the token
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param domain Domain of the token issuer (used to access token information from the issuer's stellar.toml file)
 * See https://www.stellar.org/developers/guides/concepts/stellar-toml.html
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to Stellar testnet.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 */
function tstellarToken(name, fullName, decimalPlaces, asset, domain, features, prefix, suffix, network) {
    if (domain === void 0) { domain = ''; }
    if (features === void 0) { features = AccountCoin.DEFAULT_FEATURES; }
    if (prefix === void 0) { prefix = ''; }
    if (suffix === void 0) { suffix = name.toUpperCase(); }
    if (network === void 0) { network = networks_1.Networks.test.stellar; }
    return stellarToken(name, fullName, decimalPlaces, asset, domain, features, prefix, suffix, network);
}
exports.tstellarToken = tstellarToken;
/**
 * Factory function for Hedera coin instances
 *
 * @param name unique identifier of the coin
 * @param fullName Complete human-readable name of the token
 * @param decimalPlaces Number of decimal places this token supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param nodeAccountId node account Id from which the transaction will be sent
 * @param prefix? Optional token prefix. Defaults to empty string
 * @param suffix? Optional token suffix. Defaults to token name.
 * @param network? Optional token network. Defaults to Hedera mainnet.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `AccountCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
function hederaCoin(name, fullName, network, decimalPlaces, asset, nodeAccountId, features, prefix, suffix, primaryKeyCurve) {
    if (nodeAccountId === void 0) { nodeAccountId = '0.0.3'; }
    if (features === void 0) { features = AccountCoin.DEFAULT_FEATURES; }
    if (prefix === void 0) { prefix = ''; }
    if (suffix === void 0) { suffix = name.toUpperCase(); }
    if (primaryKeyCurve === void 0) { primaryKeyCurve = base_1.KeyCurve.Ed25519; }
    return Object.freeze(new HederaCoin({
        name: name,
        fullName: fullName,
        decimalPlaces: decimalPlaces,
        asset: asset,
        nodeAccountId: nodeAccountId,
        features: features,
        prefix: prefix,
        suffix: suffix,
        network: network,
        isToken: false,
        primaryKeyCurve: primaryKeyCurve,
    }));
}
exports.hederaCoin = hederaCoin;
//# sourceMappingURL=data:application/json;base64,