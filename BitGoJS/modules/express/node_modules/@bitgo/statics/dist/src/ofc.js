"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tofcerc20 = exports.ofcerc20 = exports.tofc = exports.ofc = exports.OfcCoin = void 0;
var base_1 = require("./base");
var networks_1 = require("./networks");
/**
 * OFC (off chain) coins. These are virtual coins used to represent off chain assets on the BitGo platform.
 */
var OfcCoin = /** @class */ (function (_super) {
    __extends(OfcCoin, _super);
    function OfcCoin(options) {
        var _this = this;
        var addressCoin = options.addressCoin, baseOptions = __rest(options, ["addressCoin"]);
        _this = _super.call(this, baseOptions) || this;
        _this.addressCoin = addressCoin;
        return _this;
    }
    OfcCoin.prototype.requiredFeatures = function () {
        return new Set([base_1.CoinFeature.ACCOUNT_MODEL, base_1.CoinFeature.REQUIRES_BIG_NUMBER]);
    };
    OfcCoin.prototype.disallowedFeatures = function () {
        return new Set([
            base_1.CoinFeature.UNSPENT_MODEL,
            base_1.CoinFeature.CHILD_PAYS_FOR_PARENT,
            base_1.CoinFeature.NATIVE_SEGWIT,
            base_1.CoinFeature.PAYGO,
            base_1.CoinFeature.WRAPPED_SEGWIT,
            base_1.CoinFeature.SUPPORTS_TOKENS,
        ]);
    };
    OfcCoin.DEFAULT_FEATURES = [base_1.CoinFeature.ACCOUNT_MODEL, base_1.CoinFeature.REQUIRES_BIG_NUMBER];
    return OfcCoin;
}(base_1.BaseCoin));
exports.OfcCoin = OfcCoin;
/**
 * Factory function for ofc coin instances.
 *
 * @param name unique identifier of the coin
 * @param fullName Complete human-readable name of the coin
 * @param network Network object for this coin
 * @param decimalPlaces Number of decimal places this coin supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param kind Differentiates coins which represent fiat assets from those which represent crypto assets
 * @param prefix? Optional coin prefix. Defaults to empty string
 * @param suffix? Optional coin suffix. Defaults to coin name.
 * @param isToken? Whether or not this account coin is a token of another coin
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `OfcCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
function ofc(name, fullName, decimalPlaces, asset, kind, features, prefix, suffix, network, isToken, 
/** OFC tokens use SECP256K1 under the hood even if the chain doesn't **/
primaryKeyCurve) {
    if (kind === void 0) { kind = base_1.CoinKind.CRYPTO; }
    if (features === void 0) { features = OfcCoin.DEFAULT_FEATURES; }
    if (prefix === void 0) { prefix = ''; }
    if (suffix === void 0) { suffix = name.replace(/^ofc/, '').toUpperCase(); }
    if (network === void 0) { network = networks_1.Networks.main.ofc; }
    if (isToken === void 0) { isToken = true; }
    if (primaryKeyCurve === void 0) { primaryKeyCurve = base_1.KeyCurve.Secp256k1; }
    return Object.freeze(new OfcCoin({
        name: name,
        fullName: fullName,
        network: network,
        prefix: prefix,
        suffix: suffix,
        features: features,
        decimalPlaces: decimalPlaces,
        isToken: isToken,
        asset: asset,
        kind: kind,
        primaryKeyCurve: primaryKeyCurve,
    }));
}
exports.ofc = ofc;
/**
 * Factory function for testnet ofc coin instances.
 *
 * @param name unique identifier of the coin
 * @param fullName Complete human-readable name of the coin
 * @param network Network object for this coin
 * @param decimalPlaces Number of decimal places this coin supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param kind Differentiates coins which represent fiat assets from those which represent crypto assets
 * @param prefix? Optional coin prefix. Defaults to empty string
 * @param suffix? Optional coin suffix. Defaults to coin name.
 * @param isToken? Whether or not this account coin is a token of another coin
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `OfcCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
function tofc(name, fullName, decimalPlaces, asset, kind, features, prefix, suffix, network, isToken, primaryKeyCurve) {
    if (kind === void 0) { kind = base_1.CoinKind.CRYPTO; }
    if (features === void 0) { features = OfcCoin.DEFAULT_FEATURES; }
    if (prefix === void 0) { prefix = ''; }
    if (suffix === void 0) { suffix = name.replace(/^ofc/, '').toUpperCase(); }
    if (network === void 0) { network = networks_1.Networks.test.ofc; }
    if (isToken === void 0) { isToken = true; }
    if (primaryKeyCurve === void 0) { primaryKeyCurve = base_1.KeyCurve.Secp256k1; }
    return Object.freeze(new OfcCoin({
        name: name,
        fullName: fullName,
        network: network,
        prefix: prefix,
        suffix: suffix,
        features: features,
        decimalPlaces: decimalPlaces,
        isToken: isToken,
        asset: asset,
        kind: kind,
        primaryKeyCurve: primaryKeyCurve,
    }));
}
exports.tofc = tofc;
/**
 * Factory function for ofc erc20 coin instances.
 *
 * @param name unique identifier of the coin
 * @param fullName Complete human-readable name of the coin
 * @param network Network object for this coin
 * @param decimalPlaces Number of decimal places this coin supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param kind Differentiates coins which represent fiat assets from those which represent crypto assets
 * @param prefix? Optional coin prefix. Defaults to empty string
 * @param suffix? Optional coin suffix. Defaults to coin name.
 * @param isToken? Whether or not this account coin is a token of another coin
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `OfcCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
function ofcerc20(name, fullName, decimalPlaces, asset, kind, features, prefix, suffix, network, isToken, addressCoin, primaryKeyCurve) {
    if (kind === void 0) { kind = base_1.CoinKind.CRYPTO; }
    if (features === void 0) { features = OfcCoin.DEFAULT_FEATURES; }
    if (prefix === void 0) { prefix = ''; }
    if (suffix === void 0) { suffix = name.replace(/^ofc/, '').toUpperCase(); }
    if (network === void 0) { network = networks_1.Networks.main.ofc; }
    if (isToken === void 0) { isToken = true; }
    if (addressCoin === void 0) { addressCoin = 'eth'; }
    if (primaryKeyCurve === void 0) { primaryKeyCurve = base_1.KeyCurve.Secp256k1; }
    return Object.freeze(new OfcCoin({
        name: name,
        fullName: fullName,
        network: network,
        prefix: prefix,
        suffix: suffix,
        features: features,
        decimalPlaces: decimalPlaces,
        isToken: isToken,
        asset: asset,
        kind: kind,
        addressCoin: addressCoin,
        primaryKeyCurve: primaryKeyCurve,
    }));
}
exports.ofcerc20 = ofcerc20;
/**
 * Factory function for testnet ofc erc20 coin instances.
 *
 * @param name unique identifier of the coin
 * @param fullName Complete human-readable name of the coin
 * @param network Network object for this coin
 * @param decimalPlaces Number of decimal places this coin supports (divisibility exponent)
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param kind Differentiates coins which represent fiat assets from those which represent crypto assets
 * @param prefix? Optional coin prefix. Defaults to empty string
 * @param suffix? Optional coin suffix. Defaults to coin name.
 * @param isToken? Whether or not this account coin is a token of another coin
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `OfcCoin`
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
function tofcerc20(name, fullName, decimalPlaces, asset, kind, features, prefix, suffix, network, isToken, addressCoin, primaryKeyCurve) {
    if (kind === void 0) { kind = base_1.CoinKind.CRYPTO; }
    if (features === void 0) { features = OfcCoin.DEFAULT_FEATURES; }
    if (prefix === void 0) { prefix = ''; }
    if (suffix === void 0) { suffix = name.replace(/^ofc/, '').toUpperCase(); }
    if (network === void 0) { network = networks_1.Networks.test.ofc; }
    if (isToken === void 0) { isToken = true; }
    if (addressCoin === void 0) { addressCoin = 'teth'; }
    if (primaryKeyCurve === void 0) { primaryKeyCurve = base_1.KeyCurve.Secp256k1; }
    return Object.freeze(new OfcCoin({
        name: name,
        fullName: fullName,
        network: network,
        prefix: prefix,
        suffix: suffix,
        features: features,
        decimalPlaces: decimalPlaces,
        isToken: isToken,
        asset: asset,
        kind: kind,
        addressCoin: addressCoin,
        primaryKeyCurve: primaryKeyCurve,
    }));
}
exports.tofcerc20 = tofcerc20;
//# sourceMappingURL=data:application/json;base64,