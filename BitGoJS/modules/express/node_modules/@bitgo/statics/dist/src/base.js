"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseCoin = exports.KeyCurve = exports.UnderlyingAsset = exports.CoinFeature = exports.CoinFamily = exports.CoinKind = void 0;
var errors_1 = require("./errors");
var CoinKind;
(function (CoinKind) {
    CoinKind["CRYPTO"] = "crypto";
    CoinKind["FIAT"] = "fiat";
})(CoinKind = exports.CoinKind || (exports.CoinKind = {}));
/**
 * The coin family links related variants of a single coin together.
 *
 * Typically, each coin will have a testnet and mainnet variant,
 * and these will both have the same coin family.
 *
 * For example, the coins `btc` and `tbtc` both belong to the same family, `btc`.
 */
var CoinFamily;
(function (CoinFamily) {
    CoinFamily["ALGO"] = "algo";
    CoinFamily["BCH"] = "bch";
    CoinFamily["BSV"] = "bsv";
    CoinFamily["BTC"] = "btc";
    CoinFamily["BTG"] = "btg";
    CoinFamily["CELO"] = "celo";
    CoinFamily["DASH"] = "dash";
    CoinFamily["ETH"] = "eth";
    CoinFamily["ETC"] = "etc";
    CoinFamily["EOS"] = "eos";
    CoinFamily["HBAR"] = "hbar";
    CoinFamily["LTC"] = "ltc";
    CoinFamily["OFC"] = "ofc";
    CoinFamily["RMG"] = "rmg";
    CoinFamily["RBTC"] = "rbtc";
    CoinFamily["SUSD"] = "susd";
    CoinFamily["TRX"] = "trx";
    CoinFamily["XLM"] = "xlm";
    CoinFamily["XRP"] = "xrp";
    CoinFamily["XTZ"] = "xtz";
    CoinFamily["ZEC"] = "zec";
})(CoinFamily = exports.CoinFamily || (exports.CoinFamily = {}));
/**
 * Coin features are yes or no questions about what a coin requires or is capable of.
 *
 * This allows coin-agnostic handling of coin-specific features. This is designed
 * to replace checking the coin name against a whitelist of supported coins
 * before executing some coin-specific logic, and instead allows one to check if a
 * coin supports the coin-specific feature that the logic implements.
 */
var CoinFeature;
(function (CoinFeature) {
    /*
     * The valueless transfer feature indicates that it is valid to send a transaction which moves zero units of the coin.
     *
     * An example is Ethereum, which uses zero value transactions to trigger contract calls.
     */
    CoinFeature["VALUELESS_TRANSFER"] = "valueless-transfer";
    /*
     * Transaction data means there can be arbitrary data encoded in a transaction.
     *
     * Ethereum contract call data is an example.
     */
    CoinFeature["TRANSACTION_DATA"] = "transaction-data";
    /*
     * Some coins have a higher precision range than IEEE 754 doubles, which are used to represent numbers in javascript.
     *
     * For these coins, we must use an arbitrary precision arithmetic library, and this feature indicates this requirement.
     */
    CoinFeature["REQUIRES_BIG_NUMBER"] = "requires-big-number";
    /*
     * RMG requires all wallets to have a backup key held by a BitGo approved Key Recovery Service (KRS)
     */
    CoinFeature["REQUIRES_KRS_BACKUP_KEY"] = "requires-krs-backup-key";
    /*
     * For customers which are not on a postpaid contract, we add an extra output to transactions which pays BitGo a fee.
     *
     * This fee is known as the "pay-as-you-go fee", or just "paygo" for short.
     *
     * Some coins are unable to create transactions with more than one output, so paygo outputs are not possible for these coins.
     */
    CoinFeature["PAYGO"] = "paygo";
    /*
     * Does this coin align with the unspent model?
     *
     * These are typically Bitcoin and forks of it, such as Litecoin and Bitcoin Cash.
     */
    CoinFeature["UNSPENT_MODEL"] = "unspent-model";
    /*
     * Does this coin align with the account model?
     *
     * Examples of this coin type are Ethereum, XRP, and Stellar
     */
    CoinFeature["ACCOUNT_MODEL"] = "account-model";
    /*
     * Does this coin support child-pays-for-parent transactions?
     *
     * These are special types of transactions which can accelerate the confirmation time
     * of another transaction which is stuck in the mempool due to low fees.
     *
     * This is only possible for coins which follow the unspent model (UTXO coins).
     */
    CoinFeature["CHILD_PAYS_FOR_PARENT"] = "cpfp";
    /*
     * Does this coin support pay-to-script-hash wrapped segregated witness transactions.
     *
     * These are upgraded transaction types which can only apply to UTXO coins such as Bitcoin.
     */
    CoinFeature["WRAPPED_SEGWIT"] = "wrapped-segwit";
    /*
     * Does this coin support segregated witness transactions natively? (eg, not wrapped in a P2SH indirection layer)
     *
     * These are upgraded transaction types which can only apply to UTXO coins such as Bitcoin.
     */
    CoinFeature["NATIVE_SEGWIT"] = "native-segwit";
    /*
     * Does this coin support tokens? These are distinct assets from the underlying coin, but run on the same network.
     *
     * For example, Ethereum's ERC 20 token standard means that it supports tokens, so it shall have this feature.
     */
    CoinFeature["SUPPORTS_TOKENS"] = "supports-tokens";
    /*
     * Are fees for transactions of this coin paid for by the Enterprise (eg, Enterprise gas tank)?
     */
    CoinFeature["ENTERPRISE_PAYS_FEES"] = "enterprise-pays-fees";
})(CoinFeature = exports.CoinFeature || (exports.CoinFeature = {}));
/**
 * Some coins are representations of another underlying asset class. An example
 * is Wrapped Bitcoin, which represents Bitcoin on the Ethereum blockchain.
 *
 * For these coins, the `UnderlyingAsset` provides a link to the actual
 * asset for which the coin is a unit of account.
 */
var UnderlyingAsset;
(function (UnderlyingAsset) {
    UnderlyingAsset["ALGO"] = "algo";
    UnderlyingAsset["BCH"] = "bch";
    UnderlyingAsset["BSV"] = "bsv";
    UnderlyingAsset["BTC"] = "btc";
    UnderlyingAsset["BTG"] = "btg";
    UnderlyingAsset["DASH"] = "dash";
    UnderlyingAsset["CELO"] = "celo";
    UnderlyingAsset["USD"] = "usd";
    UnderlyingAsset["ETH"] = "eth";
    UnderlyingAsset["ETC"] = "etc";
    UnderlyingAsset["EOS"] = "eos";
    UnderlyingAsset["HBAR"] = "hbar";
    UnderlyingAsset["LTC"] = "ltc";
    UnderlyingAsset["RBTC"] = "rbtc";
    UnderlyingAsset["TRX"] = "trx";
    UnderlyingAsset["XRP"] = "xrp";
    UnderlyingAsset["XLM"] = "xlm";
    UnderlyingAsset["XTZ"] = "xtz";
    UnderlyingAsset["ZEC"] = "zec";
    // ERC 20 tokens
    UnderlyingAsset["1UP"] = "1up";
    UnderlyingAsset["ABT"] = "abt";
    UnderlyingAsset["AE"] = "ae";
    UnderlyingAsset["AERGO"] = "aergo";
    UnderlyingAsset["AGWD"] = "agwd";
    UnderlyingAsset["AION"] = "aion";
    UnderlyingAsset["AMN"] = "amn";
    UnderlyingAsset["AMO"] = "amo";
    UnderlyingAsset["AMP"] = "amp";
    UnderlyingAsset["AMON"] = "amon";
    UnderlyingAsset["AMPX"] = "ampx";
    UnderlyingAsset["ANA"] = "ana";
    UnderlyingAsset["ANT"] = "ant";
    UnderlyingAsset["AOA"] = "aoa";
    UnderlyingAsset["APPC"] = "appc";
    UnderlyingAsset["ARCT"] = "arct";
    UnderlyingAsset["AST"] = "ast";
    UnderlyingAsset["AUDX"] = "audx";
    UnderlyingAsset["AXPR"] = "axpr";
    UnderlyingAsset["BAL"] = "bal";
    UnderlyingAsset["BAND"] = "band";
    UnderlyingAsset["BASIC"] = "basic";
    UnderlyingAsset["BAT"] = "bat";
    UnderlyingAsset["BAX"] = "bax";
    UnderlyingAsset["BBX"] = "bbx";
    UnderlyingAsset["BCAP"] = "bcap";
    UnderlyingAsset["BCIO"] = "bcio";
    UnderlyingAsset["BEPRO"] = "bepro";
    UnderlyingAsset["BID"] = "bid";
    UnderlyingAsset["BIDL"] = "bidl";
    UnderlyingAsset["BIRD"] = "bird";
    UnderlyingAsset["BNK"] = "bnk";
    UnderlyingAsset["BNL"] = "bnl";
    UnderlyingAsset["BNT"] = "bnt";
    UnderlyingAsset["BNTY"] = "bnty";
    UnderlyingAsset["BOX"] = "box";
    UnderlyingAsset["BRD"] = "brd";
    UnderlyingAsset["BRZ"] = "brz";
    UnderlyingAsset["BST"] = "bst";
    UnderlyingAsset["BSX"] = "bsx";
    UnderlyingAsset["BTT"] = "btt";
    UnderlyingAsset["BTU"] = "btu";
    UnderlyingAsset["BUSD"] = "busd";
    UnderlyingAsset["BUY"] = "buy";
    UnderlyingAsset["C8P"] = "c8p";
    UnderlyingAsset["CADX"] = "cadx";
    UnderlyingAsset["CAG"] = "cag";
    UnderlyingAsset["CBAT"] = "cbat";
    UnderlyingAsset["CBC"] = "cbc";
    UnderlyingAsset["CBRL"] = "cbrl";
    UnderlyingAsset["CCT"] = "cct";
    UnderlyingAsset["CDAG"] = "cdag";
    UnderlyingAsset["CDAI"] = "cdai";
    UnderlyingAsset["CDT"] = "cdt";
    UnderlyingAsset["CEL"] = "cel";
    UnderlyingAsset["CETH"] = "ceth";
    UnderlyingAsset["CHFX"] = "chfx";
    UnderlyingAsset["CHSB"] = "chsb";
    UnderlyingAsset["CIX100"] = "cix100";
    UnderlyingAsset["CLN"] = "cln";
    UnderlyingAsset["CLT"] = "clt";
    UnderlyingAsset["CNYX"] = "cnyx";
    UnderlyingAsset["COMP"] = "comp";
    UnderlyingAsset["CPAY"] = "cpay";
    UnderlyingAsset["CPLT"] = "cplt";
    UnderlyingAsset["CQX"] = "cqx";
    UnderlyingAsset["CRE"] = "cre";
    UnderlyingAsset["CREP"] = "crep";
    UnderlyingAsset["CRO"] = "cro";
    UnderlyingAsset["CRV"] = "crv";
    UnderlyingAsset["CRPT"] = "crpt";
    UnderlyingAsset["CRPT1"] = "crpt1";
    UnderlyingAsset["CSLV"] = "cslv";
    UnderlyingAsset["CSP"] = "csp";
    UnderlyingAsset["CUSD"] = "cusd";
    UnderlyingAsset["CUSDC"] = "cusdc";
    UnderlyingAsset["CWBTC"] = "cwbtc";
    UnderlyingAsset["CVC"] = "cvc";
    UnderlyingAsset["CZRX"] = "czrx";
    UnderlyingAsset["DAI"] = "dai";
    UnderlyingAsset["DATA"] = "data";
    UnderlyingAsset["DEC"] = "dec";
    UnderlyingAsset["DENT"] = "dent";
    UnderlyingAsset["DGD"] = "dgd";
    UnderlyingAsset["DGX"] = "dgx";
    UnderlyingAsset["DMT"] = "dmt";
    UnderlyingAsset["DRPU"] = "drpu";
    UnderlyingAsset["DRV"] = "drv";
    UnderlyingAsset["DYN"] = "dyn";
    UnderlyingAsset["ECHT"] = "echt";
    UnderlyingAsset["EDN"] = "edn";
    UnderlyingAsset["EDR"] = "edr";
    UnderlyingAsset["EGL"] = "egl";
    UnderlyingAsset["EGLD"] = "egld";
    UnderlyingAsset["ELF"] = "elf";
    UnderlyingAsset["EMX"] = "emx";
    UnderlyingAsset["ENG"] = "eng";
    UnderlyingAsset["ENJ"] = "enj";
    UnderlyingAsset["ERC"] = "erc";
    UnderlyingAsset["ETHOS"] = "ethos";
    UnderlyingAsset["ETV"] = "etv";
    UnderlyingAsset["EURS"] = "eurs";
    UnderlyingAsset["EURX"] = "eurx";
    UnderlyingAsset["EUX"] = "eux";
    UnderlyingAsset["EXE"] = "exe";
    UnderlyingAsset["FET"] = "fet";
    UnderlyingAsset["FF1"] = "ff1";
    UnderlyingAsset["FFT"] = "fft";
    UnderlyingAsset["FMF"] = "fmf";
    UnderlyingAsset["FTM"] = "ftm";
    UnderlyingAsset["FTT"] = "ftt";
    UnderlyingAsset["FUN"] = "fun";
    UnderlyingAsset["FXRT"] = "fxrt";
    UnderlyingAsset["GBPX"] = "gbpx";
    UnderlyingAsset["GEC"] = "gec";
    UnderlyingAsset["GEN"] = "gen";
    UnderlyingAsset["GLDX"] = "gldx";
    UnderlyingAsset["GNO"] = "gno";
    UnderlyingAsset["GNT"] = "gnt";
    UnderlyingAsset["GOLD"] = "gold";
    UnderlyingAsset["GOT"] = "got";
    UnderlyingAsset["GTO"] = "gto";
    UnderlyingAsset["GUSD"] = "gusd";
    UnderlyingAsset["GXC"] = "gxc";
    UnderlyingAsset["HEDG"] = "hedg";
    UnderlyingAsset["HKDX"] = "hkdx";
    UnderlyingAsset["HLC"] = "hlc";
    UnderlyingAsset["HOLD"] = "hold";
    UnderlyingAsset["HOT"] = "hot";
    UnderlyingAsset["HQT"] = "hqt";
    UnderlyingAsset["HST"] = "hst";
    UnderlyingAsset["HT"] = "ht";
    UnderlyingAsset["HUM"] = "hum";
    UnderlyingAsset["HXRO"] = "hxro";
    UnderlyingAsset["HYB"] = "hyb";
    UnderlyingAsset["HYDRO"] = "hydro";
    UnderlyingAsset["I8"] = "i8";
    UnderlyingAsset["IDEX"] = "idex";
    UnderlyingAsset["IDRT"] = "idrt";
    UnderlyingAsset["INCX"] = "incx";
    UnderlyingAsset["IND"] = "ind";
    UnderlyingAsset["INF"] = "inf";
    UnderlyingAsset["INX"] = "inx";
    UnderlyingAsset["ISR"] = "isr";
    UnderlyingAsset["IVO"] = "ivo";
    UnderlyingAsset["IVY"] = "ivy";
    UnderlyingAsset["JBC"] = "jbc";
    UnderlyingAsset["JFIN"] = "jfin";
    UnderlyingAsset["JPYX"] = "jpyx";
    UnderlyingAsset["KEY"] = "key";
    UnderlyingAsset["KIN"] = "kin";
    UnderlyingAsset["KNC"] = "knc";
    UnderlyingAsset["KOZ"] = "koz";
    UnderlyingAsset["KZE"] = "kze";
    UnderlyingAsset["LBA"] = "lba";
    UnderlyingAsset["LEND"] = "lend";
    UnderlyingAsset["LEO"] = "leo";
    UnderlyingAsset["LGO"] = "lgo";
    UnderlyingAsset["LINK"] = "link";
    UnderlyingAsset["LION"] = "lion";
    UnderlyingAsset["LNC"] = "lnc";
    UnderlyingAsset["LOOM"] = "loom";
    UnderlyingAsset["LRC"] = "lrc";
    UnderlyingAsset["MATIC"] = "matic";
    UnderlyingAsset["MCDAI"] = "mcdai";
    UnderlyingAsset["MCO"] = "mco";
    UnderlyingAsset["MCX"] = "mcx";
    UnderlyingAsset["MDX"] = "mdx";
    UnderlyingAsset["MEDX"] = "medx";
    UnderlyingAsset["MET"] = "met";
    UnderlyingAsset["META"] = "meta";
    UnderlyingAsset["MFG"] = "mfg";
    UnderlyingAsset["MFPH"] = "mfph";
    UnderlyingAsset["MFT"] = "mft";
    UnderlyingAsset["MITH"] = "mith";
    UnderlyingAsset["MIX"] = "mix";
    UnderlyingAsset["MKR"] = "mkr";
    UnderlyingAsset["MNS"] = "mns";
    UnderlyingAsset["MOC"] = "moc";
    UnderlyingAsset["MPAY"] = "mpay";
    UnderlyingAsset["MTCN"] = "mtcn";
    UnderlyingAsset["MTL"] = "mtl";
    UnderlyingAsset["MUSD"] = "musd";
    UnderlyingAsset["MVL"] = "mvl";
    UnderlyingAsset["NAS"] = "nas";
    UnderlyingAsset["NEU"] = "neu";
    UnderlyingAsset["NEXO"] = "nexo";
    UnderlyingAsset["NGNT"] = "ngnt";
    UnderlyingAsset["NIAX"] = "niax";
    UnderlyingAsset["NMR"] = "nmr";
    UnderlyingAsset["NPXS"] = "npxs";
    UnderlyingAsset["NU"] = "nu";
    UnderlyingAsset["NZDX"] = "nzdx";
    UnderlyingAsset["OCEAN"] = "ocean";
    UnderlyingAsset["OMG"] = "omg";
    UnderlyingAsset["ONL"] = "onl";
    UnderlyingAsset["OPT"] = "opt";
    UnderlyingAsset["ORBS"] = "orbs";
    UnderlyingAsset["OXT"] = "oxt";
    UnderlyingAsset["PASS"] = "pass";
    UnderlyingAsset["PAU"] = "pau";
    UnderlyingAsset["PAX"] = "pax";
    UnderlyingAsset["PAXG"] = "paxg";
    UnderlyingAsset["PAY"] = "pay";
    UnderlyingAsset["PBCH"] = "pbch";
    UnderlyingAsset["PDATA"] = "pdata";
    UnderlyingAsset["PBTC"] = "pbtc";
    UnderlyingAsset["PEG"] = "peg";
    UnderlyingAsset["PETH"] = "peth";
    UnderlyingAsset["PLC"] = "plc";
    UnderlyingAsset["PFCT"] = "pfct";
    UnderlyingAsset["PLANET"] = "planet";
    UnderlyingAsset["PLNX"] = "plnx";
    UnderlyingAsset["PLX"] = "plx";
    UnderlyingAsset["PMA"] = "pma";
    UnderlyingAsset["POLY"] = "poly";
    UnderlyingAsset["POWR"] = "powr";
    UnderlyingAsset["PPT"] = "ppt";
    UnderlyingAsset["PRDX"] = "prdx";
    UnderlyingAsset["PRO"] = "pro";
    UnderlyingAsset["PRTS"] = "prts";
    UnderlyingAsset["PUSD"] = "pusd";
    UnderlyingAsset["QASH"] = "qash";
    UnderlyingAsset["QCAD"] = "qcad";
    UnderlyingAsset["QDT"] = "qdt";
    UnderlyingAsset["QRL"] = "qrl";
    UnderlyingAsset["QSP"] = "qsp";
    UnderlyingAsset["QVT"] = "qvt";
    UnderlyingAsset["RBY"] = "rby";
    UnderlyingAsset["RDN"] = "rdn";
    UnderlyingAsset["REB"] = "reb";
    UnderlyingAsset["REBL"] = "rebl";
    UnderlyingAsset["REP"] = "rep";
    UnderlyingAsset["REPV2"] = "repv2";
    UnderlyingAsset["RFR"] = "rfr";
    UnderlyingAsset["RIF"] = "rif";
    UnderlyingAsset["RINGX"] = "ringx";
    UnderlyingAsset["RLC"] = "rlc";
    UnderlyingAsset["RONC"] = "ronc";
    UnderlyingAsset["ROOBEE"] = "roobee";
    UnderlyingAsset["RUBX"] = "rubx";
    UnderlyingAsset["SALT"] = "salt";
    UnderlyingAsset["SASHIMI"] = "sashimi";
    UnderlyingAsset["SGA"] = "sga";
    UnderlyingAsset["SGDX"] = "sgdx";
    UnderlyingAsset["SGR"] = "sgr";
    UnderlyingAsset["SHK"] = "shk";
    UnderlyingAsset["SHR"] = "shr";
    UnderlyingAsset["SKALE"] = "skale";
    UnderlyingAsset["SLOT"] = "slot";
    UnderlyingAsset["SLVX"] = "slvx";
    UnderlyingAsset["SNC"] = "snc";
    UnderlyingAsset["SNOV"] = "snov";
    UnderlyingAsset["SNT"] = "snt";
    UnderlyingAsset["SNX"] = "snx";
    UnderlyingAsset["SOC"] = "soc";
    UnderlyingAsset["SPO"] = "spo";
    UnderlyingAsset["SOLVE"] = "solve";
    UnderlyingAsset["SRNT"] = "srnt";
    UnderlyingAsset["STORJ"] = "storj";
    UnderlyingAsset["STORM"] = "storm";
    UnderlyingAsset["SUSHI"] = "sushi";
    UnderlyingAsset["SXP"] = "sxp";
    UnderlyingAsset["TAUD"] = "taud";
    UnderlyingAsset["TCAD"] = "tcad";
    UnderlyingAsset["TCO"] = "tco";
    UnderlyingAsset["TEN"] = "ten";
    UnderlyingAsset["TENX"] = "tenx";
    UnderlyingAsset["TERC20"] = "terc20";
    UnderlyingAsset["TGBP"] = "tgbp";
    UnderlyingAsset["THKD"] = "thkd";
    UnderlyingAsset["TIOX"] = "tiox";
    UnderlyingAsset["TKX"] = "tkx";
    UnderlyingAsset["TNT"] = "tnt";
    UnderlyingAsset["TRST"] = "trst";
    UnderlyingAsset["TRYB"] = "tryb";
    UnderlyingAsset["TRYX"] = "tryx";
    UnderlyingAsset["TUSD"] = "tusd";
    UnderlyingAsset["UAIR"] = "uair";
    UnderlyingAsset["UCO"] = "uco";
    UnderlyingAsset["UKG"] = "ukg";
    UnderlyingAsset["UMA"] = "uma";
    UnderlyingAsset["UNI"] = "uni";
    UnderlyingAsset["UP"] = "up";
    UnderlyingAsset["UPBTC"] = "upbtc";
    UnderlyingAsset["UPP"] = "upp";
    UnderlyingAsset["UPT"] = "upt";
    UnderlyingAsset["UPUSD"] = "upusd";
    UnderlyingAsset["UQC"] = "uqc";
    UnderlyingAsset["USDC"] = "usdc";
    UnderlyingAsset["USDT"] = "usdt";
    UnderlyingAsset["USDX"] = "usdx";
    UnderlyingAsset["USG"] = "usg";
    UnderlyingAsset["USPX"] = "uspx";
    UnderlyingAsset["USX"] = "usx";
    UnderlyingAsset["UTK"] = "utk";
    UnderlyingAsset["UTK1"] = "utk1";
    UnderlyingAsset["VALOR"] = "valor";
    UnderlyingAsset["VDX"] = "vdx";
    UnderlyingAsset["VRGX"] = "vrgx";
    UnderlyingAsset["WAFL"] = "wafl";
    UnderlyingAsset["WAX"] = "wax";
    UnderlyingAsset["WABI"] = "wabi";
    UnderlyingAsset["WBTC"] = "wbtc";
    UnderlyingAsset["WET"] = "wet";
    UnderlyingAsset["WHT"] = "wht";
    UnderlyingAsset["WPX"] = "wpx";
    UnderlyingAsset["WTC"] = "wtc";
    UnderlyingAsset["WXRP"] = "wxrp";
    UnderlyingAsset["XBGOLD"] = "xbgold";
    UnderlyingAsset["XCD"] = "xcd";
    UnderlyingAsset["XEX"] = "xex";
    UnderlyingAsset["XRL"] = "xrl";
    UnderlyingAsset["XSGD"] = "xsgd";
    UnderlyingAsset["XTP"] = "xtp";
    UnderlyingAsset["YFI"] = "yfi";
    UnderlyingAsset["YFII"] = "yfii";
    UnderlyingAsset["YNG"] = "yng";
    UnderlyingAsset["YSEY"] = "ysey";
    UnderlyingAsset["ZARX"] = "zarx";
    UnderlyingAsset["ZCO"] = "zco";
    UnderlyingAsset["ZIL"] = "zil";
    UnderlyingAsset["ZIX"] = "zix";
    UnderlyingAsset["ZMT"] = "zmt";
    UnderlyingAsset["ZOOM"] = "zoom";
    UnderlyingAsset["ZRX"] = "zrx";
    UnderlyingAsset["xlm:BST-GADDFE4R72YUP2AOEL67OHZN3GJQYPC3VE734N2XFMEGRR2L32CZ3XYZ"] = "xlm:BST-GADDFE4R72YUP2AOEL67OHZN3GJQYPC3VE734N2XFMEGRR2L32CZ3XYZ";
    UnderlyingAsset["xlm:VELO-GC7GMEKN2P5LKGOVW55WGHMVQRPPRPHIRFMIC75Z6WPYPYR7B3Z3WEKH"] = "xlm:VELO-GC7GMEKN2P5LKGOVW55WGHMVQRPPRPHIRFMIC75Z6WPYPYR7B3Z3WEKH";
    UnderlyingAsset["xlm:SLT-GCKA6K5PCQ6PNF5RQBF7PQDJWRHO6UOGFMRLK3DYHDOI244V47XKQ4GP"] = "xlm:SLT-GCKA6K5PCQ6PNF5RQBF7PQDJWRHO6UOGFMRLK3DYHDOI244V47XKQ4GP";
    UnderlyingAsset["xlm:USD-GDUKMGUGDZQK6YHYA5Z6AY2G4XDSZPSZ3SW5UN3ARVMO6QSRDWP5YLEX"] = "xlm:USD-GDUKMGUGDZQK6YHYA5Z6AY2G4XDSZPSZ3SW5UN3ARVMO6QSRDWP5YLEX";
    UnderlyingAsset["xlm:ETH-GBVOL67TMUQBGL4TZYNMY3ZQ5WGQYFPFD5VJRWXR72VA33VFNL225PL5"] = "xlm:ETH-GBVOL67TMUQBGL4TZYNMY3ZQ5WGQYFPFD5VJRWXR72VA33VFNL225PL5";
    UnderlyingAsset["xlm:WXT-GASBLVHS5FOABSDNW5SPPH3QRJYXY5JHA2AOA2QHH2FJLZBRXSG4SWXT"] = "xlm:WXT-GASBLVHS5FOABSDNW5SPPH3QRJYXY5JHA2AOA2QHH2FJLZBRXSG4SWXT";
    // Kovan-only ERC20 tokens
    UnderlyingAsset["TEST"] = "test";
    UnderlyingAsset["SCHZ"] = "schz";
    UnderlyingAsset["CAT"] = "cat";
    // Stellar testnet tokens
    UnderlyingAsset["txlm:BST-GBQTIOS3XGHB7LVYGBKQVJGCZ3R4JL5E4CBSWJ5ALIJUHBKS6263644L"] = "txlm:BST-GBQTIOS3XGHB7LVYGBKQVJGCZ3R4JL5E4CBSWJ5ALIJUHBKS6263644L";
    UnderlyingAsset["txlm:TST-GBQTIOS3XGHB7LVYGBKQVJGCZ3R4JL5E4CBSWJ5ALIJUHBKS6263644L"] = "txlm:TST-GBQTIOS3XGHB7LVYGBKQVJGCZ3R4JL5E4CBSWJ5ALIJUHBKS6263644L";
})(UnderlyingAsset = exports.UnderlyingAsset || (exports.UnderlyingAsset = {}));
/**
 * This is the curve BitGo signs against with the user, backup and BitGo key.
 */
var KeyCurve;
(function (KeyCurve) {
    KeyCurve["Secp256k1"] = "secp256k1";
    KeyCurve["Ed25519"] = "ed25519";
})(KeyCurve = exports.KeyCurve || (exports.KeyCurve = {}));
var BaseCoin = /** @class */ (function () {
    function BaseCoin(options) {
        this.validateOptions(options);
        this.fullName = options.fullName;
        this.name = options.name;
        this.prefix = options.prefix;
        this.suffix = options.suffix;
        this.kind = options.kind;
        this.family = options.network.family;
        this.isToken = options.isToken;
        this.features = options.features;
        this.decimalPlaces = options.decimalPlaces;
        this.asset = options.asset;
        this.network = options.network;
        this.primaryKeyCurve = options.primaryKeyCurve;
    }
    /**
     * Ensures that the base coin constructor was passed a valid set of options.
     *
     * This includes checking that:
     * - All coin features of the new instance are allowed by the coin class
     * - No features required by the coin class are missing from the new instance
     * @param {BaseCoinConstructorOptions} options
     * @throws {DisallowedCoinFeatureError} if any of the coin features are not allowed for the coin class
     * @throws {MissingRequiredCoinFeatureError} if any features required by the coin class are missing
     */
    BaseCoin.prototype.validateOptions = function (options) {
        var requiredFeatures = this.requiredFeatures();
        var disallowedFeatures = this.disallowedFeatures();
        var intersectionFeatures = Array.from(requiredFeatures).filter(function (feat) { return disallowedFeatures.has(feat); });
        if (intersectionFeatures.length > 0) {
            throw new errors_1.ConflictingCoinFeaturesError(options.name, intersectionFeatures);
        }
        for (var _i = 0, _a = options.features; _i < _a.length; _i++) {
            var feature = _a[_i];
            if (disallowedFeatures.has(feature)) {
                throw new errors_1.DisallowedCoinFeatureError(options.name, feature);
            }
            if (requiredFeatures.has(feature)) {
                requiredFeatures.delete(feature);
            }
        }
        if (requiredFeatures.size > 0) {
            // some required features were missing
            throw new errors_1.MissingRequiredCoinFeatureError(options.name, Array.from(requiredFeatures));
        }
    };
    return BaseCoin;
}());
exports.BaseCoin = BaseCoin;
//# sourceMappingURL=data:application/json;base64,