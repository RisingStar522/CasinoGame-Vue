"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Networks = exports.BaseNetwork = exports.NetworkType = void 0;
var base_1 = require("./base");
var NetworkType;
(function (NetworkType) {
    NetworkType["MAINNET"] = "mainnet";
    NetworkType["TESTNET"] = "testnet";
})(NetworkType = exports.NetworkType || (exports.NetworkType = {}));
var BaseNetwork = /** @class */ (function () {
    function BaseNetwork() {
    }
    return BaseNetwork;
}());
exports.BaseNetwork = BaseNetwork;
var Mainnet = /** @class */ (function (_super) {
    __extends(Mainnet, _super);
    function Mainnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = NetworkType.MAINNET;
        return _this;
    }
    return Mainnet;
}(BaseNetwork));
var Testnet = /** @class */ (function (_super) {
    __extends(Testnet, _super);
    function Testnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = NetworkType.TESTNET;
        return _this;
    }
    return Testnet;
}(BaseNetwork));
/**
 * Mainnet abstract class for Bitcoin forks. These are the constants from the Bitcoin main network,
 * which are overridden to various degrees by each Bitcoin fork.
 *
 * This allows us to not redefine these properties for forks which haven't changed them from Bitcoin.
 *
 * However, if a coin network has changed one of these properties, and you accidentally forget to override,
 * you'll inherit the incorrect values from the Bitcoin network. Be wary, and double check your network constant
 * overrides to ensure you're not missing any changes.
 */
var BitcoinLikeMainnet = /** @class */ (function (_super) {
    __extends(BitcoinLikeMainnet, _super);
    function BitcoinLikeMainnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // https://github.com/bitcoin/bitcoin/blob/master/src/validation.cpp
        // https://github.com/bitcoin/bitcoin/blob/master/src/chainparams.cpp
        _this.messagePrefix = '\x18Bitcoin Signed Message:\n';
        _this.bip32 = {
            // base58 'xpub'
            public: 0x0488b21e,
            // base58 'xprv'
            private: 0x0488ade4,
        };
        _this.pubKeyHash = 0x00;
        _this.scriptHash = 0x05;
        _this.wif = 0x80;
        _this.type = NetworkType.MAINNET;
        return _this;
    }
    return BitcoinLikeMainnet;
}(Mainnet));
/**
 * Testnet abstract class for Bitcoin forks. Works exactly the same as `BitcoinLikeMainnet`,
 * except the constants are taken from the Bitcoin test network.
 */
var BitcoinLikeTestnet = /** @class */ (function (_super) {
    __extends(BitcoinLikeTestnet, _super);
    function BitcoinLikeTestnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // https://github.com/bitcoin/bitcoin/blob/master/src/validation.cpp
        // https://github.com/bitcoin/bitcoin/blob/master/src/chainparams.cpp
        _this.messagePrefix = '\x18Bitcoin Signed Message:\n';
        _this.bip32 = {
            public: 0x043587cf,
            private: 0x04358394,
        };
        _this.pubKeyHash = 0x6f;
        _this.scriptHash = 0xc4;
        _this.wif = 0xef;
        _this.type = NetworkType.TESTNET;
        return _this;
    }
    return BitcoinLikeTestnet;
}(Testnet));
var Algorand = /** @class */ (function (_super) {
    __extends(Algorand, _super);
    function Algorand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = base_1.CoinFamily.ALGO;
        _this.explorerUrl = 'https://algoexplorer.io/tx/';
        return _this;
    }
    return Algorand;
}(Mainnet));
var AlgorandTestnet = /** @class */ (function (_super) {
    __extends(AlgorandTestnet, _super);
    function AlgorandTestnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = base_1.CoinFamily.ALGO;
        _this.explorerUrl = 'https://testnet.algoexplorer.io/tx/';
        return _this;
    }
    return AlgorandTestnet;
}(Testnet));
var Bitcoin = /** @class */ (function (_super) {
    __extends(Bitcoin, _super);
    function Bitcoin() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = base_1.CoinFamily.BTC;
        _this.explorerUrl = 'https://blockstream.info/tx/';
        _this.bech32 = 'bc';
        return _this;
    }
    return Bitcoin;
}(BitcoinLikeMainnet));
var BitcoinTestnet = /** @class */ (function (_super) {
    __extends(BitcoinTestnet, _super);
    function BitcoinTestnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = base_1.CoinFamily.BTC;
        _this.explorerUrl = 'https://blockstream.info/testnet/tx/';
        _this.bech32 = 'tb';
        return _this;
    }
    return BitcoinTestnet;
}(BitcoinLikeTestnet));
// https://github.com/Bitcoin-ABC/bitcoin-abc/blob/master/src/validation.cpp
// https://github.com/Bitcoin-ABC/bitcoin-abc/blob/master/src/chainparams.cpp
var BitcoinCash = /** @class */ (function (_super) {
    __extends(BitcoinCash, _super);
    function BitcoinCash() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = base_1.CoinFamily.BCH;
        _this.explorerUrl = 'http://blockdozer.com/tx/';
        return _this;
    }
    return BitcoinCash;
}(BitcoinLikeMainnet));
var BitcoinCashTestnet = /** @class */ (function (_super) {
    __extends(BitcoinCashTestnet, _super);
    function BitcoinCashTestnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = base_1.CoinFamily.BCH;
        _this.explorerUrl = 'https://tbch.blockdozer.com/tx/';
        return _this;
    }
    return BitcoinCashTestnet;
}(BitcoinLikeTestnet));
// https://github.com/bitcoin-sv/bitcoin-sv/blob/master/src/validation.cpp
// https://github.com/bitcoin-sv/bitcoin-sv/blob/master/src/chainparams.cpp
var BitcoinSV = /** @class */ (function (_super) {
    __extends(BitcoinSV, _super);
    function BitcoinSV() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = base_1.CoinFamily.BSV;
        _this.explorerUrl = 'https://blockchair.com/bitcoin-sv/transaction/';
        return _this;
    }
    return BitcoinSV;
}(BitcoinLikeMainnet));
var BitcoinSVTestnet = /** @class */ (function (_super) {
    __extends(BitcoinSVTestnet, _super);
    function BitcoinSVTestnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = base_1.CoinFamily.BSV;
        _this.explorerUrl = 'https://testnet.bitcoincloud.net/tx/';
        return _this;
    }
    return BitcoinSVTestnet;
}(BitcoinLikeTestnet));
// https://github.com/BTCGPU/BTCGPU/blob/master/src/validation.cpp
// https://github.com/BTCGPU/BTCGPU/blob/master/src/chainparams.cpp
var BitcoinGold = /** @class */ (function (_super) {
    __extends(BitcoinGold, _super);
    function BitcoinGold() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.messagePrefix = '\x18Bitcoin Gold Signed Message:\n';
        _this.bech32 = 'btg';
        _this.pubKeyHash = 0x26;
        _this.scriptHash = 0x17;
        _this.family = base_1.CoinFamily.BTG;
        _this.explorerUrl = 'https://btgexplorer.com/tx/';
        return _this;
    }
    return BitcoinGold;
}(BitcoinLikeMainnet));
// https://github.com/dashpay/dash/blob/master/src/validation.cpp
// https://github.com/dashpay/dash/blob/master/src/chainparams.cpp
var Dash = /** @class */ (function (_super) {
    __extends(Dash, _super);
    function Dash() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.messagePrefix = '\x19DarkCoin Signed Message:\n';
        _this.pubKeyHash = 0x4c;
        _this.scriptHash = 0x10;
        _this.wif = 0xcc;
        _this.family = base_1.CoinFamily.DASH;
        _this.explorerUrl = 'https://insight.dashevo.org/insight/tx/';
        return _this;
    }
    return Dash;
}(BitcoinLikeMainnet));
var DashTestnet = /** @class */ (function (_super) {
    __extends(DashTestnet, _super);
    function DashTestnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.messagePrefix = '\x19DarkCoin Signed Message:\n';
        _this.pubKeyHash = 0x8c;
        _this.scriptHash = 0x13;
        _this.family = base_1.CoinFamily.DASH;
        _this.explorerUrl = 'https://tbch.blockdozer.com/tx/';
        return _this;
    }
    return DashTestnet;
}(BitcoinLikeTestnet));
var Celo = /** @class */ (function (_super) {
    __extends(Celo, _super);
    function Celo() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = base_1.CoinFamily.CELO;
        _this.explorerUrl = 'https://explorer.celo.org/tx/';
        _this.accountExplorerUrl = 'https://explorer.celo.org/address/';
        return _this;
    }
    return Celo;
}(Mainnet));
var CeloTestnet = /** @class */ (function (_super) {
    __extends(CeloTestnet, _super);
    function CeloTestnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = base_1.CoinFamily.CELO;
        _this.explorerUrl = 'https://alfajores-blockscout.celo-testnet.org/tx/';
        _this.accountExplorerUrl = 'https://alfajores-blockscout.celo-testnet.org/address/';
        return _this;
    }
    return CeloTestnet;
}(Testnet));
var Ethereum = /** @class */ (function (_super) {
    __extends(Ethereum, _super);
    function Ethereum() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = base_1.CoinFamily.ETH;
        _this.explorerUrl = 'https://etherscan.io/tx/';
        _this.accountExplorerUrl = 'https://etherscan.io/address/';
        return _this;
    }
    return Ethereum;
}(Mainnet));
var Kovan = /** @class */ (function (_super) {
    __extends(Kovan, _super);
    function Kovan() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = base_1.CoinFamily.ETH;
        _this.explorerUrl = 'https://kovan.etherscan.io/tx/';
        _this.accountExplorerUrl = 'https://kovan.etherscan.io/address/';
        return _this;
    }
    return Kovan;
}(Testnet));
var Goerli = /** @class */ (function (_super) {
    __extends(Goerli, _super);
    function Goerli() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = base_1.CoinFamily.ETH;
        _this.explorerUrl = 'https://goerli.etherscan.io/tx/';
        _this.accountExplorerUrl = 'https://goerli.etherscan.io/address/';
        return _this;
    }
    return Goerli;
}(Testnet));
var EthereumClassic = /** @class */ (function (_super) {
    __extends(EthereumClassic, _super);
    function EthereumClassic() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = base_1.CoinFamily.ETC;
        _this.explorerUrl = 'https://blockscout.com/etc/mainnet/tx/';
        _this.accountExplorerUrl = 'https://blockscout.com/etc/mainnet/address/';
        return _this;
    }
    return EthereumClassic;
}(Mainnet));
var EthereumClassicTestnet = /** @class */ (function (_super) {
    __extends(EthereumClassicTestnet, _super);
    function EthereumClassicTestnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = base_1.CoinFamily.ETC;
        _this.explorerUrl = 'https://blockscout.com/etc/kotti/tx';
        _this.accountExplorerUrl = 'https://blockscout.com/etc/kotti/address/';
        return _this;
    }
    return EthereumClassicTestnet;
}(Testnet));
var Eos = /** @class */ (function (_super) {
    __extends(Eos, _super);
    function Eos() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = base_1.CoinFamily.EOS;
        _this.explorerUrl = 'https://bloks.io/transaction/';
        return _this;
    }
    return Eos;
}(Mainnet));
var EosTestnet = /** @class */ (function (_super) {
    __extends(EosTestnet, _super);
    function EosTestnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = base_1.CoinFamily.EOS;
        _this.explorerUrl = 'https://jungle.bloks.io/transaction/';
        return _this;
    }
    return EosTestnet;
}(Testnet));
var Hedera = /** @class */ (function (_super) {
    __extends(Hedera, _super);
    function Hedera() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = base_1.CoinFamily.HBAR;
        _this.explorerUrl = 'https://explorer.kabuto.sh/mainnet/transaction/';
        return _this;
    }
    return Hedera;
}(Mainnet));
var HederaTestnet = /** @class */ (function (_super) {
    __extends(HederaTestnet, _super);
    function HederaTestnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = base_1.CoinFamily.HBAR;
        _this.explorerUrl = 'https://explorer.kabuto.sh/testnet/transaction/';
        return _this;
    }
    return HederaTestnet;
}(Testnet));
// https://github.com/litecoin-project/litecoin/blob/master/src/validation.cpp
// https://github.com/litecoin-project/litecoin/blob/master/src/chainparams.cpp
var Litecoin = /** @class */ (function (_super) {
    __extends(Litecoin, _super);
    function Litecoin() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.messagePrefix = '\x19Litecoin Signed Message:\n';
        _this.bech32 = 'ltc';
        _this.pubKeyHash = 0x30;
        _this.scriptHash = 0x32;
        _this.wif = 0xb0;
        _this.family = base_1.CoinFamily.LTC;
        _this.explorerUrl = 'https://live.blockcypher.com/ltc/tx/';
        return _this;
    }
    return Litecoin;
}(BitcoinLikeMainnet));
var LitecoinTestnet = /** @class */ (function (_super) {
    __extends(LitecoinTestnet, _super);
    function LitecoinTestnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.messagePrefix = '\x19Litecoin Signed Message:\n';
        _this.bech32 = 'tltc';
        _this.pubKeyHash = 0x6f;
        _this.scriptHash = 0x3a;
        _this.family = base_1.CoinFamily.LTC;
        _this.explorerUrl = 'http://explorer.litecointools.com/tx/';
        return _this;
    }
    return LitecoinTestnet;
}(BitcoinLikeTestnet));
var Ofc = /** @class */ (function (_super) {
    __extends(Ofc, _super);
    function Ofc() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = base_1.CoinFamily.OFC;
        _this.explorerUrl = undefined;
        return _this;
    }
    return Ofc;
}(Mainnet));
var OfcTestnet = /** @class */ (function (_super) {
    __extends(OfcTestnet, _super);
    function OfcTestnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = base_1.CoinFamily.OFC;
        _this.explorerUrl = undefined;
        return _this;
    }
    return OfcTestnet;
}(Testnet));
var Rbtc = /** @class */ (function (_super) {
    __extends(Rbtc, _super);
    function Rbtc() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = base_1.CoinFamily.RBTC;
        _this.explorerUrl = 'https://explorer.rsk.co/tx/';
        _this.accountExplorerUrl = 'https://explorer.rsk.co/address/';
        return _this;
    }
    return Rbtc;
}(Mainnet));
var RbtcTestnet = /** @class */ (function (_super) {
    __extends(RbtcTestnet, _super);
    function RbtcTestnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = base_1.CoinFamily.RBTC;
        _this.explorerUrl = 'https://explorer.testnet.rsk.co/tx/';
        _this.accountExplorerUrl = 'https://explorer.testnet.rsk.co/address/';
        return _this;
    }
    return RbtcTestnet;
}(Testnet));
var Stellar = /** @class */ (function (_super) {
    __extends(Stellar, _super);
    function Stellar() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = base_1.CoinFamily.XLM;
        _this.explorerUrl = 'https://stellar.expert/explorer/public/tx/';
        return _this;
    }
    return Stellar;
}(Mainnet));
var StellarTestnet = /** @class */ (function (_super) {
    __extends(StellarTestnet, _super);
    function StellarTestnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = base_1.CoinFamily.XLM;
        _this.explorerUrl = 'https://stellar.expert/explorer/testnet/tx/';
        return _this;
    }
    return StellarTestnet;
}(Testnet));
var SUSD = /** @class */ (function (_super) {
    __extends(SUSD, _super);
    function SUSD() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = base_1.CoinFamily.SUSD;
        _this.explorerUrl = undefined;
        return _this;
    }
    return SUSD;
}(Mainnet));
var SUSDTestnet = /** @class */ (function (_super) {
    __extends(SUSDTestnet, _super);
    function SUSDTestnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = base_1.CoinFamily.SUSD;
        _this.explorerUrl = undefined;
        return _this;
    }
    return SUSDTestnet;
}(Testnet));
var Trx = /** @class */ (function (_super) {
    __extends(Trx, _super);
    function Trx() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = base_1.CoinFamily.TRX;
        _this.explorerUrl = 'https://tronscan.org/#/transaction/';
        return _this;
    }
    return Trx;
}(Mainnet));
var TrxTestnet = /** @class */ (function (_super) {
    __extends(TrxTestnet, _super);
    function TrxTestnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = base_1.CoinFamily.TRX;
        _this.explorerUrl = 'https://nile.tronscan.org/#/transaction/';
        return _this;
    }
    return TrxTestnet;
}(Testnet));
var Xrp = /** @class */ (function (_super) {
    __extends(Xrp, _super);
    function Xrp() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = base_1.CoinFamily.XRP;
        _this.explorerUrl = 'https://xrpcharts.ripple.com/#/transactions/';
        return _this;
    }
    return Xrp;
}(Mainnet));
var XrpTestnet = /** @class */ (function (_super) {
    __extends(XrpTestnet, _super);
    function XrpTestnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = base_1.CoinFamily.XRP;
        _this.explorerUrl = 'https://xrpcharts.ripple.com/#/transactions/';
        return _this;
    }
    return XrpTestnet;
}(Testnet));
var Xtz = /** @class */ (function (_super) {
    __extends(Xtz, _super);
    function Xtz() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = base_1.CoinFamily.XTZ;
        _this.explorerUrl = 'https://tezblock.io/transaction/';
        _this.accountExplorerUrl = 'https://tezblock.io/account/';
        return _this;
    }
    return Xtz;
}(Mainnet));
var XtzTestnet = /** @class */ (function (_super) {
    __extends(XtzTestnet, _super);
    function XtzTestnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.family = base_1.CoinFamily.XTZ;
        _this.explorerUrl = 'https://carthagenet.tezblock.io/transaction/';
        _this.accountExplorerUrl = 'https://carthagenet.tezblock.io/account/';
        return _this;
    }
    return XtzTestnet;
}(Testnet));
// https://github.com/zcash/zcash/blob/master/src/validation.cpp
// https://github.com/zcash/zcash/blob/master/src/chainparams.cpp
var ZCash = /** @class */ (function (_super) {
    __extends(ZCash, _super);
    function ZCash() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.messagePrefix = '\x18ZCash Signed Message:\n';
        _this.pubKeyHash = 0x1cb8;
        _this.scriptHash = 0x1cbd;
        _this.family = base_1.CoinFamily.ZEC;
        _this.explorerUrl = 'https://zcash.blockexplorer.com/tx/';
        return _this;
    }
    return ZCash;
}(BitcoinLikeMainnet));
var ZCashTestnet = /** @class */ (function (_super) {
    __extends(ZCashTestnet, _super);
    function ZCashTestnet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.messagePrefix = '\x18ZCash Signed Message:\n';
        _this.pubKeyHash = 0x1d25;
        _this.scriptHash = 0x1cba;
        _this.family = base_1.CoinFamily.ZEC;
        _this.explorerUrl = 'https://explorer.testnet.z.cash/tx/';
        return _this;
    }
    return ZCashTestnet;
}(BitcoinLikeTestnet));
exports.Networks = {
    main: {
        algorand: Object.freeze(new Algorand()),
        bitcoin: Object.freeze(new Bitcoin()),
        bitcoinCash: Object.freeze(new BitcoinCash()),
        bitcoinGold: Object.freeze(new BitcoinGold()),
        bitcoinSV: Object.freeze(new BitcoinSV()),
        celo: Object.freeze(new Celo()),
        dash: Object.freeze(new Dash()),
        eos: Object.freeze(new Eos()),
        ethereum: Object.freeze(new Ethereum()),
        ethereumClassic: Object.freeze(new EthereumClassic()),
        hedera: Object.freeze(new Hedera()),
        litecoin: Object.freeze(new Litecoin()),
        ofc: Object.freeze(new Ofc()),
        rbtc: Object.freeze(new Rbtc()),
        stellar: Object.freeze(new Stellar()),
        susd: Object.freeze(new SUSD()),
        trx: Object.freeze(new Trx()),
        xrp: Object.freeze(new Xrp()),
        xtz: Object.freeze(new Xtz()),
        zCash: Object.freeze(new ZCash()),
    },
    test: {
        algorand: Object.freeze(new AlgorandTestnet()),
        bitcoin: Object.freeze(new BitcoinTestnet()),
        bitcoinCash: Object.freeze(new BitcoinCashTestnet()),
        bitcoinSV: Object.freeze(new BitcoinSVTestnet()),
        celo: Object.freeze(new CeloTestnet()),
        dash: Object.freeze(new DashTestnet()),
        eos: Object.freeze(new EosTestnet()),
        ethereumClassicTestnet: Object.freeze(new EthereumClassicTestnet()),
        hedera: Object.freeze(new HederaTestnet()),
        kovan: Object.freeze(new Kovan()),
        goerli: Object.freeze(new Goerli()),
        litecoin: Object.freeze(new LitecoinTestnet()),
        ofc: Object.freeze(new OfcTestnet()),
        rbtc: Object.freeze(new RbtcTestnet()),
        stellar: Object.freeze(new StellarTestnet()),
        susd: Object.freeze(new SUSDTestnet()),
        trx: Object.freeze(new TrxTestnet()),
        xrp: Object.freeze(new XrpTestnet()),
        xtz: Object.freeze(new XtzTestnet()),
        zCash: Object.freeze(new ZCashTestnet()),
    },
};
//# sourceMappingURL=data:application/json;base64,