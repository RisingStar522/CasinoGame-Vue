"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.utxo = exports.UtxoCoin = void 0;
var base_1 = require("./base");
var UtxoCoin = /** @class */ (function (_super) {
    __extends(UtxoCoin, _super);
    function UtxoCoin(options) {
        var _this = _super.call(this, __assign(__assign({}, options), { kind: base_1.CoinKind.CRYPTO, isToken: false, decimalPlaces: 8 })) || this;
        _this.network = options.network;
        return _this;
    }
    UtxoCoin.prototype.disallowedFeatures = function () {
        return new Set([base_1.CoinFeature.ACCOUNT_MODEL]);
    };
    UtxoCoin.prototype.requiredFeatures = function () {
        return new Set([base_1.CoinFeature.UNSPENT_MODEL]);
    };
    UtxoCoin.DEFAULT_FEATURES = [
        base_1.CoinFeature.UNSPENT_MODEL,
        base_1.CoinFeature.CHILD_PAYS_FOR_PARENT,
        base_1.CoinFeature.WRAPPED_SEGWIT,
        base_1.CoinFeature.NATIVE_SEGWIT,
    ];
    return UtxoCoin;
}(base_1.BaseCoin));
exports.UtxoCoin = UtxoCoin;
/**
 * Factory function for utxo coin instances.
 *
 * @param name unique identifier of the coin
 * @param fullName Complete human-readable name of the coin
 * @param network Network object for this coin
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `UtxoCoin`
 * @param prefix? Optional coin prefix. Defaults to empty string
 * @param suffix? Optional coin suffix. Defaults to coin name.
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
function utxo(name, fullName, network, asset, features, prefix, suffix, 
/** All UTXOs BitGo supports are SECP256K1 **/
primaryKeyCurve) {
    if (features === void 0) { features = UtxoCoin.DEFAULT_FEATURES; }
    if (prefix === void 0) { prefix = ''; }
    if (suffix === void 0) { suffix = name.toUpperCase(); }
    if (primaryKeyCurve === void 0) { primaryKeyCurve = base_1.KeyCurve.Secp256k1; }
    return Object.freeze(new UtxoCoin({
        name: name,
        fullName: fullName,
        network: network,
        prefix: prefix,
        suffix: suffix,
        features: features,
        asset: asset,
        primaryKeyCurve: primaryKeyCurve,
    }));
}
exports.utxo = utxo;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXR4by5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dHhvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLCtCQUFvRjtBQWNwRjtJQUE4Qiw0QkFBUTtJQWFwQyxrQkFBWSxPQUErQjtRQUEzQyxZQUNFLHdDQUNLLE9BQU8sS0FDVixJQUFJLEVBQUUsZUFBUSxDQUFDLE1BQU0sRUFDckIsT0FBTyxFQUFFLEtBQUssRUFDZCxhQUFhLEVBQUUsQ0FBQyxJQUNoQixTQUdIO1FBREMsS0FBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDOztJQUNqQyxDQUFDO0lBRVMscUNBQWtCLEdBQTVCO1FBQ0UsT0FBTyxJQUFJLEdBQUcsQ0FBQyxDQUFDLGtCQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRVMsbUNBQWdCLEdBQTFCO1FBQ0UsT0FBTyxJQUFJLEdBQUcsQ0FBQyxDQUFDLGtCQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBN0JzQix5QkFBZ0IsR0FBRztRQUN4QyxrQkFBVyxDQUFDLGFBQWE7UUFDekIsa0JBQVcsQ0FBQyxxQkFBcUI7UUFDakMsa0JBQVcsQ0FBQyxjQUFjO1FBQzFCLGtCQUFXLENBQUMsYUFBYTtLQUMxQixDQUFDO0lBeUJKLGVBQUM7Q0FBQSxBQS9CRCxDQUE4QixlQUFRLEdBK0JyQztBQS9CWSw0QkFBUTtBQWlDckI7Ozs7Ozs7Ozs7O0dBV0c7QUFDSCxTQUFnQixJQUFJLENBQ2xCLElBQVksRUFDWixRQUFnQixFQUNoQixPQUFvQixFQUNwQixLQUFzQixFQUN0QixRQUFtRCxFQUNuRCxNQUFtQixFQUNuQixNQUFtQztBQUNuQyw4Q0FBOEM7QUFDOUMsZUFBOEM7SUFKOUMseUJBQUEsRUFBQSxXQUEwQixRQUFRLENBQUMsZ0JBQWdCO0lBQ25ELHVCQUFBLEVBQUEsV0FBbUI7SUFDbkIsdUJBQUEsRUFBQSxTQUFpQixJQUFJLENBQUMsV0FBVyxFQUFFO0lBRW5DLGdDQUFBLEVBQUEsa0JBQTRCLGVBQVEsQ0FBQyxTQUFTO0lBRTlDLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FDbEIsSUFBSSxRQUFRLENBQUM7UUFDWCxJQUFJLE1BQUE7UUFDSixRQUFRLFVBQUE7UUFDUixPQUFPLFNBQUE7UUFDUCxNQUFNLFFBQUE7UUFDTixNQUFNLFFBQUE7UUFDTixRQUFRLFVBQUE7UUFDUixLQUFLLE9BQUE7UUFDTCxlQUFlLGlCQUFBO0tBQ2hCLENBQUMsQ0FDSCxDQUFDO0FBQ0osQ0FBQztBQXZCRCxvQkF1QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlQ29pbiwgQ29pbkZlYXR1cmUsIENvaW5LaW5kLCBLZXlDdXJ2ZSwgVW5kZXJseWluZ0Fzc2V0IH0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCB7IFV0eG9OZXR3b3JrIH0gZnJvbSAnLi9uZXR3b3Jrcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXR4b0NvbnN0cnVjdG9yT3B0aW9ucyB7XG4gIGZ1bGxOYW1lOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgbmV0d29yazogVXR4b05ldHdvcms7XG4gIGZlYXR1cmVzOiBDb2luRmVhdHVyZVtdO1xuICBhc3NldDogVW5kZXJseWluZ0Fzc2V0O1xuICBwcmVmaXg/OiBzdHJpbmc7XG4gIHN1ZmZpeD86IHN0cmluZztcbiAgcHJpbWFyeUtleUN1cnZlOiBLZXlDdXJ2ZTtcbn1cblxuZXhwb3J0IGNsYXNzIFV0eG9Db2luIGV4dGVuZHMgQmFzZUNvaW4ge1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IERFRkFVTFRfRkVBVFVSRVMgPSBbXG4gICAgQ29pbkZlYXR1cmUuVU5TUEVOVF9NT0RFTCxcbiAgICBDb2luRmVhdHVyZS5DSElMRF9QQVlTX0ZPUl9QQVJFTlQsXG4gICAgQ29pbkZlYXR1cmUuV1JBUFBFRF9TRUdXSVQsXG4gICAgQ29pbkZlYXR1cmUuTkFUSVZFX1NFR1dJVCxcbiAgXTtcblxuICAvKipcbiAgICogQWRkaXRpb25hbCBmaWVsZHMgZm9yIHV0eG8gY29pbnNcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBuZXR3b3JrOiBVdHhvTmV0d29yaztcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBVdHhvQ29uc3RydWN0b3JPcHRpb25zKSB7XG4gICAgc3VwZXIoe1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGtpbmQ6IENvaW5LaW5kLkNSWVBUTyxcbiAgICAgIGlzVG9rZW46IGZhbHNlLFxuICAgICAgZGVjaW1hbFBsYWNlczogOCxcbiAgICB9KTtcblxuICAgIHRoaXMubmV0d29yayA9IG9wdGlvbnMubmV0d29yaztcbiAgfVxuXG4gIHByb3RlY3RlZCBkaXNhbGxvd2VkRmVhdHVyZXMoKTogU2V0PENvaW5GZWF0dXJlPiB7XG4gICAgcmV0dXJuIG5ldyBTZXQoW0NvaW5GZWF0dXJlLkFDQ09VTlRfTU9ERUxdKTtcbiAgfVxuXG4gIHByb3RlY3RlZCByZXF1aXJlZEZlYXR1cmVzKCk6IFNldDxDb2luRmVhdHVyZT4ge1xuICAgIHJldHVybiBuZXcgU2V0KFtDb2luRmVhdHVyZS5VTlNQRU5UX01PREVMXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBGYWN0b3J5IGZ1bmN0aW9uIGZvciB1dHhvIGNvaW4gaW5zdGFuY2VzLlxuICpcbiAqIEBwYXJhbSBuYW1lIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBjb2luXG4gKiBAcGFyYW0gZnVsbE5hbWUgQ29tcGxldGUgaHVtYW4tcmVhZGFibGUgbmFtZSBvZiB0aGUgY29pblxuICogQHBhcmFtIG5ldHdvcmsgTmV0d29yayBvYmplY3QgZm9yIHRoaXMgY29pblxuICogQHBhcmFtIGFzc2V0IEFzc2V0IHdoaWNoIHRoaXMgY29pbiByZXByZXNlbnRzLiBUaGlzIGlzIHRoZSBzYW1lIGZvciBib3RoIG1haW5uZXQgYW5kIHRlc3RuZXQgdmFyaWFudHMgb2YgYSBjb2luLlxuICogQHBhcmFtIGZlYXR1cmVzPyBGZWF0dXJlcyBvZiB0aGlzIGNvaW4uIERlZmF1bHRzIHRvIHRoZSBERUZBVUxUX0ZFQVRVUkVTIGRlZmluZWQgaW4gYFV0eG9Db2luYFxuICogQHBhcmFtIHByZWZpeD8gT3B0aW9uYWwgY29pbiBwcmVmaXguIERlZmF1bHRzIHRvIGVtcHR5IHN0cmluZ1xuICogQHBhcmFtIHN1ZmZpeD8gT3B0aW9uYWwgY29pbiBzdWZmaXguIERlZmF1bHRzIHRvIGNvaW4gbmFtZS5cbiAqIEBwYXJhbSBwcmltYXJ5S2V5Q3VydmUgVGhlIGVsbGlwdGljIGN1cnZlIGZvciB0aGlzIGNoYWluL3Rva2VuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1dHhvKFxuICBuYW1lOiBzdHJpbmcsXG4gIGZ1bGxOYW1lOiBzdHJpbmcsXG4gIG5ldHdvcms6IFV0eG9OZXR3b3JrLFxuICBhc3NldDogVW5kZXJseWluZ0Fzc2V0LFxuICBmZWF0dXJlczogQ29pbkZlYXR1cmVbXSA9IFV0eG9Db2luLkRFRkFVTFRfRkVBVFVSRVMsXG4gIHByZWZpeDogc3RyaW5nID0gJycsXG4gIHN1ZmZpeDogc3RyaW5nID0gbmFtZS50b1VwcGVyQ2FzZSgpLFxuICAvKiogQWxsIFVUWE9zIEJpdEdvIHN1cHBvcnRzIGFyZSBTRUNQMjU2SzEgKiovXG4gIHByaW1hcnlLZXlDdXJ2ZTogS2V5Q3VydmUgPSBLZXlDdXJ2ZS5TZWNwMjU2azFcbikge1xuICByZXR1cm4gT2JqZWN0LmZyZWV6ZShcbiAgICBuZXcgVXR4b0NvaW4oe1xuICAgICAgbmFtZSxcbiAgICAgIGZ1bGxOYW1lLFxuICAgICAgbmV0d29yayxcbiAgICAgIHByZWZpeCxcbiAgICAgIHN1ZmZpeCxcbiAgICAgIGZlYXR1cmVzLFxuICAgICAgYXNzZXQsXG4gICAgICBwcmltYXJ5S2V5Q3VydmUsXG4gICAgfSlcbiAgKTtcbn1cbiJdfQ==