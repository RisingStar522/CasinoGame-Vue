/**
 * Flowtype definitions for CryptoTransfer_pb
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 */

import * as jspb from "google-protobuf";
import * as BasicTypes_pb from "./BasicTypes_pb";
declare export class TransferList mixins jspb.Message {
  clearAccountamountsList(): void;
  getAccountamountsList(): Array<BasicTypes_pb.AccountAmount>;
  setAccountamountsList(value: Array<BasicTypes_pb.AccountAmount>): void;
  addAccountamounts(
    value?: BasicTypes_pb.AccountAmount,
    index?: number
  ): BasicTypes_pb.AccountAmount;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TransferList$AsObject;
  static toObject(
    includeInstance: boolean,
    msg: TransferList
  ): TransferList$AsObject;
  static extensions: {
    [key: number]: jspb.ExtensionFieldInfo<jspb.Message>,
    ...
  };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>,
    ...
  };
  static serializeBinaryToWriter(
    message: TransferList,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): TransferList;
  static deserializeBinaryFromReader(
    message: TransferList,
    reader: jspb.BinaryReader
  ): TransferList;
}
export type TransferList$AsObject = {
  accountamountsList: Array<BasicTypes_pb.AccountAmount.AsObject>,
  ...
};
declare export class CryptoTransferTransactionBody mixins jspb.Message {
  hasTransfers(): boolean;
  clearTransfers(): void;
  getTransfers(): TransferList | void;
  setTransfers(value?: TransferList): void;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CryptoTransferTransactionBody$AsObject;
  static toObject(
    includeInstance: boolean,
    msg: CryptoTransferTransactionBody
  ): CryptoTransferTransactionBody$AsObject;
  static extensions: {
    [key: number]: jspb.ExtensionFieldInfo<jspb.Message>,
    ...
  };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>,
    ...
  };
  static serializeBinaryToWriter(
    message: CryptoTransferTransactionBody,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): CryptoTransferTransactionBody;
  static deserializeBinaryFromReader(
    message: CryptoTransferTransactionBody,
    reader: jspb.BinaryReader
  ): CryptoTransferTransactionBody;
}
export type CryptoTransferTransactionBody$AsObject = {
  transfers?: TransferList$AsObject,
  ...
};
